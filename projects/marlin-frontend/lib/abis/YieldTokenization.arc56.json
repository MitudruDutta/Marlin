{
    "name": "YieldTokenization",
    "structs": {},
    "methods": [
        {
            "name": "initialize",
            "args": [
                {
                    "type": "string",
                    "name": "base_name"
                },
                {
                    "type": "string",
                    "name": "base_symbol"
                }
            ],
            "returns": {
                "type": "string"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Initialize the yield tokenization protocol",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "create_maturity",
            "args": [
                {
                    "type": "uint64",
                    "name": "maturity_timestamp"
                }
            ],
            "returns": {
                "type": "string"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Create a new maturity date for PT/YT tokens",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "split_tokens",
            "args": [
                {
                    "type": "uint64",
                    "name": "amount"
                },
                {
                    "type": "uint64",
                    "name": "maturity"
                }
            ],
            "returns": {
                "type": "string"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Split SY tokens into PT and YT tokens",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "redeem_tokens",
            "args": [
                {
                    "type": "uint64",
                    "name": "amount"
                },
                {
                    "type": "uint64",
                    "name": "maturity"
                }
            ],
            "returns": {
                "type": "string"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Redeem PT tokens for SY tokens at maturity",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get_user_balances",
            "args": [
                {
                    "type": "byte[]",
                    "name": "user"
                }
            ],
            "returns": {
                "type": "(uint64,uint64,uint64)"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "desc": "Get user's SY, PT, and YT balances",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get_maturity_count",
            "args": [],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "desc": "Get total number of maturities",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "is_protocol_paused",
            "args": [],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "desc": "Check if protocol is paused",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "pause_protocol",
            "args": [],
            "returns": {
                "type": "string"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Pause the protocol (admin only)",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "unpause_protocol",
            "args": [],
            "returns": {
                "type": "string"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Unpause the protocol (admin only)",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "deposit_sy_tokens",
            "args": [
                {
                    "type": "uint64",
                    "name": "amount"
                }
            ],
            "returns": {
                "type": "string"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Deposit SY tokens to user balance (for testing)",
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "desc": "Core yield tokenization contract for PT/YT token splitting",
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 2,
                "bytes": 4
            },
            "local": {
                "ints": 3,
                "bytes": 0
            }
        },
        "keys": {
            "global": {
                "admin": {
                    "keyType": "AVMString",
                    "valueType": "AVMBytes",
                    "key": "YWRtaW4="
                },
                "base_name": {
                    "keyType": "AVMString",
                    "valueType": "AVMString",
                    "key": "YmFzZV9uYW1l"
                },
                "base_symbol": {
                    "keyType": "AVMString",
                    "valueType": "AVMString",
                    "key": "YmFzZV9zeW1ib2w="
                },
                "is_paused": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "aXNfcGF1c2Vk"
                },
                "maturity_count": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "bWF0dXJpdHlfY291bnQ="
                },
                "maturities": {
                    "keyType": "AVMString",
                    "valueType": "AVMBytes",
                    "key": "bWF0dXJpdGllcw=="
                }
            },
            "local": {
                "user_sy_balance": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "c3lfYmFsYW5jZQ=="
                },
                "user_pt_balance": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "cHRfYmFsYW5jZQ=="
                },
                "user_yt_balance": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "eXRfYmFsYW5jZQ=="
                }
            },
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        731,
                        867,
                        1064
                    ],
                    "errorMessage": "Amount must be positive"
                },
                {
                    "pc": [
                        884
                    ],
                    "errorMessage": "Insufficient PT balance"
                },
                {
                    "pc": [
                        748
                    ],
                    "errorMessage": "Insufficient SY balance"
                },
                {
                    "pc": [
                        652
                    ],
                    "errorMessage": "Maturity already exists"
                },
                {
                    "pc": [
                        639
                    ],
                    "errorMessage": "Maturity must be in future"
                },
                {
                    "pc": [
                        737
                    ],
                    "errorMessage": "Maturity not found"
                },
                {
                    "pc": [
                        873
                    ],
                    "errorMessage": "Maturity not reached"
                },
                {
                    "pc": [
                        209,
                        237,
                        261,
                        285,
                        302,
                        319,
                        341,
                        373,
                        405,
                        433
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        633
                    ],
                    "errorMessage": "Only admin can create maturity"
                },
                {
                    "pc": [
                        1031
                    ],
                    "errorMessage": "Only admin can pause"
                },
                {
                    "pc": [
                        1049
                    ],
                    "errorMessage": "Only admin can unpause"
                },
                {
                    "pc": [
                        485
                    ],
                    "errorMessage": "Only creator can initialize"
                },
                {
                    "pc": [
                        645,
                        728,
                        864
                    ],
                    "errorMessage": "Protocol is paused"
                },
                {
                    "pc": [
                        474
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        212,
                        240,
                        264,
                        288,
                        305,
                        322,
                        344,
                        376,
                        408,
                        436
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        631,
                        1029,
                        1047
                    ],
                    "errorMessage": "check self.admin exists"
                },
                {
                    "pc": [
                        643,
                        726,
                        862,
                        1021
                    ],
                    "errorMessage": "check self.is_paused exists"
                },
                {
                    "pc": [
                        1016,
                        1160
                    ],
                    "errorMessage": "check self.maturity_count exists"
                },
                {
                    "pc": [
                        763,
                        879,
                        996
                    ],
                    "errorMessage": "check self.user_pt_balance exists for account"
                },
                {
                    "pc": [
                        743,
                        899,
                        989,
                        1070
                    ],
                    "errorMessage": "check self.user_sy_balance exists for account"
                },
                {
                    "pc": [
                        779,
                        1004
                    ],
                    "errorMessage": "check self.user_yt_balance exists for account"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "byteCode": {
        "approval": "CiACAAEmCgQVH3x1CWlzX3BhdXNlZApzeV9iYWxhbmNlCnB0X2JhbGFuY2UFYWRtaW4ObWF0dXJpdHlfY291bnQKeXRfYmFsYW5jZQsgTWF0dXJpdHk6IA9Qcm90b2NvbCBwYXVzZWQRUHJvdG9jb2wgdW5wYXVzZWQxG0EBU4IKBA0LMVgE1tKPBATPCGHZBF9hj8YEjVQidwRSmeDEBP4Mr4oETMeTxgSz5rReBGVg7d02GgCOCgDiAMYApgCGAHAAXwBOADYAHgACIkMxGRREMRhENhoBF4gDR0kVFlcGAkxQKExQsCNDMRkURDEYRIgDHUkVFlcGAkxQKExQsCNDMRkURDEYRIgC80kVFlcGAkxQKExQsCNDMRkURDEYRIgC1hYoTFCwI0MxGRREMRhEiAK/FihMULAjQzEZFEQxGEQ2GgFXAgCIAokoTFCwI0MxGRREMRhENhoBFzYaAheIAfRJFRZXBgJMUChMULAjQzEZFEQxGEQ2GgEXNhoCF4gBTEkVFlcGAkxQKExQsCNDMRkURDEYRDYaAReIAM5JFRZXBgJMUChMULAjQzEZFEQxGEQ2GgFXAgA2GgJXAgCIABlJFRZXBgJMUChMULAjQzEZQP71MRgURCNDigIBMQAyCRJEJwQxAGeACWJhc2VfbmFtZYv+Z4ALYmFzZV9zeW1ib2yL/2cpImcnBSJnggIKbWF0dXJpdGllcwBnMgeBgJqeAQiIAleAHVlpZWxkVG9rZW5pemF0aW9uIGluaXRpYWxpemVksIAhUHJvdG9jb2wgaW5pdGlhbGl6ZWQgc3VjY2Vzc2Z1bGx5iYoBATEAIicEZUQSRIv/MgcNRCIpZUQURIv/iAIFFESL/4gB74v/FoAWTmV3IG1hdHVyaXR5IGNyZWF0ZWQ6IExQsIAdTWF0dXJpdHkgY3JlYXRlZCBzdWNjZXNzZnVsbHmJigIBIillRBREi/5Ei/+IAa9EMQAiKmNESYv+D0SL/gkxACpPAmYxACIrY0SL/ggxACtPAmYxACInBmNEi/4IMQAnBk8CZov+FoAXVG9rZW5zIHNwbGl0IC0gQW1vdW50OiBMUCcHUIv/FlCwgBlUb2tlbnMgc3BsaXQgc3VjY2Vzc2Z1bGx5iYoCASIpZUQURIv+RDIHi/8PRDEAIitjREmL/g9Ei/4JMQArTwJmMQAiKmNEi/4IMQAqTwJmi/4WgBpUb2tlbnMgcmVkZWVtZWQgLSBBbW91bnQ6IExQJwdQi/8WULCAHFRva2VucyByZWRlZW1lZCBzdWNjZXNzZnVsbHmJigEBMQAiKmNEFjEAIitjRBYxACInBmNEFk4CUExQiSInBWVEiSIpZUSJMQAiJwRlRBJEKSNnJwiwJwiJMQAiJwRlRBJEKSJnJwmwJwmJigEBi/9EMQAiKmNEi/8IMQAqTwJmi/8WgB5TWSB0b2tlbnMgZGVwb3NpdGVkIC0gQW1vdW50OiBMULCAIFNZIHRva2VucyBkZXBvc2l0ZWQgc3VjY2Vzc2Z1bGx5iYoBACInBWVEIwgnBUxniYoBAYv/MgcNQQAQMgeBgOeEDwiL/w9BAAIjiSKJ",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 4,
            "minor": 10,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {}
}