/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { type AlgorandClient } from '@algorandfoundation/algokit-utils/types/algorand-client'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"name":"StakingDapp","structs":{},"methods":[{"name":"initialize","args":[{"type":"string","name":"reward_name"},{"type":"string","name":"reward_symbol"}],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Initialize the staking contract","events":[],"recommendations":{}},{"name":"stake","args":[{"type":"uint64","name":"amount"}],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Stake tokens","events":[],"recommendations":{}},{"name":"unstake","args":[{"type":"uint64","name":"amount"}],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Unstake tokens","events":[],"recommendations":{}},{"name":"claim_rewards","args":[],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Claim accumulated rewards","events":[],"recommendations":{}},{"name":"calculate_pending_rewards","args":[],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"desc":"Calculate pending rewards for the sender","events":[],"recommendations":{}},{"name":"get_user_info","args":[],"returns":{"type":"(uint64,uint64,uint64)"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"desc":"Get user's staking information","events":[],"recommendations":{}},{"name":"get_staking_info","args":[],"returns":{"type":"(uint64,uint64,uint64,uint64)"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"desc":"Get general staking information","events":[],"recommendations":{}},{"name":"get_reward_rate","args":[],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"desc":"Get reward rate per second","events":[],"recommendations":{}},{"name":"update_reward_parameters","args":[{"type":"uint64","name":"new_reward_amount"},{"type":"uint64","name":"new_reward_interval"}],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Update reward parameters (admin only)","events":[],"recommendations":{}},{"name":"emergency_withdraw","args":[],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Emergency withdraw all staked tokens (user only, no rewards)","events":[],"recommendations":{}},{"name":"pause_staking","args":[],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Pause staking (admin only)","events":[],"recommendations":{}},{"name":"unpause_staking","args":[],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Unpause staking (admin only)","events":[],"recommendations":{}},{"name":"is_staking_paused","args":[],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"desc":"Check if staking is paused","events":[],"recommendations":{}},{"name":"compound_rewards","args":[],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Compound rewards by staking them","events":[],"recommendations":{}}],"arcs":[22,28],"desc":"Staking DApp for time-based rewards","networks":{},"state":{"schema":{"global":{"ints":6,"bytes":3},"local":{"ints":3,"bytes":0}},"keys":{"global":{"admin":{"keyType":"AVMString","valueType":"AVMBytes","key":"YWRtaW4="},"reward_name":{"keyType":"AVMString","valueType":"AVMString","key":"cmV3YXJkX25hbWU="},"reward_symbol":{"keyType":"AVMString","valueType":"AVMString","key":"cmV3YXJkX3N5bWJvbA=="},"is_paused":{"keyType":"AVMString","valueType":"AVMUint64","key":"aXNfcGF1c2Vk"},"total_staked":{"keyType":"AVMString","valueType":"AVMUint64","key":"dG90YWxfc3Rha2Vk"},"total_rewards_distributed":{"keyType":"AVMString","valueType":"AVMUint64","key":"dG90YWxfcmV3YXJkc19kaXN0cmlidXRlZA=="},"reward_amount":{"keyType":"AVMString","valueType":"AVMUint64","key":"cmV3YXJkX2Ftb3VudA=="},"reward_interval":{"keyType":"AVMString","valueType":"AVMUint64","key":"cmV3YXJkX2ludGVydmFs"},"precision_factor":{"keyType":"AVMString","valueType":"AVMUint64","key":"cHJlY2lzaW9uX2ZhY3Rvcg=="}},"local":{"staked_amount":{"keyType":"AVMString","valueType":"AVMUint64","key":"c3Rha2VkX2Ftb3VudA=="},"last_reward_time":{"keyType":"AVMString","valueType":"AVMUint64","key":"bGFzdF9yZXdhcmRfdGltZQ=="},"reward_balance":{"keyType":"AVMString","valueType":"AVMUint64","key":"cmV3YXJkX2JhbGFuY2U="}},"box":{}},"maps":{"global":{},"local":{},"box":{}}},"bareActions":{"create":["NoOp"],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"pc":[805,913],"errorMessage":"Amount must be positive"},{"pc":[924],"errorMessage":"Insufficient staked amount"},{"pc":[1036],"errorMessage":"No rewards to claim"},{"pc":[1570],"errorMessage":"No rewards to compound"},{"pc":[1313],"errorMessage":"No tokens staked"},{"pc":[331,355,372,396,420,444,476,493,509,525,542,566,594,622],"errorMessage":"OnCompletion is not NoOp"},{"pc":[1407],"errorMessage":"Only admin can pause"},{"pc":[1425],"errorMessage":"Only admin can unpause"},{"pc":[1220],"errorMessage":"Only admin can update"},{"pc":[674],"errorMessage":"Only creator can initialize"},{"pc":[1223],"errorMessage":"Reward amount must be positive"},{"pc":[1226],"errorMessage":"Reward interval must be positive"},{"pc":[802,910,1024,1558],"errorMessage":"Staking is paused"},{"pc":[663],"errorMessage":"can only call when creating"},{"pc":[334,358,375,399,423,447,479,496,512,528,545,569,597,625],"errorMessage":"can only call when not creating"},{"pc":[1218,1405,1423],"errorMessage":"check self.admin exists"},{"pc":[800,908,1022,1438,1556],"errorMessage":"check self.is_paused exists"},{"pc":[1510],"errorMessage":"check self.last_reward_time exists for account"},{"pc":[1200,1548],"errorMessage":"check self.precision_factor exists"},{"pc":[1172,1195,1539],"errorMessage":"check self.reward_amount exists"},{"pc":[1034,1131,1146,1456,1568],"errorMessage":"check self.reward_balance exists for account"},{"pc":[1178,1206,1533],"errorMessage":"check self.reward_interval exists"},{"pc":[814,919,1138,1311,1490,1582],"errorMessage":"check self.staked_amount exists for account"},{"pc":[1047,1166],"errorMessage":"check self.total_rewards_distributed exists"},{"pc":[827,940,1160,1322,1595],"errorMessage":"check self.total_staked exists"}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"},"byteCode":{"approval":"CiACAAEmDQQVH3x1DHRvdGFsX3N0YWtlZA1zdGFrZWRfYW1vdW50CWlzX3BhdXNlZA5yZXdhcmRfYmFsYW5jZQ1yZXdhcmRfYW1vdW50D3Jld2FyZF9pbnRlcnZhbBBsYXN0X3Jld2FyZF90aW1lBWFkbWluGXRvdGFsX3Jld2FyZHNfZGlzdHJpYnV0ZWQQcHJlY2lzaW9uX2ZhY3Rvcg5TdGFraW5nIHBhdXNlZBBTdGFraW5nIHVucGF1c2VkMRhAABMnBYEFZycGgQpnJwqBgJTr3ANnMRtBAbKCDgQNCzFYBLTitIcEK+9KTQRUYW3hBHFwV80EQ7FfiATdNuRdBDCPSooE9U106QRNSBXnBGbcOWoEIwyA3wRsxTfyBNxJTgM2GgCODgElAQkA7QDVAMQAtACkAJMAcwBbAEMAKwAaAAIiQzEZFEQxGESIBL9JFRZXBgJMUChMULAjQzEZFEQxGESIBDEWKExQsCNDMRkURDEYRIgEDkkVFlcGAkxQKExQsCNDMRkURDEYRIgD5EkVFlcGAkxQKExQsCNDMRkURDEYRIgDb0kVFlcGAkxQKExQsCNDMRkURDEYRDYaARc2GgIXiALuSRUWVwYCTFAoTFCwI0MxGRREMRhEiALEFihMULAjQzEZFEQxGESIApEoTFCwI0MxGRREMRhEiAJeKExQsCNDMRkURDEYRIgCShYoTFCwI0MxGRREMRhEiAHWSRUWVwYCTFAoTFCwI0MxGRREMRhENhoBF4gBRUkVFlcGAkxQKExQsCNDMRkURDEYRDYaAReIAL1JFRZXBgJMUChMULAjQzEZFEQxGEQ2GgFXAgA2GgJXAgCIABlJFRZXBgJMUChMULAjQzEZQP6yMRgURCNDigIBMQAyCRJEJwgxAGeAC3Jld2FyZF9uYW1li/5ngA1yZXdhcmRfc3ltYm9si/9nKyJnKSJnJwkiZ4AXU3Rha2luZ0RhcHAgaW5pdGlhbGl6ZWSwgClTdGFraW5nIGNvbnRyYWN0IGluaXRpYWxpemVkIHN1Y2Nlc3NmdWxseYmKAQEiK2VEFESL/0SIAncxACIqY0SL/wgxACpPAmYiKWVEi/8IKUxnMQAnBzIHZov/FoAYVG9rZW5zIHN0YWtlZCAtIEFtb3VudDogTFCwgBpUb2tlbnMgc3Rha2VkIHN1Y2Nlc3NmdWxseYmKAQEiK2VEFESL/0QxACIqY0RJi/8PRIgCAIv/CTEAKk8CZiIpZUSL/wkpTGcxACcHMgdmi/8WgBpUb2tlbnMgdW5zdGFrZWQgLSBBbW91bnQ6IExQsIAcVG9rZW5zIHVuc3Rha2VkIHN1Y2Nlc3NmdWxseYkiK2VEFESIAZwxACInBGNESUQxACcEImYiJwllREsBCCcJTGcWgBpSZXdhcmRzIGNsYWltZWQgLSBBbW91bnQ6IExQsIAcUmV3YXJkcyBjbGFpbWVkIHN1Y2Nlc3NmdWxseYmIAWKJiAFeMQAiJwRjRAgxACIqY0QWMQAiJwRjRBZPAhZOAlBMUIkiKWVEFiInCWVEFiInBWVEFiInBmVEFk8DTwNQTwJQTFCJIicFZUQiJwplRAsiJwZlRAqJigIBMQAiJwhlRBJEi/5Ei/9EJwWL/mcnBov/Z4AZUmV3YXJkIHBhcmFtZXRlcnMgdXBkYXRlZLCAJlJld2FyZCBwYXJhbWV0ZXJzIHVwZGF0ZWQgc3VjY2Vzc2Z1bGx5iTEAIipjRElEMQAqImYiKWVESwEJKUxnFoAfRW1lcmdlbmN5IHdpdGhkcmF3YWwgLSBBbW91bnQ6IExQsIAeRW1lcmdlbmN5IHdpdGhkcmF3YWwgY29tcGxldGVkiTEAIicIZUQSRCsjZycLsCcLiTEAIicIZUQSRCsiZycMsCcMiSIrZUSJigAAiAAdSUEAETEAIicEY0SLAAgxACcETwJmMQAnBzIHZomKAAGAAEkxACIqY0xJTwJEQAAEIowAiTEAIicHY0xJTgKMAUQyB0mMAA9BAAQijACJiwCLAQkiJwZlRAoiJwVlRAuLAgsiJwplRAqMAIkiK2VEFESI/4YxACInBGNESUQxACcEImYxACIqY0RLAQgxACpPAmYiKWVESwEIKUxnMQAnBzIHZhaAHVJld2FyZHMgY29tcG91bmRlZCAtIEFtb3VudDogTFCwgB9SZXdhcmRzIGNvbXBvdW5kZWQgc3VjY2Vzc2Z1bGx5iQ==","clear":"CoEBQw=="},"compilerInfo":{"compiler":"puya","compilerVersion":{"major":4,"minor":10,"patch":0}},"events":[],"templateVariables":{}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


/**
 * The argument types for the StakingDapp contract
 */
export type StakingDappArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'initialize(string,string)string': {
      rewardName: string
      rewardSymbol: string
    }
    'stake(uint64)string': {
      amount: bigint | number
    }
    'unstake(uint64)string': {
      amount: bigint | number
    }
    'claim_rewards()string': Record<string, never>
    'calculate_pending_rewards()uint64': Record<string, never>
    'get_user_info()(uint64,uint64,uint64)': Record<string, never>
    'get_staking_info()(uint64,uint64,uint64,uint64)': Record<string, never>
    'get_reward_rate()uint64': Record<string, never>
    'update_reward_parameters(uint64,uint64)string': {
      newRewardAmount: bigint | number
      newRewardInterval: bigint | number
    }
    'emergency_withdraw()string': Record<string, never>
    'pause_staking()string': Record<string, never>
    'unpause_staking()string': Record<string, never>
    'is_staking_paused()uint64': Record<string, never>
    'compound_rewards()string': Record<string, never>
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'initialize(string,string)string': [rewardName: string, rewardSymbol: string]
    'stake(uint64)string': [amount: bigint | number]
    'unstake(uint64)string': [amount: bigint | number]
    'claim_rewards()string': []
    'calculate_pending_rewards()uint64': []
    'get_user_info()(uint64,uint64,uint64)': []
    'get_staking_info()(uint64,uint64,uint64,uint64)': []
    'get_reward_rate()uint64': []
    'update_reward_parameters(uint64,uint64)string': [newRewardAmount: bigint | number, newRewardInterval: bigint | number]
    'emergency_withdraw()string': []
    'pause_staking()string': []
    'unpause_staking()string': []
    'is_staking_paused()uint64': []
    'compound_rewards()string': []
  }
}

/**
 * The return type for each method
 */
export type StakingDappReturns = {
  'initialize(string,string)string': string
  'stake(uint64)string': string
  'unstake(uint64)string': string
  'claim_rewards()string': string
  'calculate_pending_rewards()uint64': bigint
  'get_user_info()(uint64,uint64,uint64)': [bigint, bigint, bigint]
  'get_staking_info()(uint64,uint64,uint64,uint64)': [bigint, bigint, bigint, bigint]
  'get_reward_rate()uint64': bigint
  'update_reward_parameters(uint64,uint64)string': string
  'emergency_withdraw()string': string
  'pause_staking()string': string
  'unpause_staking()string': string
  'is_staking_paused()uint64': bigint
  'compound_rewards()string': string
}

/**
 * Defines the types of available calls and state of the StakingDapp smart contract.
 */
export type StakingDappTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'initialize(string,string)string' | 'initialize', {
      argsObj: StakingDappArgs['obj']['initialize(string,string)string']
      argsTuple: StakingDappArgs['tuple']['initialize(string,string)string']
      returns: StakingDappReturns['initialize(string,string)string']
    }>
    & Record<'stake(uint64)string' | 'stake', {
      argsObj: StakingDappArgs['obj']['stake(uint64)string']
      argsTuple: StakingDappArgs['tuple']['stake(uint64)string']
      returns: StakingDappReturns['stake(uint64)string']
    }>
    & Record<'unstake(uint64)string' | 'unstake', {
      argsObj: StakingDappArgs['obj']['unstake(uint64)string']
      argsTuple: StakingDappArgs['tuple']['unstake(uint64)string']
      returns: StakingDappReturns['unstake(uint64)string']
    }>
    & Record<'claim_rewards()string' | 'claim_rewards', {
      argsObj: StakingDappArgs['obj']['claim_rewards()string']
      argsTuple: StakingDappArgs['tuple']['claim_rewards()string']
      returns: StakingDappReturns['claim_rewards()string']
    }>
    & Record<'calculate_pending_rewards()uint64' | 'calculate_pending_rewards', {
      argsObj: StakingDappArgs['obj']['calculate_pending_rewards()uint64']
      argsTuple: StakingDappArgs['tuple']['calculate_pending_rewards()uint64']
      returns: StakingDappReturns['calculate_pending_rewards()uint64']
    }>
    & Record<'get_user_info()(uint64,uint64,uint64)' | 'get_user_info', {
      argsObj: StakingDappArgs['obj']['get_user_info()(uint64,uint64,uint64)']
      argsTuple: StakingDappArgs['tuple']['get_user_info()(uint64,uint64,uint64)']
      returns: StakingDappReturns['get_user_info()(uint64,uint64,uint64)']
    }>
    & Record<'get_staking_info()(uint64,uint64,uint64,uint64)' | 'get_staking_info', {
      argsObj: StakingDappArgs['obj']['get_staking_info()(uint64,uint64,uint64,uint64)']
      argsTuple: StakingDappArgs['tuple']['get_staking_info()(uint64,uint64,uint64,uint64)']
      returns: StakingDappReturns['get_staking_info()(uint64,uint64,uint64,uint64)']
    }>
    & Record<'get_reward_rate()uint64' | 'get_reward_rate', {
      argsObj: StakingDappArgs['obj']['get_reward_rate()uint64']
      argsTuple: StakingDappArgs['tuple']['get_reward_rate()uint64']
      returns: StakingDappReturns['get_reward_rate()uint64']
    }>
    & Record<'update_reward_parameters(uint64,uint64)string' | 'update_reward_parameters', {
      argsObj: StakingDappArgs['obj']['update_reward_parameters(uint64,uint64)string']
      argsTuple: StakingDappArgs['tuple']['update_reward_parameters(uint64,uint64)string']
      returns: StakingDappReturns['update_reward_parameters(uint64,uint64)string']
    }>
    & Record<'emergency_withdraw()string' | 'emergency_withdraw', {
      argsObj: StakingDappArgs['obj']['emergency_withdraw()string']
      argsTuple: StakingDappArgs['tuple']['emergency_withdraw()string']
      returns: StakingDappReturns['emergency_withdraw()string']
    }>
    & Record<'pause_staking()string' | 'pause_staking', {
      argsObj: StakingDappArgs['obj']['pause_staking()string']
      argsTuple: StakingDappArgs['tuple']['pause_staking()string']
      returns: StakingDappReturns['pause_staking()string']
    }>
    & Record<'unpause_staking()string' | 'unpause_staking', {
      argsObj: StakingDappArgs['obj']['unpause_staking()string']
      argsTuple: StakingDappArgs['tuple']['unpause_staking()string']
      returns: StakingDappReturns['unpause_staking()string']
    }>
    & Record<'is_staking_paused()uint64' | 'is_staking_paused', {
      argsObj: StakingDappArgs['obj']['is_staking_paused()uint64']
      argsTuple: StakingDappArgs['tuple']['is_staking_paused()uint64']
      returns: StakingDappReturns['is_staking_paused()uint64']
    }>
    & Record<'compound_rewards()string' | 'compound_rewards', {
      argsObj: StakingDappArgs['obj']['compound_rewards()string']
      argsTuple: StakingDappArgs['tuple']['compound_rewards()string']
      returns: StakingDappReturns['compound_rewards()string']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        admin: BinaryState
        rewardName: string
        rewardSymbol: string
        isPaused: bigint
        totalStaked: bigint
        totalRewardsDistributed: bigint
        rewardAmount: bigint
        rewardInterval: bigint
        precisionFactor: bigint
      }
      maps: {}
    }
    local: {
      keys: {
        stakedAmount: bigint
        lastRewardTime: bigint
        rewardBalance: bigint
      }
      maps: {}
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type StakingDappSignatures = keyof StakingDappTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type StakingDappNonVoidMethodSignatures = keyof StakingDappTypes['methods'] extends infer T ? T extends keyof StakingDappTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the StakingDapp smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends StakingDappSignatures> = StakingDappTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the StakingDapp smart contract to the method's return type
 */
export type MethodReturn<TSignature extends StakingDappSignatures> = StakingDappTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = StakingDappTypes['state']['global']['keys']

/**
 * Defines the shape of the keyed local state of the application.
 */
export type LocalKeysState = StakingDappTypes['state']['local']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type StakingDappCreateCallParams =
  | Expand<AppClientBareCallParams & {method?: never} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type StakingDappDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: StakingDappCreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the StakingDapp smart contract
 */
export abstract class StakingDappParamsFactory {
  /**
   * Constructs a no op call for the initialize(string,string)string ABI method
   *
   * Initialize the staking contract
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static initialize(params: CallParams<StakingDappArgs['obj']['initialize(string,string)string'] | StakingDappArgs['tuple']['initialize(string,string)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'initialize(string,string)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.rewardName, params.args.rewardSymbol],
    }
  }
  /**
   * Constructs a no op call for the stake(uint64)string ABI method
   *
   * Stake tokens
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static stake(params: CallParams<StakingDappArgs['obj']['stake(uint64)string'] | StakingDappArgs['tuple']['stake(uint64)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'stake(uint64)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.amount],
    }
  }
  /**
   * Constructs a no op call for the unstake(uint64)string ABI method
   *
   * Unstake tokens
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static unstake(params: CallParams<StakingDappArgs['obj']['unstake(uint64)string'] | StakingDappArgs['tuple']['unstake(uint64)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'unstake(uint64)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.amount],
    }
  }
  /**
   * Constructs a no op call for the claim_rewards()string ABI method
   *
   * Claim accumulated rewards
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static claimRewards(params: CallParams<StakingDappArgs['obj']['claim_rewards()string'] | StakingDappArgs['tuple']['claim_rewards()string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'claim_rewards()string' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the calculate_pending_rewards()uint64 ABI method
   *
   * Calculate pending rewards for the sender
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static calculatePendingRewards(params: CallParams<StakingDappArgs['obj']['calculate_pending_rewards()uint64'] | StakingDappArgs['tuple']['calculate_pending_rewards()uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'calculate_pending_rewards()uint64' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the get_user_info()(uint64,uint64,uint64) ABI method
   *
   * Get user's staking information
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getUserInfo(params: CallParams<StakingDappArgs['obj']['get_user_info()(uint64,uint64,uint64)'] | StakingDappArgs['tuple']['get_user_info()(uint64,uint64,uint64)']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'get_user_info()(uint64,uint64,uint64)' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the get_staking_info()(uint64,uint64,uint64,uint64) ABI method
   *
   * Get general staking information
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getStakingInfo(params: CallParams<StakingDappArgs['obj']['get_staking_info()(uint64,uint64,uint64,uint64)'] | StakingDappArgs['tuple']['get_staking_info()(uint64,uint64,uint64,uint64)']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'get_staking_info()(uint64,uint64,uint64,uint64)' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the get_reward_rate()uint64 ABI method
   *
   * Get reward rate per second
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getRewardRate(params: CallParams<StakingDappArgs['obj']['get_reward_rate()uint64'] | StakingDappArgs['tuple']['get_reward_rate()uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'get_reward_rate()uint64' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the update_reward_parameters(uint64,uint64)string ABI method
   *
   * Update reward parameters (admin only)
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static updateRewardParameters(params: CallParams<StakingDappArgs['obj']['update_reward_parameters(uint64,uint64)string'] | StakingDappArgs['tuple']['update_reward_parameters(uint64,uint64)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'update_reward_parameters(uint64,uint64)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.newRewardAmount, params.args.newRewardInterval],
    }
  }
  /**
   * Constructs a no op call for the emergency_withdraw()string ABI method
   *
   * Emergency withdraw all staked tokens (user only, no rewards)
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static emergencyWithdraw(params: CallParams<StakingDappArgs['obj']['emergency_withdraw()string'] | StakingDappArgs['tuple']['emergency_withdraw()string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'emergency_withdraw()string' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the pause_staking()string ABI method
   *
   * Pause staking (admin only)
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static pauseStaking(params: CallParams<StakingDappArgs['obj']['pause_staking()string'] | StakingDappArgs['tuple']['pause_staking()string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'pause_staking()string' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the unpause_staking()string ABI method
   *
   * Unpause staking (admin only)
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static unpauseStaking(params: CallParams<StakingDappArgs['obj']['unpause_staking()string'] | StakingDappArgs['tuple']['unpause_staking()string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'unpause_staking()string' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the is_staking_paused()uint64 ABI method
   *
   * Check if staking is paused
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static isStakingPaused(params: CallParams<StakingDappArgs['obj']['is_staking_paused()uint64'] | StakingDappArgs['tuple']['is_staking_paused()uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'is_staking_paused()uint64' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the compound_rewards()string ABI method
   *
   * Compound rewards by staking them
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static compoundRewards(params: CallParams<StakingDappArgs['obj']['compound_rewards()string'] | StakingDappArgs['tuple']['compound_rewards()string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'compound_rewards()string' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the StakingDapp smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class StakingDappFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `StakingDappFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClient {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new StakingDappClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new StakingDappClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the StakingDapp smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: StakingDappDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
    })
    return { result: result.result, appClient: new StakingDappClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the StakingDapp smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The params for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.params.bare.create(params)
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the StakingDapp smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The transaction for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.createTransaction.bare.create(params)
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the StakingDapp smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The create result
       */
      bare: async (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        const result = await this.appFactory.send.bare.create(params)
        return { result: result.result, appClient: new StakingDappClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the StakingDapp smart contract
 */
export class StakingDappClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `StakingDappClient`
   *
   * @param appClient An `AppClient` instance which has been created with the StakingDapp app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `StakingDappClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends StakingDappNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `StakingDappClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<StakingDappClient> {
    return new StakingDappClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `StakingDappClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<StakingDappClient> {
    return new StakingDappClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClient {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the StakingDapp smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the StakingDapp smart contract using the `initialize(string,string)string` ABI method.
     *
     * Initialize the staking contract
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    initialize: (params: CallParams<StakingDappArgs['obj']['initialize(string,string)string'] | StakingDappArgs['tuple']['initialize(string,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(StakingDappParamsFactory.initialize(params))
    },

    /**
     * Makes a call to the StakingDapp smart contract using the `stake(uint64)string` ABI method.
     *
     * Stake tokens
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    stake: (params: CallParams<StakingDappArgs['obj']['stake(uint64)string'] | StakingDappArgs['tuple']['stake(uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(StakingDappParamsFactory.stake(params))
    },

    /**
     * Makes a call to the StakingDapp smart contract using the `unstake(uint64)string` ABI method.
     *
     * Unstake tokens
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    unstake: (params: CallParams<StakingDappArgs['obj']['unstake(uint64)string'] | StakingDappArgs['tuple']['unstake(uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(StakingDappParamsFactory.unstake(params))
    },

    /**
     * Makes a call to the StakingDapp smart contract using the `claim_rewards()string` ABI method.
     *
     * Claim accumulated rewards
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    claimRewards: (params: CallParams<StakingDappArgs['obj']['claim_rewards()string'] | StakingDappArgs['tuple']['claim_rewards()string']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(StakingDappParamsFactory.claimRewards(params))
    },

    /**
     * Makes a call to the StakingDapp smart contract using the `calculate_pending_rewards()uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Calculate pending rewards for the sender
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    calculatePendingRewards: (params: CallParams<StakingDappArgs['obj']['calculate_pending_rewards()uint64'] | StakingDappArgs['tuple']['calculate_pending_rewards()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(StakingDappParamsFactory.calculatePendingRewards(params))
    },

    /**
     * Makes a call to the StakingDapp smart contract using the `get_user_info()(uint64,uint64,uint64)` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Get user's staking information
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getUserInfo: (params: CallParams<StakingDappArgs['obj']['get_user_info()(uint64,uint64,uint64)'] | StakingDappArgs['tuple']['get_user_info()(uint64,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(StakingDappParamsFactory.getUserInfo(params))
    },

    /**
     * Makes a call to the StakingDapp smart contract using the `get_staking_info()(uint64,uint64,uint64,uint64)` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Get general staking information
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getStakingInfo: (params: CallParams<StakingDappArgs['obj']['get_staking_info()(uint64,uint64,uint64,uint64)'] | StakingDappArgs['tuple']['get_staking_info()(uint64,uint64,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(StakingDappParamsFactory.getStakingInfo(params))
    },

    /**
     * Makes a call to the StakingDapp smart contract using the `get_reward_rate()uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Get reward rate per second
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getRewardRate: (params: CallParams<StakingDappArgs['obj']['get_reward_rate()uint64'] | StakingDappArgs['tuple']['get_reward_rate()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(StakingDappParamsFactory.getRewardRate(params))
    },

    /**
     * Makes a call to the StakingDapp smart contract using the `update_reward_parameters(uint64,uint64)string` ABI method.
     *
     * Update reward parameters (admin only)
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    updateRewardParameters: (params: CallParams<StakingDappArgs['obj']['update_reward_parameters(uint64,uint64)string'] | StakingDappArgs['tuple']['update_reward_parameters(uint64,uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(StakingDappParamsFactory.updateRewardParameters(params))
    },

    /**
     * Makes a call to the StakingDapp smart contract using the `emergency_withdraw()string` ABI method.
     *
     * Emergency withdraw all staked tokens (user only, no rewards)
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    emergencyWithdraw: (params: CallParams<StakingDappArgs['obj']['emergency_withdraw()string'] | StakingDappArgs['tuple']['emergency_withdraw()string']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(StakingDappParamsFactory.emergencyWithdraw(params))
    },

    /**
     * Makes a call to the StakingDapp smart contract using the `pause_staking()string` ABI method.
     *
     * Pause staking (admin only)
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    pauseStaking: (params: CallParams<StakingDappArgs['obj']['pause_staking()string'] | StakingDappArgs['tuple']['pause_staking()string']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(StakingDappParamsFactory.pauseStaking(params))
    },

    /**
     * Makes a call to the StakingDapp smart contract using the `unpause_staking()string` ABI method.
     *
     * Unpause staking (admin only)
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    unpauseStaking: (params: CallParams<StakingDappArgs['obj']['unpause_staking()string'] | StakingDappArgs['tuple']['unpause_staking()string']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(StakingDappParamsFactory.unpauseStaking(params))
    },

    /**
     * Makes a call to the StakingDapp smart contract using the `is_staking_paused()uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Check if staking is paused
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    isStakingPaused: (params: CallParams<StakingDappArgs['obj']['is_staking_paused()uint64'] | StakingDappArgs['tuple']['is_staking_paused()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(StakingDappParamsFactory.isStakingPaused(params))
    },

    /**
     * Makes a call to the StakingDapp smart contract using the `compound_rewards()string` ABI method.
     *
     * Compound rewards by staking them
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    compoundRewards: (params: CallParams<StakingDappArgs['obj']['compound_rewards()string'] | StakingDappArgs['tuple']['compound_rewards()string']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(StakingDappParamsFactory.compoundRewards(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the StakingDapp smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the StakingDapp smart contract using the `initialize(string,string)string` ABI method.
     *
     * Initialize the staking contract
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    initialize: (params: CallParams<StakingDappArgs['obj']['initialize(string,string)string'] | StakingDappArgs['tuple']['initialize(string,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(StakingDappParamsFactory.initialize(params))
    },

    /**
     * Makes a call to the StakingDapp smart contract using the `stake(uint64)string` ABI method.
     *
     * Stake tokens
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    stake: (params: CallParams<StakingDappArgs['obj']['stake(uint64)string'] | StakingDappArgs['tuple']['stake(uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(StakingDappParamsFactory.stake(params))
    },

    /**
     * Makes a call to the StakingDapp smart contract using the `unstake(uint64)string` ABI method.
     *
     * Unstake tokens
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    unstake: (params: CallParams<StakingDappArgs['obj']['unstake(uint64)string'] | StakingDappArgs['tuple']['unstake(uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(StakingDappParamsFactory.unstake(params))
    },

    /**
     * Makes a call to the StakingDapp smart contract using the `claim_rewards()string` ABI method.
     *
     * Claim accumulated rewards
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    claimRewards: (params: CallParams<StakingDappArgs['obj']['claim_rewards()string'] | StakingDappArgs['tuple']['claim_rewards()string']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(StakingDappParamsFactory.claimRewards(params))
    },

    /**
     * Makes a call to the StakingDapp smart contract using the `calculate_pending_rewards()uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Calculate pending rewards for the sender
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    calculatePendingRewards: (params: CallParams<StakingDappArgs['obj']['calculate_pending_rewards()uint64'] | StakingDappArgs['tuple']['calculate_pending_rewards()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(StakingDappParamsFactory.calculatePendingRewards(params))
    },

    /**
     * Makes a call to the StakingDapp smart contract using the `get_user_info()(uint64,uint64,uint64)` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Get user's staking information
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getUserInfo: (params: CallParams<StakingDappArgs['obj']['get_user_info()(uint64,uint64,uint64)'] | StakingDappArgs['tuple']['get_user_info()(uint64,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(StakingDappParamsFactory.getUserInfo(params))
    },

    /**
     * Makes a call to the StakingDapp smart contract using the `get_staking_info()(uint64,uint64,uint64,uint64)` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Get general staking information
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getStakingInfo: (params: CallParams<StakingDappArgs['obj']['get_staking_info()(uint64,uint64,uint64,uint64)'] | StakingDappArgs['tuple']['get_staking_info()(uint64,uint64,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(StakingDappParamsFactory.getStakingInfo(params))
    },

    /**
     * Makes a call to the StakingDapp smart contract using the `get_reward_rate()uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Get reward rate per second
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getRewardRate: (params: CallParams<StakingDappArgs['obj']['get_reward_rate()uint64'] | StakingDappArgs['tuple']['get_reward_rate()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(StakingDappParamsFactory.getRewardRate(params))
    },

    /**
     * Makes a call to the StakingDapp smart contract using the `update_reward_parameters(uint64,uint64)string` ABI method.
     *
     * Update reward parameters (admin only)
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    updateRewardParameters: (params: CallParams<StakingDappArgs['obj']['update_reward_parameters(uint64,uint64)string'] | StakingDappArgs['tuple']['update_reward_parameters(uint64,uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(StakingDappParamsFactory.updateRewardParameters(params))
    },

    /**
     * Makes a call to the StakingDapp smart contract using the `emergency_withdraw()string` ABI method.
     *
     * Emergency withdraw all staked tokens (user only, no rewards)
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    emergencyWithdraw: (params: CallParams<StakingDappArgs['obj']['emergency_withdraw()string'] | StakingDappArgs['tuple']['emergency_withdraw()string']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(StakingDappParamsFactory.emergencyWithdraw(params))
    },

    /**
     * Makes a call to the StakingDapp smart contract using the `pause_staking()string` ABI method.
     *
     * Pause staking (admin only)
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    pauseStaking: (params: CallParams<StakingDappArgs['obj']['pause_staking()string'] | StakingDappArgs['tuple']['pause_staking()string']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(StakingDappParamsFactory.pauseStaking(params))
    },

    /**
     * Makes a call to the StakingDapp smart contract using the `unpause_staking()string` ABI method.
     *
     * Unpause staking (admin only)
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    unpauseStaking: (params: CallParams<StakingDappArgs['obj']['unpause_staking()string'] | StakingDappArgs['tuple']['unpause_staking()string']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(StakingDappParamsFactory.unpauseStaking(params))
    },

    /**
     * Makes a call to the StakingDapp smart contract using the `is_staking_paused()uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Check if staking is paused
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    isStakingPaused: (params: CallParams<StakingDappArgs['obj']['is_staking_paused()uint64'] | StakingDappArgs['tuple']['is_staking_paused()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(StakingDappParamsFactory.isStakingPaused(params))
    },

    /**
     * Makes a call to the StakingDapp smart contract using the `compound_rewards()string` ABI method.
     *
     * Compound rewards by staking them
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    compoundRewards: (params: CallParams<StakingDappArgs['obj']['compound_rewards()string'] | StakingDappArgs['tuple']['compound_rewards()string']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(StakingDappParamsFactory.compoundRewards(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the StakingDapp smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the StakingDapp smart contract using the `initialize(string,string)string` ABI method.
     *
     * Initialize the staking contract
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    initialize: async (params: CallParams<StakingDappArgs['obj']['initialize(string,string)string'] | StakingDappArgs['tuple']['initialize(string,string)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(StakingDappParamsFactory.initialize(params))
      return {...result, return: result.return as unknown as (undefined | StakingDappReturns['initialize(string,string)string'])}
    },

    /**
     * Makes a call to the StakingDapp smart contract using the `stake(uint64)string` ABI method.
     *
     * Stake tokens
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    stake: async (params: CallParams<StakingDappArgs['obj']['stake(uint64)string'] | StakingDappArgs['tuple']['stake(uint64)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(StakingDappParamsFactory.stake(params))
      return {...result, return: result.return as unknown as (undefined | StakingDappReturns['stake(uint64)string'])}
    },

    /**
     * Makes a call to the StakingDapp smart contract using the `unstake(uint64)string` ABI method.
     *
     * Unstake tokens
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    unstake: async (params: CallParams<StakingDappArgs['obj']['unstake(uint64)string'] | StakingDappArgs['tuple']['unstake(uint64)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(StakingDappParamsFactory.unstake(params))
      return {...result, return: result.return as unknown as (undefined | StakingDappReturns['unstake(uint64)string'])}
    },

    /**
     * Makes a call to the StakingDapp smart contract using the `claim_rewards()string` ABI method.
     *
     * Claim accumulated rewards
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    claimRewards: async (params: CallParams<StakingDappArgs['obj']['claim_rewards()string'] | StakingDappArgs['tuple']['claim_rewards()string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(StakingDappParamsFactory.claimRewards(params))
      return {...result, return: result.return as unknown as (undefined | StakingDappReturns['claim_rewards()string'])}
    },

    /**
     * Makes a call to the StakingDapp smart contract using the `calculate_pending_rewards()uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Calculate pending rewards for the sender
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    calculatePendingRewards: async (params: CallParams<StakingDappArgs['obj']['calculate_pending_rewards()uint64'] | StakingDappArgs['tuple']['calculate_pending_rewards()uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(StakingDappParamsFactory.calculatePendingRewards(params))
      return {...result, return: result.return as unknown as (undefined | StakingDappReturns['calculate_pending_rewards()uint64'])}
    },

    /**
     * Makes a call to the StakingDapp smart contract using the `get_user_info()(uint64,uint64,uint64)` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Get user's staking information
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getUserInfo: async (params: CallParams<StakingDappArgs['obj']['get_user_info()(uint64,uint64,uint64)'] | StakingDappArgs['tuple']['get_user_info()(uint64,uint64,uint64)']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(StakingDappParamsFactory.getUserInfo(params))
      return {...result, return: result.return as unknown as (undefined | StakingDappReturns['get_user_info()(uint64,uint64,uint64)'])}
    },

    /**
     * Makes a call to the StakingDapp smart contract using the `get_staking_info()(uint64,uint64,uint64,uint64)` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Get general staking information
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getStakingInfo: async (params: CallParams<StakingDappArgs['obj']['get_staking_info()(uint64,uint64,uint64,uint64)'] | StakingDappArgs['tuple']['get_staking_info()(uint64,uint64,uint64,uint64)']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(StakingDappParamsFactory.getStakingInfo(params))
      return {...result, return: result.return as unknown as (undefined | StakingDappReturns['get_staking_info()(uint64,uint64,uint64,uint64)'])}
    },

    /**
     * Makes a call to the StakingDapp smart contract using the `get_reward_rate()uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Get reward rate per second
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getRewardRate: async (params: CallParams<StakingDappArgs['obj']['get_reward_rate()uint64'] | StakingDappArgs['tuple']['get_reward_rate()uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(StakingDappParamsFactory.getRewardRate(params))
      return {...result, return: result.return as unknown as (undefined | StakingDappReturns['get_reward_rate()uint64'])}
    },

    /**
     * Makes a call to the StakingDapp smart contract using the `update_reward_parameters(uint64,uint64)string` ABI method.
     *
     * Update reward parameters (admin only)
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    updateRewardParameters: async (params: CallParams<StakingDappArgs['obj']['update_reward_parameters(uint64,uint64)string'] | StakingDappArgs['tuple']['update_reward_parameters(uint64,uint64)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(StakingDappParamsFactory.updateRewardParameters(params))
      return {...result, return: result.return as unknown as (undefined | StakingDappReturns['update_reward_parameters(uint64,uint64)string'])}
    },

    /**
     * Makes a call to the StakingDapp smart contract using the `emergency_withdraw()string` ABI method.
     *
     * Emergency withdraw all staked tokens (user only, no rewards)
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    emergencyWithdraw: async (params: CallParams<StakingDappArgs['obj']['emergency_withdraw()string'] | StakingDappArgs['tuple']['emergency_withdraw()string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(StakingDappParamsFactory.emergencyWithdraw(params))
      return {...result, return: result.return as unknown as (undefined | StakingDappReturns['emergency_withdraw()string'])}
    },

    /**
     * Makes a call to the StakingDapp smart contract using the `pause_staking()string` ABI method.
     *
     * Pause staking (admin only)
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    pauseStaking: async (params: CallParams<StakingDappArgs['obj']['pause_staking()string'] | StakingDappArgs['tuple']['pause_staking()string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(StakingDappParamsFactory.pauseStaking(params))
      return {...result, return: result.return as unknown as (undefined | StakingDappReturns['pause_staking()string'])}
    },

    /**
     * Makes a call to the StakingDapp smart contract using the `unpause_staking()string` ABI method.
     *
     * Unpause staking (admin only)
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    unpauseStaking: async (params: CallParams<StakingDappArgs['obj']['unpause_staking()string'] | StakingDappArgs['tuple']['unpause_staking()string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(StakingDappParamsFactory.unpauseStaking(params))
      return {...result, return: result.return as unknown as (undefined | StakingDappReturns['unpause_staking()string'])}
    },

    /**
     * Makes a call to the StakingDapp smart contract using the `is_staking_paused()uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Check if staking is paused
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    isStakingPaused: async (params: CallParams<StakingDappArgs['obj']['is_staking_paused()uint64'] | StakingDappArgs['tuple']['is_staking_paused()uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(StakingDappParamsFactory.isStakingPaused(params))
      return {...result, return: result.return as unknown as (undefined | StakingDappReturns['is_staking_paused()uint64'])}
    },

    /**
     * Makes a call to the StakingDapp smart contract using the `compound_rewards()string` ABI method.
     *
     * Compound rewards by staking them
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    compoundRewards: async (params: CallParams<StakingDappArgs['obj']['compound_rewards()string'] | StakingDappArgs['tuple']['compound_rewards()string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(StakingDappParamsFactory.compoundRewards(params))
      return {...result, return: result.return as unknown as (undefined | StakingDappReturns['compound_rewards()string'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new StakingDappClient(this.appClient.clone(params))
  }

  /**
   * Makes a readonly (simulated) call to the StakingDapp smart contract using the `calculate_pending_rewards()uint64` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * Calculate pending rewards for the sender
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async calculatePendingRewards(params: CallParams<StakingDappArgs['obj']['calculate_pending_rewards()uint64'] | StakingDappArgs['tuple']['calculate_pending_rewards()uint64']> = {args: []}) {
    const result = await this.appClient.send.call(StakingDappParamsFactory.calculatePendingRewards(params))
    return result.return as unknown as StakingDappReturns['calculate_pending_rewards()uint64']
  }

  /**
   * Makes a readonly (simulated) call to the StakingDapp smart contract using the `get_user_info()(uint64,uint64,uint64)` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * Get user's staking information
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async getUserInfo(params: CallParams<StakingDappArgs['obj']['get_user_info()(uint64,uint64,uint64)'] | StakingDappArgs['tuple']['get_user_info()(uint64,uint64,uint64)']> = {args: []}) {
    const result = await this.appClient.send.call(StakingDappParamsFactory.getUserInfo(params))
    return result.return as unknown as StakingDappReturns['get_user_info()(uint64,uint64,uint64)']
  }

  /**
   * Makes a readonly (simulated) call to the StakingDapp smart contract using the `get_staking_info()(uint64,uint64,uint64,uint64)` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * Get general staking information
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async getStakingInfo(params: CallParams<StakingDappArgs['obj']['get_staking_info()(uint64,uint64,uint64,uint64)'] | StakingDappArgs['tuple']['get_staking_info()(uint64,uint64,uint64,uint64)']> = {args: []}) {
    const result = await this.appClient.send.call(StakingDappParamsFactory.getStakingInfo(params))
    return result.return as unknown as StakingDappReturns['get_staking_info()(uint64,uint64,uint64,uint64)']
  }

  /**
   * Makes a readonly (simulated) call to the StakingDapp smart contract using the `get_reward_rate()uint64` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * Get reward rate per second
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async getRewardRate(params: CallParams<StakingDappArgs['obj']['get_reward_rate()uint64'] | StakingDappArgs['tuple']['get_reward_rate()uint64']> = {args: []}) {
    const result = await this.appClient.send.call(StakingDappParamsFactory.getRewardRate(params))
    return result.return as unknown as StakingDappReturns['get_reward_rate()uint64']
  }

  /**
   * Makes a readonly (simulated) call to the StakingDapp smart contract using the `is_staking_paused()uint64` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * Check if staking is paused
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async isStakingPaused(params: CallParams<StakingDappArgs['obj']['is_staking_paused()uint64'] | StakingDappArgs['tuple']['is_staking_paused()uint64']> = {args: []}) {
    const result = await this.appClient.send.call(StakingDappParamsFactory.isStakingPaused(params))
    return result.return as unknown as StakingDappReturns['is_staking_paused()uint64']
  }

  /**
   * Methods to access state for the current StakingDapp app
   */
  state = {
    /**
     * Methods to access global state for the current StakingDapp app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          admin: new BinaryStateValue(result.admin),
          rewardName: result.reward_name,
          rewardSymbol: result.reward_symbol,
          isPaused: result.is_paused,
          totalStaked: result.total_staked,
          totalRewardsDistributed: result.total_rewards_distributed,
          rewardAmount: result.reward_amount,
          rewardInterval: result.reward_interval,
          precisionFactor: result.precision_factor,
        }
      },
      /**
       * Get the current value of the admin key in global state
       */
      admin: async (): Promise<BinaryState> => { return new BinaryStateValue((await this.appClient.state.global.getValue("admin")) as Uint8Array | undefined) },
      /**
       * Get the current value of the reward_name key in global state
       */
      rewardName: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("reward_name")) as string | undefined },
      /**
       * Get the current value of the reward_symbol key in global state
       */
      rewardSymbol: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("reward_symbol")) as string | undefined },
      /**
       * Get the current value of the is_paused key in global state
       */
      isPaused: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("is_paused")) as bigint | undefined },
      /**
       * Get the current value of the total_staked key in global state
       */
      totalStaked: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("total_staked")) as bigint | undefined },
      /**
       * Get the current value of the total_rewards_distributed key in global state
       */
      totalRewardsDistributed: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("total_rewards_distributed")) as bigint | undefined },
      /**
       * Get the current value of the reward_amount key in global state
       */
      rewardAmount: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("reward_amount")) as bigint | undefined },
      /**
       * Get the current value of the reward_interval key in global state
       */
      rewardInterval: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("reward_interval")) as bigint | undefined },
      /**
       * Get the current value of the precision_factor key in global state
       */
      precisionFactor: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("precision_factor")) as bigint | undefined },
    },
    /**
     * Methods to access local state for the current StakingDapp app
     */
    local: (address: string | Address) => {
      const encodedAddress = typeof address === 'string' ? address : encodeAddress(address.publicKey)
      return {
        /**
         * Get all current keyed values from local state
         */
        getAll: async (): Promise<Partial<Expand<LocalKeysState>>> => {
          const result = await this.appClient.state.local(encodedAddress).getAll()
          return {
            stakedAmount: result.staked_amount,
            lastRewardTime: result.last_reward_time,
            rewardBalance: result.reward_balance,
          }
        },
        /**
         * Get the current value of the staked_amount key in local state
         */
        stakedAmount: async (): Promise<bigint | undefined> => { return (await this.appClient.state.local(encodedAddress).getValue("staked_amount")) as bigint | undefined },
        /**
         * Get the current value of the last_reward_time key in local state
         */
        lastRewardTime: async (): Promise<bigint | undefined> => { return (await this.appClient.state.local(encodedAddress).getValue("last_reward_time")) as bigint | undefined },
        /**
         * Get the current value of the reward_balance key in local state
         */
        rewardBalance: async (): Promise<bigint | undefined> => { return (await this.appClient.state.local(encodedAddress).getValue("reward_balance")) as bigint | undefined },
      }
    },
  }

  public newGroup(): StakingDappComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a initialize(string,string)string method call against the StakingDapp contract
       */
      initialize(params: CallParams<StakingDappArgs['obj']['initialize(string,string)string'] | StakingDappArgs['tuple']['initialize(string,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.initialize(params)))
        resultMappers.push((v) => client.decodeReturnValue('initialize(string,string)string', v))
        return this
      },
      /**
       * Add a stake(uint64)string method call against the StakingDapp contract
       */
      stake(params: CallParams<StakingDappArgs['obj']['stake(uint64)string'] | StakingDappArgs['tuple']['stake(uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.stake(params)))
        resultMappers.push((v) => client.decodeReturnValue('stake(uint64)string', v))
        return this
      },
      /**
       * Add a unstake(uint64)string method call against the StakingDapp contract
       */
      unstake(params: CallParams<StakingDappArgs['obj']['unstake(uint64)string'] | StakingDappArgs['tuple']['unstake(uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.unstake(params)))
        resultMappers.push((v) => client.decodeReturnValue('unstake(uint64)string', v))
        return this
      },
      /**
       * Add a claim_rewards()string method call against the StakingDapp contract
       */
      claimRewards(params: CallParams<StakingDappArgs['obj']['claim_rewards()string'] | StakingDappArgs['tuple']['claim_rewards()string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.claimRewards(params)))
        resultMappers.push((v) => client.decodeReturnValue('claim_rewards()string', v))
        return this
      },
      /**
       * Add a calculate_pending_rewards()uint64 method call against the StakingDapp contract
       */
      calculatePendingRewards(params: CallParams<StakingDappArgs['obj']['calculate_pending_rewards()uint64'] | StakingDappArgs['tuple']['calculate_pending_rewards()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.calculatePendingRewards(params)))
        resultMappers.push((v) => client.decodeReturnValue('calculate_pending_rewards()uint64', v))
        return this
      },
      /**
       * Add a get_user_info()(uint64,uint64,uint64) method call against the StakingDapp contract
       */
      getUserInfo(params: CallParams<StakingDappArgs['obj']['get_user_info()(uint64,uint64,uint64)'] | StakingDappArgs['tuple']['get_user_info()(uint64,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getUserInfo(params)))
        resultMappers.push((v) => client.decodeReturnValue('get_user_info()(uint64,uint64,uint64)', v))
        return this
      },
      /**
       * Add a get_staking_info()(uint64,uint64,uint64,uint64) method call against the StakingDapp contract
       */
      getStakingInfo(params: CallParams<StakingDappArgs['obj']['get_staking_info()(uint64,uint64,uint64,uint64)'] | StakingDappArgs['tuple']['get_staking_info()(uint64,uint64,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getStakingInfo(params)))
        resultMappers.push((v) => client.decodeReturnValue('get_staking_info()(uint64,uint64,uint64,uint64)', v))
        return this
      },
      /**
       * Add a get_reward_rate()uint64 method call against the StakingDapp contract
       */
      getRewardRate(params: CallParams<StakingDappArgs['obj']['get_reward_rate()uint64'] | StakingDappArgs['tuple']['get_reward_rate()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getRewardRate(params)))
        resultMappers.push((v) => client.decodeReturnValue('get_reward_rate()uint64', v))
        return this
      },
      /**
       * Add a update_reward_parameters(uint64,uint64)string method call against the StakingDapp contract
       */
      updateRewardParameters(params: CallParams<StakingDappArgs['obj']['update_reward_parameters(uint64,uint64)string'] | StakingDappArgs['tuple']['update_reward_parameters(uint64,uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.updateRewardParameters(params)))
        resultMappers.push((v) => client.decodeReturnValue('update_reward_parameters(uint64,uint64)string', v))
        return this
      },
      /**
       * Add a emergency_withdraw()string method call against the StakingDapp contract
       */
      emergencyWithdraw(params: CallParams<StakingDappArgs['obj']['emergency_withdraw()string'] | StakingDappArgs['tuple']['emergency_withdraw()string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.emergencyWithdraw(params)))
        resultMappers.push((v) => client.decodeReturnValue('emergency_withdraw()string', v))
        return this
      },
      /**
       * Add a pause_staking()string method call against the StakingDapp contract
       */
      pauseStaking(params: CallParams<StakingDappArgs['obj']['pause_staking()string'] | StakingDappArgs['tuple']['pause_staking()string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.pauseStaking(params)))
        resultMappers.push((v) => client.decodeReturnValue('pause_staking()string', v))
        return this
      },
      /**
       * Add a unpause_staking()string method call against the StakingDapp contract
       */
      unpauseStaking(params: CallParams<StakingDappArgs['obj']['unpause_staking()string'] | StakingDappArgs['tuple']['unpause_staking()string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.unpauseStaking(params)))
        resultMappers.push((v) => client.decodeReturnValue('unpause_staking()string', v))
        return this
      },
      /**
       * Add a is_staking_paused()uint64 method call against the StakingDapp contract
       */
      isStakingPaused(params: CallParams<StakingDappArgs['obj']['is_staking_paused()uint64'] | StakingDappArgs['tuple']['is_staking_paused()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.isStakingPaused(params)))
        resultMappers.push((v) => client.decodeReturnValue('is_staking_paused()uint64', v))
        return this
      },
      /**
       * Add a compound_rewards()string method call against the StakingDapp contract
       */
      compoundRewards(params: CallParams<StakingDappArgs['obj']['compound_rewards()string'] | StakingDappArgs['tuple']['compound_rewards()string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.compoundRewards(params)))
        resultMappers.push((v) => client.decodeReturnValue('compound_rewards()string', v))
        return this
      },
      /**
       * Add a clear state call to the StakingDapp contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as StakingDappComposer
  }
}
export type StakingDappComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the initialize(string,string)string ABI method.
   *
   * Initialize the staking contract
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  initialize(params?: CallParams<StakingDappArgs['obj']['initialize(string,string)string'] | StakingDappArgs['tuple']['initialize(string,string)string']>): StakingDappComposer<[...TReturns, StakingDappReturns['initialize(string,string)string'] | undefined]>

  /**
   * Calls the stake(uint64)string ABI method.
   *
   * Stake tokens
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  stake(params?: CallParams<StakingDappArgs['obj']['stake(uint64)string'] | StakingDappArgs['tuple']['stake(uint64)string']>): StakingDappComposer<[...TReturns, StakingDappReturns['stake(uint64)string'] | undefined]>

  /**
   * Calls the unstake(uint64)string ABI method.
   *
   * Unstake tokens
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  unstake(params?: CallParams<StakingDappArgs['obj']['unstake(uint64)string'] | StakingDappArgs['tuple']['unstake(uint64)string']>): StakingDappComposer<[...TReturns, StakingDappReturns['unstake(uint64)string'] | undefined]>

  /**
   * Calls the claim_rewards()string ABI method.
   *
   * Claim accumulated rewards
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  claimRewards(params?: CallParams<StakingDappArgs['obj']['claim_rewards()string'] | StakingDappArgs['tuple']['claim_rewards()string']>): StakingDappComposer<[...TReturns, StakingDappReturns['claim_rewards()string'] | undefined]>

  /**
   * Calls the calculate_pending_rewards()uint64 ABI method.
   *
   * Calculate pending rewards for the sender
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  calculatePendingRewards(params?: CallParams<StakingDappArgs['obj']['calculate_pending_rewards()uint64'] | StakingDappArgs['tuple']['calculate_pending_rewards()uint64']>): StakingDappComposer<[...TReturns, StakingDappReturns['calculate_pending_rewards()uint64'] | undefined]>

  /**
   * Calls the get_user_info()(uint64,uint64,uint64) ABI method.
   *
   * Get user's staking information
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getUserInfo(params?: CallParams<StakingDappArgs['obj']['get_user_info()(uint64,uint64,uint64)'] | StakingDappArgs['tuple']['get_user_info()(uint64,uint64,uint64)']>): StakingDappComposer<[...TReturns, StakingDappReturns['get_user_info()(uint64,uint64,uint64)'] | undefined]>

  /**
   * Calls the get_staking_info()(uint64,uint64,uint64,uint64) ABI method.
   *
   * Get general staking information
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getStakingInfo(params?: CallParams<StakingDappArgs['obj']['get_staking_info()(uint64,uint64,uint64,uint64)'] | StakingDappArgs['tuple']['get_staking_info()(uint64,uint64,uint64,uint64)']>): StakingDappComposer<[...TReturns, StakingDappReturns['get_staking_info()(uint64,uint64,uint64,uint64)'] | undefined]>

  /**
   * Calls the get_reward_rate()uint64 ABI method.
   *
   * Get reward rate per second
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getRewardRate(params?: CallParams<StakingDappArgs['obj']['get_reward_rate()uint64'] | StakingDappArgs['tuple']['get_reward_rate()uint64']>): StakingDappComposer<[...TReturns, StakingDappReturns['get_reward_rate()uint64'] | undefined]>

  /**
   * Calls the update_reward_parameters(uint64,uint64)string ABI method.
   *
   * Update reward parameters (admin only)
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  updateRewardParameters(params?: CallParams<StakingDappArgs['obj']['update_reward_parameters(uint64,uint64)string'] | StakingDappArgs['tuple']['update_reward_parameters(uint64,uint64)string']>): StakingDappComposer<[...TReturns, StakingDappReturns['update_reward_parameters(uint64,uint64)string'] | undefined]>

  /**
   * Calls the emergency_withdraw()string ABI method.
   *
   * Emergency withdraw all staked tokens (user only, no rewards)
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  emergencyWithdraw(params?: CallParams<StakingDappArgs['obj']['emergency_withdraw()string'] | StakingDappArgs['tuple']['emergency_withdraw()string']>): StakingDappComposer<[...TReturns, StakingDappReturns['emergency_withdraw()string'] | undefined]>

  /**
   * Calls the pause_staking()string ABI method.
   *
   * Pause staking (admin only)
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  pauseStaking(params?: CallParams<StakingDappArgs['obj']['pause_staking()string'] | StakingDappArgs['tuple']['pause_staking()string']>): StakingDappComposer<[...TReturns, StakingDappReturns['pause_staking()string'] | undefined]>

  /**
   * Calls the unpause_staking()string ABI method.
   *
   * Unpause staking (admin only)
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  unpauseStaking(params?: CallParams<StakingDappArgs['obj']['unpause_staking()string'] | StakingDappArgs['tuple']['unpause_staking()string']>): StakingDappComposer<[...TReturns, StakingDappReturns['unpause_staking()string'] | undefined]>

  /**
   * Calls the is_staking_paused()uint64 ABI method.
   *
   * Check if staking is paused
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  isStakingPaused(params?: CallParams<StakingDappArgs['obj']['is_staking_paused()uint64'] | StakingDappArgs['tuple']['is_staking_paused()uint64']>): StakingDappComposer<[...TReturns, StakingDappReturns['is_staking_paused()uint64'] | undefined]>

  /**
   * Calls the compound_rewards()string ABI method.
   *
   * Compound rewards by staking them
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  compoundRewards(params?: CallParams<StakingDappArgs['obj']['compound_rewards()string'] | StakingDappArgs['tuple']['compound_rewards()string']>): StakingDappComposer<[...TReturns, StakingDappReturns['compound_rewards()string'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the StakingDapp smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): StakingDappComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): StakingDappComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<StakingDappComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<StakingDappComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<StakingDappComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<StakingDappComposerResults<TReturns>>
}
export type StakingDappComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>
