/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { type AlgorandClient } from '@algorandfoundation/algokit-utils/types/algorand-client'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"name":"YieldTokenization","structs":{},"methods":[{"name":"initialize","args":[{"type":"string","name":"base_name"},{"type":"string","name":"base_symbol"}],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Initialize the yield tokenization protocol","events":[],"recommendations":{}},{"name":"create_maturity","args":[{"type":"uint64","name":"maturity_timestamp"}],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Create a new maturity date for PT/YT tokens","events":[],"recommendations":{}},{"name":"split_tokens","args":[{"type":"uint64","name":"amount"},{"type":"uint64","name":"maturity"}],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Split SY tokens into PT and YT tokens","events":[],"recommendations":{}},{"name":"redeem_tokens","args":[{"type":"uint64","name":"amount"},{"type":"uint64","name":"maturity"}],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Redeem PT tokens for SY tokens at maturity","events":[],"recommendations":{}},{"name":"get_user_balances","args":[{"type":"byte[]","name":"user"}],"returns":{"type":"(uint64,uint64,uint64)"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"desc":"Get user's SY, PT, and YT balances","events":[],"recommendations":{}},{"name":"get_maturity_count","args":[],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"desc":"Get total number of maturities","events":[],"recommendations":{}},{"name":"is_protocol_paused","args":[],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"desc":"Check if protocol is paused","events":[],"recommendations":{}},{"name":"pause_protocol","args":[],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Pause the protocol (admin only)","events":[],"recommendations":{}},{"name":"unpause_protocol","args":[],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Unpause the protocol (admin only)","events":[],"recommendations":{}},{"name":"deposit_sy_tokens","args":[{"type":"uint64","name":"amount"}],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Deposit SY tokens to user balance (for testing)","events":[],"recommendations":{}}],"arcs":[22,28],"desc":"Core yield tokenization contract for PT/YT token splitting","networks":{},"state":{"schema":{"global":{"ints":2,"bytes":4},"local":{"ints":3,"bytes":0}},"keys":{"global":{"admin":{"keyType":"AVMString","valueType":"AVMBytes","key":"YWRtaW4="},"base_name":{"keyType":"AVMString","valueType":"AVMString","key":"YmFzZV9uYW1l"},"base_symbol":{"keyType":"AVMString","valueType":"AVMString","key":"YmFzZV9zeW1ib2w="},"is_paused":{"keyType":"AVMString","valueType":"AVMUint64","key":"aXNfcGF1c2Vk"},"maturity_count":{"keyType":"AVMString","valueType":"AVMUint64","key":"bWF0dXJpdHlfY291bnQ="},"maturities":{"keyType":"AVMString","valueType":"AVMBytes","key":"bWF0dXJpdGllcw=="}},"local":{"user_sy_balance":{"keyType":"AVMString","valueType":"AVMUint64","key":"c3lfYmFsYW5jZQ=="},"user_pt_balance":{"keyType":"AVMString","valueType":"AVMUint64","key":"cHRfYmFsYW5jZQ=="},"user_yt_balance":{"keyType":"AVMString","valueType":"AVMUint64","key":"eXRfYmFsYW5jZQ=="}},"box":{}},"maps":{"global":{},"local":{},"box":{}}},"bareActions":{"create":["NoOp"],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"pc":[731,867,1064],"errorMessage":"Amount must be positive"},{"pc":[884],"errorMessage":"Insufficient PT balance"},{"pc":[748],"errorMessage":"Insufficient SY balance"},{"pc":[652],"errorMessage":"Maturity already exists"},{"pc":[639],"errorMessage":"Maturity must be in future"},{"pc":[737],"errorMessage":"Maturity not found"},{"pc":[873],"errorMessage":"Maturity not reached"},{"pc":[209,237,261,285,302,319,341,373,405,433],"errorMessage":"OnCompletion is not NoOp"},{"pc":[633],"errorMessage":"Only admin can create maturity"},{"pc":[1031],"errorMessage":"Only admin can pause"},{"pc":[1049],"errorMessage":"Only admin can unpause"},{"pc":[485],"errorMessage":"Only creator can initialize"},{"pc":[645,728,864],"errorMessage":"Protocol is paused"},{"pc":[474],"errorMessage":"can only call when creating"},{"pc":[212,240,264,288,305,322,344,376,408,436],"errorMessage":"can only call when not creating"},{"pc":[631,1029,1047],"errorMessage":"check self.admin exists"},{"pc":[643,726,862,1021],"errorMessage":"check self.is_paused exists"},{"pc":[1016,1160],"errorMessage":"check self.maturity_count exists"},{"pc":[763,879,996],"errorMessage":"check self.user_pt_balance exists for account"},{"pc":[743,899,989,1070],"errorMessage":"check self.user_sy_balance exists for account"},{"pc":[779,1004],"errorMessage":"check self.user_yt_balance exists for account"}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"},"byteCode":{"approval":"CiACAAEmCgQVH3x1CWlzX3BhdXNlZApzeV9iYWxhbmNlCnB0X2JhbGFuY2UFYWRtaW4ObWF0dXJpdHlfY291bnQKeXRfYmFsYW5jZQsgTWF0dXJpdHk6IA9Qcm90b2NvbCBwYXVzZWQRUHJvdG9jb2wgdW5wYXVzZWQxG0EBU4IKBA0LMVgE1tKPBATPCGHZBF9hj8YEjVQidwRSmeDEBP4Mr4oETMeTxgSz5rReBGVg7d02GgCOCgDiAMYApgCGAHAAXwBOADYAHgACIkMxGRREMRhENhoBF4gDR0kVFlcGAkxQKExQsCNDMRkURDEYRIgDHUkVFlcGAkxQKExQsCNDMRkURDEYRIgC80kVFlcGAkxQKExQsCNDMRkURDEYRIgC1hYoTFCwI0MxGRREMRhEiAK/FihMULAjQzEZFEQxGEQ2GgFXAgCIAokoTFCwI0MxGRREMRhENhoBFzYaAheIAfRJFRZXBgJMUChMULAjQzEZFEQxGEQ2GgEXNhoCF4gBTEkVFlcGAkxQKExQsCNDMRkURDEYRDYaAReIAM5JFRZXBgJMUChMULAjQzEZFEQxGEQ2GgFXAgA2GgJXAgCIABlJFRZXBgJMUChMULAjQzEZQP71MRgURCNDigIBMQAyCRJEJwQxAGeACWJhc2VfbmFtZYv+Z4ALYmFzZV9zeW1ib2yL/2cpImcnBSJnggIKbWF0dXJpdGllcwBnMgeBgJqeAQiIAleAHVlpZWxkVG9rZW5pemF0aW9uIGluaXRpYWxpemVksIAhUHJvdG9jb2wgaW5pdGlhbGl6ZWQgc3VjY2Vzc2Z1bGx5iYoBATEAIicEZUQSRIv/MgcNRCIpZUQURIv/iAIFFESL/4gB74v/FoAWTmV3IG1hdHVyaXR5IGNyZWF0ZWQ6IExQsIAdTWF0dXJpdHkgY3JlYXRlZCBzdWNjZXNzZnVsbHmJigIBIillRBREi/5Ei/+IAa9EMQAiKmNESYv+D0SL/gkxACpPAmYxACIrY0SL/ggxACtPAmYxACInBmNEi/4IMQAnBk8CZov+FoAXVG9rZW5zIHNwbGl0IC0gQW1vdW50OiBMUCcHUIv/FlCwgBlUb2tlbnMgc3BsaXQgc3VjY2Vzc2Z1bGx5iYoCASIpZUQURIv+RDIHi/8PRDEAIitjREmL/g9Ei/4JMQArTwJmMQAiKmNEi/4IMQAqTwJmi/4WgBpUb2tlbnMgcmVkZWVtZWQgLSBBbW91bnQ6IExQJwdQi/8WULCAHFRva2VucyByZWRlZW1lZCBzdWNjZXNzZnVsbHmJigEBMQAiKmNEFjEAIitjRBYxACInBmNEFk4CUExQiSInBWVEiSIpZUSJMQAiJwRlRBJEKSNnJwiwJwiJMQAiJwRlRBJEKSJnJwmwJwmJigEBi/9EMQAiKmNEi/8IMQAqTwJmi/8WgB5TWSB0b2tlbnMgZGVwb3NpdGVkIC0gQW1vdW50OiBMULCAIFNZIHRva2VucyBkZXBvc2l0ZWQgc3VjY2Vzc2Z1bGx5iYoBACInBWVEIwgnBUxniYoBAYv/MgcNQQAQMgeBgOeEDwiL/w9BAAIjiSKJ","clear":"CoEBQw=="},"compilerInfo":{"compiler":"puya","compilerVersion":{"major":4,"minor":10,"patch":0}},"events":[],"templateVariables":{}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


/**
 * The argument types for the YieldTokenization contract
 */
export type YieldTokenizationArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'initialize(string,string)string': {
      baseName: string
      baseSymbol: string
    }
    'create_maturity(uint64)string': {
      maturityTimestamp: bigint | number
    }
    'split_tokens(uint64,uint64)string': {
      amount: bigint | number
      maturity: bigint | number
    }
    'redeem_tokens(uint64,uint64)string': {
      amount: bigint | number
      maturity: bigint | number
    }
    'get_user_balances(byte[])(uint64,uint64,uint64)': {
      user: Uint8Array
    }
    'get_maturity_count()uint64': Record<string, never>
    'is_protocol_paused()uint64': Record<string, never>
    'pause_protocol()string': Record<string, never>
    'unpause_protocol()string': Record<string, never>
    'deposit_sy_tokens(uint64)string': {
      amount: bigint | number
    }
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'initialize(string,string)string': [baseName: string, baseSymbol: string]
    'create_maturity(uint64)string': [maturityTimestamp: bigint | number]
    'split_tokens(uint64,uint64)string': [amount: bigint | number, maturity: bigint | number]
    'redeem_tokens(uint64,uint64)string': [amount: bigint | number, maturity: bigint | number]
    'get_user_balances(byte[])(uint64,uint64,uint64)': [user: Uint8Array]
    'get_maturity_count()uint64': []
    'is_protocol_paused()uint64': []
    'pause_protocol()string': []
    'unpause_protocol()string': []
    'deposit_sy_tokens(uint64)string': [amount: bigint | number]
  }
}

/**
 * The return type for each method
 */
export type YieldTokenizationReturns = {
  'initialize(string,string)string': string
  'create_maturity(uint64)string': string
  'split_tokens(uint64,uint64)string': string
  'redeem_tokens(uint64,uint64)string': string
  'get_user_balances(byte[])(uint64,uint64,uint64)': [bigint, bigint, bigint]
  'get_maturity_count()uint64': bigint
  'is_protocol_paused()uint64': bigint
  'pause_protocol()string': string
  'unpause_protocol()string': string
  'deposit_sy_tokens(uint64)string': string
}

/**
 * Defines the types of available calls and state of the YieldTokenization smart contract.
 */
export type YieldTokenizationTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'initialize(string,string)string' | 'initialize', {
      argsObj: YieldTokenizationArgs['obj']['initialize(string,string)string']
      argsTuple: YieldTokenizationArgs['tuple']['initialize(string,string)string']
      returns: YieldTokenizationReturns['initialize(string,string)string']
    }>
    & Record<'create_maturity(uint64)string' | 'create_maturity', {
      argsObj: YieldTokenizationArgs['obj']['create_maturity(uint64)string']
      argsTuple: YieldTokenizationArgs['tuple']['create_maturity(uint64)string']
      returns: YieldTokenizationReturns['create_maturity(uint64)string']
    }>
    & Record<'split_tokens(uint64,uint64)string' | 'split_tokens', {
      argsObj: YieldTokenizationArgs['obj']['split_tokens(uint64,uint64)string']
      argsTuple: YieldTokenizationArgs['tuple']['split_tokens(uint64,uint64)string']
      returns: YieldTokenizationReturns['split_tokens(uint64,uint64)string']
    }>
    & Record<'redeem_tokens(uint64,uint64)string' | 'redeem_tokens', {
      argsObj: YieldTokenizationArgs['obj']['redeem_tokens(uint64,uint64)string']
      argsTuple: YieldTokenizationArgs['tuple']['redeem_tokens(uint64,uint64)string']
      returns: YieldTokenizationReturns['redeem_tokens(uint64,uint64)string']
    }>
    & Record<'get_user_balances(byte[])(uint64,uint64,uint64)' | 'get_user_balances', {
      argsObj: YieldTokenizationArgs['obj']['get_user_balances(byte[])(uint64,uint64,uint64)']
      argsTuple: YieldTokenizationArgs['tuple']['get_user_balances(byte[])(uint64,uint64,uint64)']
      returns: YieldTokenizationReturns['get_user_balances(byte[])(uint64,uint64,uint64)']
    }>
    & Record<'get_maturity_count()uint64' | 'get_maturity_count', {
      argsObj: YieldTokenizationArgs['obj']['get_maturity_count()uint64']
      argsTuple: YieldTokenizationArgs['tuple']['get_maturity_count()uint64']
      returns: YieldTokenizationReturns['get_maturity_count()uint64']
    }>
    & Record<'is_protocol_paused()uint64' | 'is_protocol_paused', {
      argsObj: YieldTokenizationArgs['obj']['is_protocol_paused()uint64']
      argsTuple: YieldTokenizationArgs['tuple']['is_protocol_paused()uint64']
      returns: YieldTokenizationReturns['is_protocol_paused()uint64']
    }>
    & Record<'pause_protocol()string' | 'pause_protocol', {
      argsObj: YieldTokenizationArgs['obj']['pause_protocol()string']
      argsTuple: YieldTokenizationArgs['tuple']['pause_protocol()string']
      returns: YieldTokenizationReturns['pause_protocol()string']
    }>
    & Record<'unpause_protocol()string' | 'unpause_protocol', {
      argsObj: YieldTokenizationArgs['obj']['unpause_protocol()string']
      argsTuple: YieldTokenizationArgs['tuple']['unpause_protocol()string']
      returns: YieldTokenizationReturns['unpause_protocol()string']
    }>
    & Record<'deposit_sy_tokens(uint64)string' | 'deposit_sy_tokens', {
      argsObj: YieldTokenizationArgs['obj']['deposit_sy_tokens(uint64)string']
      argsTuple: YieldTokenizationArgs['tuple']['deposit_sy_tokens(uint64)string']
      returns: YieldTokenizationReturns['deposit_sy_tokens(uint64)string']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        admin: BinaryState
        baseName: string
        baseSymbol: string
        isPaused: bigint
        maturityCount: bigint
        maturities: BinaryState
      }
      maps: {}
    }
    local: {
      keys: {
        userSyBalance: bigint
        userPtBalance: bigint
        userYtBalance: bigint
      }
      maps: {}
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type YieldTokenizationSignatures = keyof YieldTokenizationTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type YieldTokenizationNonVoidMethodSignatures = keyof YieldTokenizationTypes['methods'] extends infer T ? T extends keyof YieldTokenizationTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the YieldTokenization smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends YieldTokenizationSignatures> = YieldTokenizationTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the YieldTokenization smart contract to the method's return type
 */
export type MethodReturn<TSignature extends YieldTokenizationSignatures> = YieldTokenizationTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = YieldTokenizationTypes['state']['global']['keys']

/**
 * Defines the shape of the keyed local state of the application.
 */
export type LocalKeysState = YieldTokenizationTypes['state']['local']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type YieldTokenizationCreateCallParams =
  | Expand<AppClientBareCallParams & {method?: never} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type YieldTokenizationDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: YieldTokenizationCreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the YieldTokenization smart contract
 */
export abstract class YieldTokenizationParamsFactory {
  /**
   * Constructs a no op call for the initialize(string,string)string ABI method
   *
   * Initialize the yield tokenization protocol
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static initialize(params: CallParams<YieldTokenizationArgs['obj']['initialize(string,string)string'] | YieldTokenizationArgs['tuple']['initialize(string,string)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'initialize(string,string)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.baseName, params.args.baseSymbol],
    }
  }
  /**
   * Constructs a no op call for the create_maturity(uint64)string ABI method
   *
   * Create a new maturity date for PT/YT tokens
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static createMaturity(params: CallParams<YieldTokenizationArgs['obj']['create_maturity(uint64)string'] | YieldTokenizationArgs['tuple']['create_maturity(uint64)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'create_maturity(uint64)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.maturityTimestamp],
    }
  }
  /**
   * Constructs a no op call for the split_tokens(uint64,uint64)string ABI method
   *
   * Split SY tokens into PT and YT tokens
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static splitTokens(params: CallParams<YieldTokenizationArgs['obj']['split_tokens(uint64,uint64)string'] | YieldTokenizationArgs['tuple']['split_tokens(uint64,uint64)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'split_tokens(uint64,uint64)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.amount, params.args.maturity],
    }
  }
  /**
   * Constructs a no op call for the redeem_tokens(uint64,uint64)string ABI method
   *
   * Redeem PT tokens for SY tokens at maturity
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static redeemTokens(params: CallParams<YieldTokenizationArgs['obj']['redeem_tokens(uint64,uint64)string'] | YieldTokenizationArgs['tuple']['redeem_tokens(uint64,uint64)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'redeem_tokens(uint64,uint64)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.amount, params.args.maturity],
    }
  }
  /**
   * Constructs a no op call for the get_user_balances(byte[])(uint64,uint64,uint64) ABI method
   *
   * Get user's SY, PT, and YT balances
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getUserBalances(params: CallParams<YieldTokenizationArgs['obj']['get_user_balances(byte[])(uint64,uint64,uint64)'] | YieldTokenizationArgs['tuple']['get_user_balances(byte[])(uint64,uint64,uint64)']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'get_user_balances(byte[])(uint64,uint64,uint64)' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.user],
    }
  }
  /**
   * Constructs a no op call for the get_maturity_count()uint64 ABI method
   *
   * Get total number of maturities
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getMaturityCount(params: CallParams<YieldTokenizationArgs['obj']['get_maturity_count()uint64'] | YieldTokenizationArgs['tuple']['get_maturity_count()uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'get_maturity_count()uint64' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the is_protocol_paused()uint64 ABI method
   *
   * Check if protocol is paused
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static isProtocolPaused(params: CallParams<YieldTokenizationArgs['obj']['is_protocol_paused()uint64'] | YieldTokenizationArgs['tuple']['is_protocol_paused()uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'is_protocol_paused()uint64' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the pause_protocol()string ABI method
   *
   * Pause the protocol (admin only)
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static pauseProtocol(params: CallParams<YieldTokenizationArgs['obj']['pause_protocol()string'] | YieldTokenizationArgs['tuple']['pause_protocol()string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'pause_protocol()string' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the unpause_protocol()string ABI method
   *
   * Unpause the protocol (admin only)
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static unpauseProtocol(params: CallParams<YieldTokenizationArgs['obj']['unpause_protocol()string'] | YieldTokenizationArgs['tuple']['unpause_protocol()string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'unpause_protocol()string' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the deposit_sy_tokens(uint64)string ABI method
   *
   * Deposit SY tokens to user balance (for testing)
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static depositSyTokens(params: CallParams<YieldTokenizationArgs['obj']['deposit_sy_tokens(uint64)string'] | YieldTokenizationArgs['tuple']['deposit_sy_tokens(uint64)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'deposit_sy_tokens(uint64)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.amount],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the YieldTokenization smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class YieldTokenizationFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `YieldTokenizationFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClient {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new YieldTokenizationClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new YieldTokenizationClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the YieldTokenization smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: YieldTokenizationDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
    })
    return { result: result.result, appClient: new YieldTokenizationClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the YieldTokenization smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The params for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.params.bare.create(params)
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the YieldTokenization smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The transaction for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.createTransaction.bare.create(params)
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the YieldTokenization smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The create result
       */
      bare: async (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        const result = await this.appFactory.send.bare.create(params)
        return { result: result.result, appClient: new YieldTokenizationClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the YieldTokenization smart contract
 */
export class YieldTokenizationClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `YieldTokenizationClient`
   *
   * @param appClient An `AppClient` instance which has been created with the YieldTokenization app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `YieldTokenizationClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends YieldTokenizationNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `YieldTokenizationClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<YieldTokenizationClient> {
    return new YieldTokenizationClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `YieldTokenizationClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<YieldTokenizationClient> {
    return new YieldTokenizationClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClient {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the YieldTokenization smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the YieldTokenization smart contract using the `initialize(string,string)string` ABI method.
     *
     * Initialize the yield tokenization protocol
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    initialize: (params: CallParams<YieldTokenizationArgs['obj']['initialize(string,string)string'] | YieldTokenizationArgs['tuple']['initialize(string,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(YieldTokenizationParamsFactory.initialize(params))
    },

    /**
     * Makes a call to the YieldTokenization smart contract using the `create_maturity(uint64)string` ABI method.
     *
     * Create a new maturity date for PT/YT tokens
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    createMaturity: (params: CallParams<YieldTokenizationArgs['obj']['create_maturity(uint64)string'] | YieldTokenizationArgs['tuple']['create_maturity(uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(YieldTokenizationParamsFactory.createMaturity(params))
    },

    /**
     * Makes a call to the YieldTokenization smart contract using the `split_tokens(uint64,uint64)string` ABI method.
     *
     * Split SY tokens into PT and YT tokens
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    splitTokens: (params: CallParams<YieldTokenizationArgs['obj']['split_tokens(uint64,uint64)string'] | YieldTokenizationArgs['tuple']['split_tokens(uint64,uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(YieldTokenizationParamsFactory.splitTokens(params))
    },

    /**
     * Makes a call to the YieldTokenization smart contract using the `redeem_tokens(uint64,uint64)string` ABI method.
     *
     * Redeem PT tokens for SY tokens at maturity
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    redeemTokens: (params: CallParams<YieldTokenizationArgs['obj']['redeem_tokens(uint64,uint64)string'] | YieldTokenizationArgs['tuple']['redeem_tokens(uint64,uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(YieldTokenizationParamsFactory.redeemTokens(params))
    },

    /**
     * Makes a call to the YieldTokenization smart contract using the `get_user_balances(byte[])(uint64,uint64,uint64)` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Get user's SY, PT, and YT balances
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getUserBalances: (params: CallParams<YieldTokenizationArgs['obj']['get_user_balances(byte[])(uint64,uint64,uint64)'] | YieldTokenizationArgs['tuple']['get_user_balances(byte[])(uint64,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(YieldTokenizationParamsFactory.getUserBalances(params))
    },

    /**
     * Makes a call to the YieldTokenization smart contract using the `get_maturity_count()uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Get total number of maturities
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getMaturityCount: (params: CallParams<YieldTokenizationArgs['obj']['get_maturity_count()uint64'] | YieldTokenizationArgs['tuple']['get_maturity_count()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(YieldTokenizationParamsFactory.getMaturityCount(params))
    },

    /**
     * Makes a call to the YieldTokenization smart contract using the `is_protocol_paused()uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Check if protocol is paused
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    isProtocolPaused: (params: CallParams<YieldTokenizationArgs['obj']['is_protocol_paused()uint64'] | YieldTokenizationArgs['tuple']['is_protocol_paused()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(YieldTokenizationParamsFactory.isProtocolPaused(params))
    },

    /**
     * Makes a call to the YieldTokenization smart contract using the `pause_protocol()string` ABI method.
     *
     * Pause the protocol (admin only)
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    pauseProtocol: (params: CallParams<YieldTokenizationArgs['obj']['pause_protocol()string'] | YieldTokenizationArgs['tuple']['pause_protocol()string']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(YieldTokenizationParamsFactory.pauseProtocol(params))
    },

    /**
     * Makes a call to the YieldTokenization smart contract using the `unpause_protocol()string` ABI method.
     *
     * Unpause the protocol (admin only)
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    unpauseProtocol: (params: CallParams<YieldTokenizationArgs['obj']['unpause_protocol()string'] | YieldTokenizationArgs['tuple']['unpause_protocol()string']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(YieldTokenizationParamsFactory.unpauseProtocol(params))
    },

    /**
     * Makes a call to the YieldTokenization smart contract using the `deposit_sy_tokens(uint64)string` ABI method.
     *
     * Deposit SY tokens to user balance (for testing)
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    depositSyTokens: (params: CallParams<YieldTokenizationArgs['obj']['deposit_sy_tokens(uint64)string'] | YieldTokenizationArgs['tuple']['deposit_sy_tokens(uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(YieldTokenizationParamsFactory.depositSyTokens(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the YieldTokenization smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the YieldTokenization smart contract using the `initialize(string,string)string` ABI method.
     *
     * Initialize the yield tokenization protocol
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    initialize: (params: CallParams<YieldTokenizationArgs['obj']['initialize(string,string)string'] | YieldTokenizationArgs['tuple']['initialize(string,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(YieldTokenizationParamsFactory.initialize(params))
    },

    /**
     * Makes a call to the YieldTokenization smart contract using the `create_maturity(uint64)string` ABI method.
     *
     * Create a new maturity date for PT/YT tokens
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    createMaturity: (params: CallParams<YieldTokenizationArgs['obj']['create_maturity(uint64)string'] | YieldTokenizationArgs['tuple']['create_maturity(uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(YieldTokenizationParamsFactory.createMaturity(params))
    },

    /**
     * Makes a call to the YieldTokenization smart contract using the `split_tokens(uint64,uint64)string` ABI method.
     *
     * Split SY tokens into PT and YT tokens
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    splitTokens: (params: CallParams<YieldTokenizationArgs['obj']['split_tokens(uint64,uint64)string'] | YieldTokenizationArgs['tuple']['split_tokens(uint64,uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(YieldTokenizationParamsFactory.splitTokens(params))
    },

    /**
     * Makes a call to the YieldTokenization smart contract using the `redeem_tokens(uint64,uint64)string` ABI method.
     *
     * Redeem PT tokens for SY tokens at maturity
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    redeemTokens: (params: CallParams<YieldTokenizationArgs['obj']['redeem_tokens(uint64,uint64)string'] | YieldTokenizationArgs['tuple']['redeem_tokens(uint64,uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(YieldTokenizationParamsFactory.redeemTokens(params))
    },

    /**
     * Makes a call to the YieldTokenization smart contract using the `get_user_balances(byte[])(uint64,uint64,uint64)` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Get user's SY, PT, and YT balances
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getUserBalances: (params: CallParams<YieldTokenizationArgs['obj']['get_user_balances(byte[])(uint64,uint64,uint64)'] | YieldTokenizationArgs['tuple']['get_user_balances(byte[])(uint64,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(YieldTokenizationParamsFactory.getUserBalances(params))
    },

    /**
     * Makes a call to the YieldTokenization smart contract using the `get_maturity_count()uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Get total number of maturities
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getMaturityCount: (params: CallParams<YieldTokenizationArgs['obj']['get_maturity_count()uint64'] | YieldTokenizationArgs['tuple']['get_maturity_count()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(YieldTokenizationParamsFactory.getMaturityCount(params))
    },

    /**
     * Makes a call to the YieldTokenization smart contract using the `is_protocol_paused()uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Check if protocol is paused
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    isProtocolPaused: (params: CallParams<YieldTokenizationArgs['obj']['is_protocol_paused()uint64'] | YieldTokenizationArgs['tuple']['is_protocol_paused()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(YieldTokenizationParamsFactory.isProtocolPaused(params))
    },

    /**
     * Makes a call to the YieldTokenization smart contract using the `pause_protocol()string` ABI method.
     *
     * Pause the protocol (admin only)
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    pauseProtocol: (params: CallParams<YieldTokenizationArgs['obj']['pause_protocol()string'] | YieldTokenizationArgs['tuple']['pause_protocol()string']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(YieldTokenizationParamsFactory.pauseProtocol(params))
    },

    /**
     * Makes a call to the YieldTokenization smart contract using the `unpause_protocol()string` ABI method.
     *
     * Unpause the protocol (admin only)
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    unpauseProtocol: (params: CallParams<YieldTokenizationArgs['obj']['unpause_protocol()string'] | YieldTokenizationArgs['tuple']['unpause_protocol()string']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(YieldTokenizationParamsFactory.unpauseProtocol(params))
    },

    /**
     * Makes a call to the YieldTokenization smart contract using the `deposit_sy_tokens(uint64)string` ABI method.
     *
     * Deposit SY tokens to user balance (for testing)
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    depositSyTokens: (params: CallParams<YieldTokenizationArgs['obj']['deposit_sy_tokens(uint64)string'] | YieldTokenizationArgs['tuple']['deposit_sy_tokens(uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(YieldTokenizationParamsFactory.depositSyTokens(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the YieldTokenization smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the YieldTokenization smart contract using the `initialize(string,string)string` ABI method.
     *
     * Initialize the yield tokenization protocol
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    initialize: async (params: CallParams<YieldTokenizationArgs['obj']['initialize(string,string)string'] | YieldTokenizationArgs['tuple']['initialize(string,string)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(YieldTokenizationParamsFactory.initialize(params))
      return {...result, return: result.return as unknown as (undefined | YieldTokenizationReturns['initialize(string,string)string'])}
    },

    /**
     * Makes a call to the YieldTokenization smart contract using the `create_maturity(uint64)string` ABI method.
     *
     * Create a new maturity date for PT/YT tokens
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    createMaturity: async (params: CallParams<YieldTokenizationArgs['obj']['create_maturity(uint64)string'] | YieldTokenizationArgs['tuple']['create_maturity(uint64)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(YieldTokenizationParamsFactory.createMaturity(params))
      return {...result, return: result.return as unknown as (undefined | YieldTokenizationReturns['create_maturity(uint64)string'])}
    },

    /**
     * Makes a call to the YieldTokenization smart contract using the `split_tokens(uint64,uint64)string` ABI method.
     *
     * Split SY tokens into PT and YT tokens
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    splitTokens: async (params: CallParams<YieldTokenizationArgs['obj']['split_tokens(uint64,uint64)string'] | YieldTokenizationArgs['tuple']['split_tokens(uint64,uint64)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(YieldTokenizationParamsFactory.splitTokens(params))
      return {...result, return: result.return as unknown as (undefined | YieldTokenizationReturns['split_tokens(uint64,uint64)string'])}
    },

    /**
     * Makes a call to the YieldTokenization smart contract using the `redeem_tokens(uint64,uint64)string` ABI method.
     *
     * Redeem PT tokens for SY tokens at maturity
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    redeemTokens: async (params: CallParams<YieldTokenizationArgs['obj']['redeem_tokens(uint64,uint64)string'] | YieldTokenizationArgs['tuple']['redeem_tokens(uint64,uint64)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(YieldTokenizationParamsFactory.redeemTokens(params))
      return {...result, return: result.return as unknown as (undefined | YieldTokenizationReturns['redeem_tokens(uint64,uint64)string'])}
    },

    /**
     * Makes a call to the YieldTokenization smart contract using the `get_user_balances(byte[])(uint64,uint64,uint64)` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Get user's SY, PT, and YT balances
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getUserBalances: async (params: CallParams<YieldTokenizationArgs['obj']['get_user_balances(byte[])(uint64,uint64,uint64)'] | YieldTokenizationArgs['tuple']['get_user_balances(byte[])(uint64,uint64,uint64)']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(YieldTokenizationParamsFactory.getUserBalances(params))
      return {...result, return: result.return as unknown as (undefined | YieldTokenizationReturns['get_user_balances(byte[])(uint64,uint64,uint64)'])}
    },

    /**
     * Makes a call to the YieldTokenization smart contract using the `get_maturity_count()uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Get total number of maturities
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getMaturityCount: async (params: CallParams<YieldTokenizationArgs['obj']['get_maturity_count()uint64'] | YieldTokenizationArgs['tuple']['get_maturity_count()uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(YieldTokenizationParamsFactory.getMaturityCount(params))
      return {...result, return: result.return as unknown as (undefined | YieldTokenizationReturns['get_maturity_count()uint64'])}
    },

    /**
     * Makes a call to the YieldTokenization smart contract using the `is_protocol_paused()uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Check if protocol is paused
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    isProtocolPaused: async (params: CallParams<YieldTokenizationArgs['obj']['is_protocol_paused()uint64'] | YieldTokenizationArgs['tuple']['is_protocol_paused()uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(YieldTokenizationParamsFactory.isProtocolPaused(params))
      return {...result, return: result.return as unknown as (undefined | YieldTokenizationReturns['is_protocol_paused()uint64'])}
    },

    /**
     * Makes a call to the YieldTokenization smart contract using the `pause_protocol()string` ABI method.
     *
     * Pause the protocol (admin only)
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    pauseProtocol: async (params: CallParams<YieldTokenizationArgs['obj']['pause_protocol()string'] | YieldTokenizationArgs['tuple']['pause_protocol()string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(YieldTokenizationParamsFactory.pauseProtocol(params))
      return {...result, return: result.return as unknown as (undefined | YieldTokenizationReturns['pause_protocol()string'])}
    },

    /**
     * Makes a call to the YieldTokenization smart contract using the `unpause_protocol()string` ABI method.
     *
     * Unpause the protocol (admin only)
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    unpauseProtocol: async (params: CallParams<YieldTokenizationArgs['obj']['unpause_protocol()string'] | YieldTokenizationArgs['tuple']['unpause_protocol()string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(YieldTokenizationParamsFactory.unpauseProtocol(params))
      return {...result, return: result.return as unknown as (undefined | YieldTokenizationReturns['unpause_protocol()string'])}
    },

    /**
     * Makes a call to the YieldTokenization smart contract using the `deposit_sy_tokens(uint64)string` ABI method.
     *
     * Deposit SY tokens to user balance (for testing)
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    depositSyTokens: async (params: CallParams<YieldTokenizationArgs['obj']['deposit_sy_tokens(uint64)string'] | YieldTokenizationArgs['tuple']['deposit_sy_tokens(uint64)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(YieldTokenizationParamsFactory.depositSyTokens(params))
      return {...result, return: result.return as unknown as (undefined | YieldTokenizationReturns['deposit_sy_tokens(uint64)string'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new YieldTokenizationClient(this.appClient.clone(params))
  }

  /**
   * Makes a readonly (simulated) call to the YieldTokenization smart contract using the `get_user_balances(byte[])(uint64,uint64,uint64)` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * Get user's SY, PT, and YT balances
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async getUserBalances(params: CallParams<YieldTokenizationArgs['obj']['get_user_balances(byte[])(uint64,uint64,uint64)'] | YieldTokenizationArgs['tuple']['get_user_balances(byte[])(uint64,uint64,uint64)']>) {
    const result = await this.appClient.send.call(YieldTokenizationParamsFactory.getUserBalances(params))
    return result.return as unknown as YieldTokenizationReturns['get_user_balances(byte[])(uint64,uint64,uint64)']
  }

  /**
   * Makes a readonly (simulated) call to the YieldTokenization smart contract using the `get_maturity_count()uint64` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * Get total number of maturities
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async getMaturityCount(params: CallParams<YieldTokenizationArgs['obj']['get_maturity_count()uint64'] | YieldTokenizationArgs['tuple']['get_maturity_count()uint64']> = {args: []}) {
    const result = await this.appClient.send.call(YieldTokenizationParamsFactory.getMaturityCount(params))
    return result.return as unknown as YieldTokenizationReturns['get_maturity_count()uint64']
  }

  /**
   * Makes a readonly (simulated) call to the YieldTokenization smart contract using the `is_protocol_paused()uint64` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * Check if protocol is paused
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async isProtocolPaused(params: CallParams<YieldTokenizationArgs['obj']['is_protocol_paused()uint64'] | YieldTokenizationArgs['tuple']['is_protocol_paused()uint64']> = {args: []}) {
    const result = await this.appClient.send.call(YieldTokenizationParamsFactory.isProtocolPaused(params))
    return result.return as unknown as YieldTokenizationReturns['is_protocol_paused()uint64']
  }

  /**
   * Methods to access state for the current YieldTokenization app
   */
  state = {
    /**
     * Methods to access global state for the current YieldTokenization app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          admin: new BinaryStateValue(result.admin),
          baseName: result.base_name,
          baseSymbol: result.base_symbol,
          isPaused: result.is_paused,
          maturityCount: result.maturity_count,
          maturities: new BinaryStateValue(result.maturities),
        }
      },
      /**
       * Get the current value of the admin key in global state
       */
      admin: async (): Promise<BinaryState> => { return new BinaryStateValue((await this.appClient.state.global.getValue("admin")) as Uint8Array | undefined) },
      /**
       * Get the current value of the base_name key in global state
       */
      baseName: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("base_name")) as string | undefined },
      /**
       * Get the current value of the base_symbol key in global state
       */
      baseSymbol: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("base_symbol")) as string | undefined },
      /**
       * Get the current value of the is_paused key in global state
       */
      isPaused: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("is_paused")) as bigint | undefined },
      /**
       * Get the current value of the maturity_count key in global state
       */
      maturityCount: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("maturity_count")) as bigint | undefined },
      /**
       * Get the current value of the maturities key in global state
       */
      maturities: async (): Promise<BinaryState> => { return new BinaryStateValue((await this.appClient.state.global.getValue("maturities")) as Uint8Array | undefined) },
    },
    /**
     * Methods to access local state for the current YieldTokenization app
     */
    local: (address: string | Address) => {
      const encodedAddress = typeof address === 'string' ? address : encodeAddress(address.publicKey)
      return {
        /**
         * Get all current keyed values from local state
         */
        getAll: async (): Promise<Partial<Expand<LocalKeysState>>> => {
          const result = await this.appClient.state.local(encodedAddress).getAll()
          return {
            userSyBalance: result.user_sy_balance,
            userPtBalance: result.user_pt_balance,
            userYtBalance: result.user_yt_balance,
          }
        },
        /**
         * Get the current value of the user_sy_balance key in local state
         */
        userSyBalance: async (): Promise<bigint | undefined> => { return (await this.appClient.state.local(encodedAddress).getValue("user_sy_balance")) as bigint | undefined },
        /**
         * Get the current value of the user_pt_balance key in local state
         */
        userPtBalance: async (): Promise<bigint | undefined> => { return (await this.appClient.state.local(encodedAddress).getValue("user_pt_balance")) as bigint | undefined },
        /**
         * Get the current value of the user_yt_balance key in local state
         */
        userYtBalance: async (): Promise<bigint | undefined> => { return (await this.appClient.state.local(encodedAddress).getValue("user_yt_balance")) as bigint | undefined },
      }
    },
  }

  public newGroup(): YieldTokenizationComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a initialize(string,string)string method call against the YieldTokenization contract
       */
      initialize(params: CallParams<YieldTokenizationArgs['obj']['initialize(string,string)string'] | YieldTokenizationArgs['tuple']['initialize(string,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.initialize(params)))
        resultMappers.push((v) => client.decodeReturnValue('initialize(string,string)string', v))
        return this
      },
      /**
       * Add a create_maturity(uint64)string method call against the YieldTokenization contract
       */
      createMaturity(params: CallParams<YieldTokenizationArgs['obj']['create_maturity(uint64)string'] | YieldTokenizationArgs['tuple']['create_maturity(uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.createMaturity(params)))
        resultMappers.push((v) => client.decodeReturnValue('create_maturity(uint64)string', v))
        return this
      },
      /**
       * Add a split_tokens(uint64,uint64)string method call against the YieldTokenization contract
       */
      splitTokens(params: CallParams<YieldTokenizationArgs['obj']['split_tokens(uint64,uint64)string'] | YieldTokenizationArgs['tuple']['split_tokens(uint64,uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.splitTokens(params)))
        resultMappers.push((v) => client.decodeReturnValue('split_tokens(uint64,uint64)string', v))
        return this
      },
      /**
       * Add a redeem_tokens(uint64,uint64)string method call against the YieldTokenization contract
       */
      redeemTokens(params: CallParams<YieldTokenizationArgs['obj']['redeem_tokens(uint64,uint64)string'] | YieldTokenizationArgs['tuple']['redeem_tokens(uint64,uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.redeemTokens(params)))
        resultMappers.push((v) => client.decodeReturnValue('redeem_tokens(uint64,uint64)string', v))
        return this
      },
      /**
       * Add a get_user_balances(byte[])(uint64,uint64,uint64) method call against the YieldTokenization contract
       */
      getUserBalances(params: CallParams<YieldTokenizationArgs['obj']['get_user_balances(byte[])(uint64,uint64,uint64)'] | YieldTokenizationArgs['tuple']['get_user_balances(byte[])(uint64,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getUserBalances(params)))
        resultMappers.push((v) => client.decodeReturnValue('get_user_balances(byte[])(uint64,uint64,uint64)', v))
        return this
      },
      /**
       * Add a get_maturity_count()uint64 method call against the YieldTokenization contract
       */
      getMaturityCount(params: CallParams<YieldTokenizationArgs['obj']['get_maturity_count()uint64'] | YieldTokenizationArgs['tuple']['get_maturity_count()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getMaturityCount(params)))
        resultMappers.push((v) => client.decodeReturnValue('get_maturity_count()uint64', v))
        return this
      },
      /**
       * Add a is_protocol_paused()uint64 method call against the YieldTokenization contract
       */
      isProtocolPaused(params: CallParams<YieldTokenizationArgs['obj']['is_protocol_paused()uint64'] | YieldTokenizationArgs['tuple']['is_protocol_paused()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.isProtocolPaused(params)))
        resultMappers.push((v) => client.decodeReturnValue('is_protocol_paused()uint64', v))
        return this
      },
      /**
       * Add a pause_protocol()string method call against the YieldTokenization contract
       */
      pauseProtocol(params: CallParams<YieldTokenizationArgs['obj']['pause_protocol()string'] | YieldTokenizationArgs['tuple']['pause_protocol()string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.pauseProtocol(params)))
        resultMappers.push((v) => client.decodeReturnValue('pause_protocol()string', v))
        return this
      },
      /**
       * Add a unpause_protocol()string method call against the YieldTokenization contract
       */
      unpauseProtocol(params: CallParams<YieldTokenizationArgs['obj']['unpause_protocol()string'] | YieldTokenizationArgs['tuple']['unpause_protocol()string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.unpauseProtocol(params)))
        resultMappers.push((v) => client.decodeReturnValue('unpause_protocol()string', v))
        return this
      },
      /**
       * Add a deposit_sy_tokens(uint64)string method call against the YieldTokenization contract
       */
      depositSyTokens(params: CallParams<YieldTokenizationArgs['obj']['deposit_sy_tokens(uint64)string'] | YieldTokenizationArgs['tuple']['deposit_sy_tokens(uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.depositSyTokens(params)))
        resultMappers.push((v) => client.decodeReturnValue('deposit_sy_tokens(uint64)string', v))
        return this
      },
      /**
       * Add a clear state call to the YieldTokenization contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as YieldTokenizationComposer
  }
}
export type YieldTokenizationComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the initialize(string,string)string ABI method.
   *
   * Initialize the yield tokenization protocol
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  initialize(params?: CallParams<YieldTokenizationArgs['obj']['initialize(string,string)string'] | YieldTokenizationArgs['tuple']['initialize(string,string)string']>): YieldTokenizationComposer<[...TReturns, YieldTokenizationReturns['initialize(string,string)string'] | undefined]>

  /**
   * Calls the create_maturity(uint64)string ABI method.
   *
   * Create a new maturity date for PT/YT tokens
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  createMaturity(params?: CallParams<YieldTokenizationArgs['obj']['create_maturity(uint64)string'] | YieldTokenizationArgs['tuple']['create_maturity(uint64)string']>): YieldTokenizationComposer<[...TReturns, YieldTokenizationReturns['create_maturity(uint64)string'] | undefined]>

  /**
   * Calls the split_tokens(uint64,uint64)string ABI method.
   *
   * Split SY tokens into PT and YT tokens
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  splitTokens(params?: CallParams<YieldTokenizationArgs['obj']['split_tokens(uint64,uint64)string'] | YieldTokenizationArgs['tuple']['split_tokens(uint64,uint64)string']>): YieldTokenizationComposer<[...TReturns, YieldTokenizationReturns['split_tokens(uint64,uint64)string'] | undefined]>

  /**
   * Calls the redeem_tokens(uint64,uint64)string ABI method.
   *
   * Redeem PT tokens for SY tokens at maturity
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  redeemTokens(params?: CallParams<YieldTokenizationArgs['obj']['redeem_tokens(uint64,uint64)string'] | YieldTokenizationArgs['tuple']['redeem_tokens(uint64,uint64)string']>): YieldTokenizationComposer<[...TReturns, YieldTokenizationReturns['redeem_tokens(uint64,uint64)string'] | undefined]>

  /**
   * Calls the get_user_balances(byte[])(uint64,uint64,uint64) ABI method.
   *
   * Get user's SY, PT, and YT balances
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getUserBalances(params?: CallParams<YieldTokenizationArgs['obj']['get_user_balances(byte[])(uint64,uint64,uint64)'] | YieldTokenizationArgs['tuple']['get_user_balances(byte[])(uint64,uint64,uint64)']>): YieldTokenizationComposer<[...TReturns, YieldTokenizationReturns['get_user_balances(byte[])(uint64,uint64,uint64)'] | undefined]>

  /**
   * Calls the get_maturity_count()uint64 ABI method.
   *
   * Get total number of maturities
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getMaturityCount(params?: CallParams<YieldTokenizationArgs['obj']['get_maturity_count()uint64'] | YieldTokenizationArgs['tuple']['get_maturity_count()uint64']>): YieldTokenizationComposer<[...TReturns, YieldTokenizationReturns['get_maturity_count()uint64'] | undefined]>

  /**
   * Calls the is_protocol_paused()uint64 ABI method.
   *
   * Check if protocol is paused
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  isProtocolPaused(params?: CallParams<YieldTokenizationArgs['obj']['is_protocol_paused()uint64'] | YieldTokenizationArgs['tuple']['is_protocol_paused()uint64']>): YieldTokenizationComposer<[...TReturns, YieldTokenizationReturns['is_protocol_paused()uint64'] | undefined]>

  /**
   * Calls the pause_protocol()string ABI method.
   *
   * Pause the protocol (admin only)
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  pauseProtocol(params?: CallParams<YieldTokenizationArgs['obj']['pause_protocol()string'] | YieldTokenizationArgs['tuple']['pause_protocol()string']>): YieldTokenizationComposer<[...TReturns, YieldTokenizationReturns['pause_protocol()string'] | undefined]>

  /**
   * Calls the unpause_protocol()string ABI method.
   *
   * Unpause the protocol (admin only)
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  unpauseProtocol(params?: CallParams<YieldTokenizationArgs['obj']['unpause_protocol()string'] | YieldTokenizationArgs['tuple']['unpause_protocol()string']>): YieldTokenizationComposer<[...TReturns, YieldTokenizationReturns['unpause_protocol()string'] | undefined]>

  /**
   * Calls the deposit_sy_tokens(uint64)string ABI method.
   *
   * Deposit SY tokens to user balance (for testing)
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  depositSyTokens(params?: CallParams<YieldTokenizationArgs['obj']['deposit_sy_tokens(uint64)string'] | YieldTokenizationArgs['tuple']['deposit_sy_tokens(uint64)string']>): YieldTokenizationComposer<[...TReturns, YieldTokenizationReturns['deposit_sy_tokens(uint64)string'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the YieldTokenization smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): YieldTokenizationComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): YieldTokenizationComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<YieldTokenizationComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<YieldTokenizationComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<YieldTokenizationComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<YieldTokenizationComposerResults<TReturns>>
}
export type YieldTokenizationComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>
