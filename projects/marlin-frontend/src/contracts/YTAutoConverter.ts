/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { type AlgorandClient } from '@algorandfoundation/algokit-utils/types/algorand-client'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"name":"YTAutoConverter","structs":{},"methods":[{"name":"initialize","args":[{"type":"byte[]","name":"oracle_address"},{"type":"byte[]","name":"tokenization_address"},{"type":"byte[]","name":"amm_address"}],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Initialize the auto converter","events":[],"recommendations":{}},{"name":"configure_conversion","args":[{"type":"uint64","name":"enabled"},{"type":"uint64","name":"threshold_price"},{"type":"uint64","name":"maturity"}],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Configure automatic conversion for user","events":[],"recommendations":{}},{"name":"deposit_yt_tokens","args":[{"type":"uint64","name":"amount"}],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Deposit YT tokens for conversion (for testing)","events":[],"recommendations":{}},{"name":"execute_conversion","args":[{"type":"byte[]","name":"user"},{"type":"uint64","name":"min_pt_amount"},{"type":"uint64","name":"deadline"}],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Execute YT to PT conversion","events":[],"recommendations":{}},{"name":"can_execute_conversion","args":[{"type":"byte[]","name":"user"}],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"desc":"Check if conversion can be executed for user","events":[],"recommendations":{}},{"name":"get_user_config","args":[],"returns":{"type":"(uint64,uint64,uint64,uint64)"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"desc":"Get user's conversion configuration","events":[],"recommendations":{}},{"name":"get_user_balances","args":[],"returns":{"type":"(uint64,uint64)"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"desc":"Get user's YT and PT balances","events":[],"recommendations":{}},{"name":"get_conversion_info","args":[],"returns":{"type":"(uint64,uint64,uint64)"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"desc":"Get conversion information","events":[],"recommendations":{}},{"name":"calculate_conversion_output","args":[{"type":"uint64","name":"yt_amount"}],"returns":{"type":"(uint64,uint64)"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"desc":"Calculate expected PT output for YT input","events":[],"recommendations":{}},{"name":"add_maturity","args":[{"type":"uint64","name":"maturity"}],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Add a maturity for conversion","events":[],"recommendations":{}},{"name":"remove_maturity","args":[],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Remove user's maturity","events":[],"recommendations":{}},{"name":"set_conversion_fee","args":[{"type":"uint64","name":"new_fee"}],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Set conversion fee (admin only)","events":[],"recommendations":{}},{"name":"pause_converter","args":[],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Pause the converter (admin only)","events":[],"recommendations":{}},{"name":"unpause_converter","args":[],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Unpause the converter (admin only)","events":[],"recommendations":{}},{"name":"emergency_disable_conversion","args":[],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Emergency disable conversion for user","events":[],"recommendations":{}},{"name":"withdraw_pt_tokens","args":[{"type":"uint64","name":"amount"}],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Withdraw PT tokens","events":[],"recommendations":{}},{"name":"get_ai_recommendation","args":[{"type":"uint64","name":"yt_amount"},{"type":"uint64","name":"current_price"}],"returns":{"type":"(uint64,string)"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"desc":"Get AI recommendation for conversion (simplified)","events":[],"recommendations":{}},{"name":"update_addresses","args":[{"type":"byte[]","name":"oracle_address"},{"type":"byte[]","name":"tokenization_address"},{"type":"byte[]","name":"amm_address"}],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Update contract addresses (admin only)","events":[],"recommendations":{}}],"arcs":[22,28],"desc":"AI-powered YT to PT auto converter","networks":{},"state":{"schema":{"global":{"ints":5,"bytes":4},"local":{"ints":6,"bytes":0}},"keys":{"global":{"admin":{"keyType":"AVMString","valueType":"AVMBytes","key":"YWRtaW4="},"oracle_address":{"keyType":"AVMString","valueType":"AVMBytes","key":"b3JhY2xlX2FkZHJlc3M="},"tokenization_address":{"keyType":"AVMString","valueType":"AVMBytes","key":"dG9rZW5pemF0aW9uX2FkZHJlc3M="},"amm_address":{"keyType":"AVMString","valueType":"AVMBytes","key":"YW1tX2FkZHJlc3M="},"conversion_fee":{"keyType":"AVMString","valueType":"AVMUint64","key":"Y29udmVyc2lvbl9mZWU="},"is_paused":{"keyType":"AVMString","valueType":"AVMUint64","key":"aXNfcGF1c2Vk"},"total_conversions":{"keyType":"AVMString","valueType":"AVMUint64","key":"dG90YWxfY29udmVyc2lvbnM="},"max_slippage":{"keyType":"AVMString","valueType":"AVMUint64","key":"bWF4X3NsaXBwYWdl"},"fee_denominator":{"keyType":"AVMString","valueType":"AVMUint64","key":"ZmVlX2Rlbm9taW5hdG9y"}},"local":{"conversion_enabled":{"keyType":"AVMString","valueType":"AVMUint64","key":"Y29udmVyc2lvbl9lbmFibGVk"},"threshold_price":{"keyType":"AVMString","valueType":"AVMUint64","key":"dGhyZXNob2xkX3ByaWNl"},"user_maturity":{"keyType":"AVMString","valueType":"AVMUint64","key":"dXNlcl9tYXR1cml0eQ=="},"conversion_executed":{"keyType":"AVMString","valueType":"AVMUint64","key":"Y29udmVyc2lvbl9leGVjdXRlZA=="},"yt_balance":{"keyType":"AVMString","valueType":"AVMUint64","key":"eXRfYmFsYW5jZQ=="},"pt_balance":{"keyType":"AVMString","valueType":"AVMUint64","key":"cHRfYmFsYW5jZQ=="}},"box":{}},"maps":{"global":{},"local":{},"box":{}}},"bareActions":{"create":["NoOp"],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"pc":[1166,2009],"errorMessage":"Amount must be positive"},{"pc":[1289],"errorMessage":"Conversion already executed"},{"pc":[1280],"errorMessage":"Conversion not enabled"},{"pc":[1264],"errorMessage":"Converter is paused"},{"pc":[1798],"errorMessage":"Fee too high (max 10%)"},{"pc":[2021],"errorMessage":"Insufficient PT balance"},{"pc":[1333],"errorMessage":"Insufficient output amount"},{"pc":[1036,1654],"errorMessage":"Maturity must be in future"},{"pc":[1305],"errorMessage":"No YT tokens to convert"},{"pc":[424,466,490,518,542,566,590,618,642,670,690,706,722,738,761,799,827,863],"errorMessage":"OnCompletion is not NoOp"},{"pc":[1901],"errorMessage":"Only admin can pause"},{"pc":[1791],"errorMessage":"Only admin can set fee"},{"pc":[1919],"errorMessage":"Only admin can unpause"},{"pc":[2367],"errorMessage":"Only admin can update addresses"},{"pc":[921],"errorMessage":"Only creator can initialize"},{"pc":[1297],"errorMessage":"Threshold not reached"},{"pc":[1030],"errorMessage":"Threshold price must be positive"},{"pc":[1270],"errorMessage":"Transaction expired"},{"pc":[910],"errorMessage":"can only call when creating"},{"pc":[427,469,493,521,545,569,593,621,645,673,693,709,725,741,764,802,830,866],"errorMessage":"can only call when not creating"},{"pc":[1789,1899,1917,2365],"errorMessage":"check self.admin exists"},{"pc":[1277,1461,1512],"errorMessage":"check self.conversion_enabled exists for account"},{"pc":[1287,1473,1536],"errorMessage":"check self.conversion_executed exists for account"},{"pc":[1309,1569,1619,1802],"errorMessage":"check self.conversion_fee exists"},{"pc":[1317,1627],"errorMessage":"check self.fee_denominator exists"},{"pc":[1262,1581],"errorMessage":"check self.is_paused exists"},{"pc":[1345,1562,2016],"errorMessage":"check self.pt_balance exists for account"},{"pc":[1296,1498,1520,2166],"errorMessage":"check self.threshold_price exists for account"},{"pc":[1366,1575],"errorMessage":"check self.total_conversions exists"},{"pc":[1528],"errorMessage":"check self.user_maturity exists for account"},{"pc":[1172,1303,1486,1554],"errorMessage":"check self.yt_balance exists for account"}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"},"byteCode":{"approval":"CiADAAGQTiYRBBUffHUOY29udmVyc2lvbl9mZWUKeXRfYmFsYW5jZQVhZG1pbglpc19wYXVzZWQSY29udmVyc2lvbl9lbmFibGVkD3RocmVzaG9sZF9wcmljZRNjb252ZXJzaW9uX2V4ZWN1dGVkCnB0X2JhbGFuY2URdG90YWxfY29udmVyc2lvbnMNdXNlcl9tYXR1cml0eQ9mZWVfZGVub21pbmF0b3IOb3JhY2xlX2FkZHJlc3MUdG9rZW5pemF0aW9uX2FkZHJlc3MLYW1tX2FkZHJlc3MQQ29udmVydGVyIHBhdXNlZBJDb252ZXJ0ZXIgdW5wYXVzZWQxGEAAFoAMbWF4X3NsaXBwYWdlgfQDZycLJGcxG0ECaIISBGpp310Ea5qvNAQ56IxZBGrXwwIEplfi+QRmdtlRBP5O39kEa9FCjARU++w1BFmRowEExzDSLAQa8DcABEUmVLQE0yggQwQRY47CBMAgXa0Eaf8BUARxYTUPNhoAjhIBuQGVAXkBUwE8ASwBHAEMAPgA3ADEAKgAkAB4AGAARAAsAAIiQzEZFEQxGEQ2GgFXAgA2GgJXAgA2GgNXAgCIB3RJFRZXBgJMUChMULAjQzEZFEQxGEQ2GgEXNhoCF4gGWChMULAjQzEZFEQxGEQ2GgEXiAXfSRUWVwYCTFAoTFCwI0MxGRREMRhEiAV9SRUWVwYCTFAoTFCwI0MxGRREMRhEiAVTSRUWVwYCTFAoTFCwI0MxGRREMRhEiAUpSRUWVwYCTFAoTFCwI0MxGRREMRhENhoBF4gEnEkVFlcGAkxQKExQsCNDMRkURDEYRIgES0kVFlcGAkxQKExQsCNDMRkURDEYRDYaAReIA+FJFRZXBgJMUChMULAjQzEZFEQxGEQ2GgEXiAOMKExQsCNDMRkURDEYRIgDZShMULAjQzEZFEQxGESIA0QoTFCwI0MxGRREMRhEiAMJKExQsCNDMRkURDEYRDYaAVcCAIgCvRYoTFCwI0MxGRREMRhENhoBVwIANhoCFzYaAxeIAdlJFRZXBgJMUChMULAjQzEZFEQxGEQ2GgEXiAFfSRUWVwYCTFAoTFCwI0MxGRREMRhENhoBFzYaAhc2GgMXiACzSRUWVwYCTFAoTFCwI0MxGRREMRhENhoBVwIANhoCVwIANhoDVwIAiAAZSRUWVwYCTFAoTFCwI0MxGUD+GDEYFEQjQ4oDATEAMgkSRCsxAGcnDIv9ZycNi/5nJw6L/2cpgR5nJwQiZycJImeAG1lUQXV0b0NvbnZlcnRlciBpbml0aWFsaXplZLCAJ0F1dG8gY29udmVydGVyIGluaXRpYWxpemVkIHN1Y2Nlc3NmdWxseYmKAwGL/kSL/zIHDUQxACcFi/1mMQAnBov+ZjEAJwqL/2YxACcHImaL/RaAIUNvbnZlcnNpb24gY29uZmlndXJlZCAtIEVuYWJsZWQ6IExQgAwgVGhyZXNob2xkOiBQi/4WULCAIkNvbnZlcnNpb24gY29uZmlndXJlZCBzdWNjZXNzZnVsbHmJigEBi/9EMQAiKmNEi/8IMQAqTwJmi/8WgB5ZVCB0b2tlbnMgZGVwb3NpdGVkIC0gQW1vdW50OiBMULCAIFlUIHRva2VucyBkZXBvc2l0ZWQgc3VjY2Vzc2Z1bGx5iYoDASInBGVEFEQyB4v/DkQxACInBWNEIxJEMQAiJwdjRBREMQAiJwZjREQxACIqY0RJRCIpZURLAQsiJwtlRApLAUwJgd5NCyQKSYv+D0QxACoiZjEAIicIY0RLAQgxACcITwJmMQAnByNmIicJZUQjCCcJTGdMFoAaQ29udmVyc2lvbiBleGVjdXRlZCAtIFlUOiBMUIAFIFBUOiBQTBZQsIAgQ29udmVyc2lvbiBleGVjdXRlZCBzdWNjZXNzZnVsbHmJigEBMQAiJwVjREAAAiKJMQAiJwdjRCMSQQACIokxACIqY0RAAAIiiTEAIicGY0RAAAIiiSOJMQAiJwVjRBYxACInBmNEFjEAIicKY0QWMQAiJwdjRBZPA08DUE8CUExQiTEAIipjRBYxACInCGNEFlCJIillRBYiJwllRBYiJwRlRBZOAlBMUImKAQGL/0AAE4AQAAAAAAAAAAAAAAAAAAAAAIkiKWVEi/8LIicLZUQKi/9LAQlJgTILJAoJFkwWUImKAQGL/zIHDUQxACcKi/9mi/8WgBhNYXR1cml0eSBhZGRlZCAtIFZhbHVlOiBMULCAG01hdHVyaXR5IGFkZGVkIHN1Y2Nlc3NmdWxseYkxACcKImaAEE1hdHVyaXR5IHJlbW92ZWSwgB1NYXR1cml0eSByZW1vdmVkIHN1Y2Nlc3NmdWxseYmKAQExACIrZUQSRIv/gegHDkQiKWVEKYv/ZxaAHkNvbnZlcnNpb24gZmVlIHVwZGF0ZWQgLSBPbGQ6IExQgAYgTmV3OiBQi/8WULCAI0NvbnZlcnNpb24gZmVlIHVwZGF0ZWQgc3VjY2Vzc2Z1bGx5iTEAIitlRBJEJwQjZycPsCcPiTEAIitlRBJEJwQiZycQsCcQiTEAJwUiZoAdQ29udmVyc2lvbiBlbWVyZ2VuY3kgZGlzYWJsZWSwgCFDb252ZXJzaW9uIGRpc2FibGVkIGZvciBlbWVyZ2VuY3mJigEBi/9EMQAiJwhjREmL/w9Ei/8JMQAnCE8CZov/FoAeUFQgdG9rZW5zIHdpdGhkcmF3biAtIEFtb3VudDogTFCwgCBQVCB0b2tlbnMgd2l0aGRyYXduIHN1Y2Nlc3NmdWxseYmKAgGAAIv+QAAngCMAAAAAAAAAAAAKABdObyBZVCB0b2tlbnMgdG8gY29udmVydEyJMQAiJwZjTElOAowARIv/DkEAOIA0AAAAAAAAAAEACgAoUmVjb21tZW5kIGNvbnZlcnNpb24gLSB0aHJlc2hvbGQgcmVhY2hlZEyJiwCL/wmBZAuL/wqBBQxBADmANQAAAAAAAAABAAoAKVJlY29tbWVuZCBjb252ZXJzaW9uIC0gY2xvc2UgdG8gdGhyZXNob2xkTImAMgAAAAAAAAAAAAoAJkhvbGQgWVQgdG9rZW5zIC0gdGhyZXNob2xkIG5vdCByZWFjaGVkTImKAwExACIrZUQSRCcMi/1nJw2L/mcnDov/Z4AaQ29udHJhY3QgYWRkcmVzc2VzIHVwZGF0ZWSwgCdDb250cmFjdCBhZGRyZXNzZXMgdXBkYXRlZCBzdWNjZXNzZnVsbHmJ","clear":"CoEBQw=="},"compilerInfo":{"compiler":"puya","compilerVersion":{"major":4,"minor":10,"patch":0}},"events":[],"templateVariables":{}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


/**
 * The argument types for the YtAutoConverter contract
 */
export type YtAutoConverterArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'initialize(byte[],byte[],byte[])string': {
      oracleAddress: Uint8Array
      tokenizationAddress: Uint8Array
      ammAddress: Uint8Array
    }
    'configure_conversion(uint64,uint64,uint64)string': {
      enabled: bigint | number
      thresholdPrice: bigint | number
      maturity: bigint | number
    }
    'deposit_yt_tokens(uint64)string': {
      amount: bigint | number
    }
    'execute_conversion(byte[],uint64,uint64)string': {
      user: Uint8Array
      minPtAmount: bigint | number
      deadline: bigint | number
    }
    'can_execute_conversion(byte[])uint64': {
      user: Uint8Array
    }
    'get_user_config()(uint64,uint64,uint64,uint64)': Record<string, never>
    'get_user_balances()(uint64,uint64)': Record<string, never>
    'get_conversion_info()(uint64,uint64,uint64)': Record<string, never>
    'calculate_conversion_output(uint64)(uint64,uint64)': {
      ytAmount: bigint | number
    }
    'add_maturity(uint64)string': {
      maturity: bigint | number
    }
    'remove_maturity()string': Record<string, never>
    'set_conversion_fee(uint64)string': {
      newFee: bigint | number
    }
    'pause_converter()string': Record<string, never>
    'unpause_converter()string': Record<string, never>
    'emergency_disable_conversion()string': Record<string, never>
    'withdraw_pt_tokens(uint64)string': {
      amount: bigint | number
    }
    'get_ai_recommendation(uint64,uint64)(uint64,string)': {
      ytAmount: bigint | number
      currentPrice: bigint | number
    }
    'update_addresses(byte[],byte[],byte[])string': {
      oracleAddress: Uint8Array
      tokenizationAddress: Uint8Array
      ammAddress: Uint8Array
    }
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'initialize(byte[],byte[],byte[])string': [oracleAddress: Uint8Array, tokenizationAddress: Uint8Array, ammAddress: Uint8Array]
    'configure_conversion(uint64,uint64,uint64)string': [enabled: bigint | number, thresholdPrice: bigint | number, maturity: bigint | number]
    'deposit_yt_tokens(uint64)string': [amount: bigint | number]
    'execute_conversion(byte[],uint64,uint64)string': [user: Uint8Array, minPtAmount: bigint | number, deadline: bigint | number]
    'can_execute_conversion(byte[])uint64': [user: Uint8Array]
    'get_user_config()(uint64,uint64,uint64,uint64)': []
    'get_user_balances()(uint64,uint64)': []
    'get_conversion_info()(uint64,uint64,uint64)': []
    'calculate_conversion_output(uint64)(uint64,uint64)': [ytAmount: bigint | number]
    'add_maturity(uint64)string': [maturity: bigint | number]
    'remove_maturity()string': []
    'set_conversion_fee(uint64)string': [newFee: bigint | number]
    'pause_converter()string': []
    'unpause_converter()string': []
    'emergency_disable_conversion()string': []
    'withdraw_pt_tokens(uint64)string': [amount: bigint | number]
    'get_ai_recommendation(uint64,uint64)(uint64,string)': [ytAmount: bigint | number, currentPrice: bigint | number]
    'update_addresses(byte[],byte[],byte[])string': [oracleAddress: Uint8Array, tokenizationAddress: Uint8Array, ammAddress: Uint8Array]
  }
}

/**
 * The return type for each method
 */
export type YtAutoConverterReturns = {
  'initialize(byte[],byte[],byte[])string': string
  'configure_conversion(uint64,uint64,uint64)string': string
  'deposit_yt_tokens(uint64)string': string
  'execute_conversion(byte[],uint64,uint64)string': string
  'can_execute_conversion(byte[])uint64': bigint
  'get_user_config()(uint64,uint64,uint64,uint64)': [bigint, bigint, bigint, bigint]
  'get_user_balances()(uint64,uint64)': [bigint, bigint]
  'get_conversion_info()(uint64,uint64,uint64)': [bigint, bigint, bigint]
  'calculate_conversion_output(uint64)(uint64,uint64)': [bigint, bigint]
  'add_maturity(uint64)string': string
  'remove_maturity()string': string
  'set_conversion_fee(uint64)string': string
  'pause_converter()string': string
  'unpause_converter()string': string
  'emergency_disable_conversion()string': string
  'withdraw_pt_tokens(uint64)string': string
  'get_ai_recommendation(uint64,uint64)(uint64,string)': [bigint, string]
  'update_addresses(byte[],byte[],byte[])string': string
}

/**
 * Defines the types of available calls and state of the YtAutoConverter smart contract.
 */
export type YtAutoConverterTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'initialize(byte[],byte[],byte[])string' | 'initialize', {
      argsObj: YtAutoConverterArgs['obj']['initialize(byte[],byte[],byte[])string']
      argsTuple: YtAutoConverterArgs['tuple']['initialize(byte[],byte[],byte[])string']
      returns: YtAutoConverterReturns['initialize(byte[],byte[],byte[])string']
    }>
    & Record<'configure_conversion(uint64,uint64,uint64)string' | 'configure_conversion', {
      argsObj: YtAutoConverterArgs['obj']['configure_conversion(uint64,uint64,uint64)string']
      argsTuple: YtAutoConverterArgs['tuple']['configure_conversion(uint64,uint64,uint64)string']
      returns: YtAutoConverterReturns['configure_conversion(uint64,uint64,uint64)string']
    }>
    & Record<'deposit_yt_tokens(uint64)string' | 'deposit_yt_tokens', {
      argsObj: YtAutoConverterArgs['obj']['deposit_yt_tokens(uint64)string']
      argsTuple: YtAutoConverterArgs['tuple']['deposit_yt_tokens(uint64)string']
      returns: YtAutoConverterReturns['deposit_yt_tokens(uint64)string']
    }>
    & Record<'execute_conversion(byte[],uint64,uint64)string' | 'execute_conversion', {
      argsObj: YtAutoConverterArgs['obj']['execute_conversion(byte[],uint64,uint64)string']
      argsTuple: YtAutoConverterArgs['tuple']['execute_conversion(byte[],uint64,uint64)string']
      returns: YtAutoConverterReturns['execute_conversion(byte[],uint64,uint64)string']
    }>
    & Record<'can_execute_conversion(byte[])uint64' | 'can_execute_conversion', {
      argsObj: YtAutoConverterArgs['obj']['can_execute_conversion(byte[])uint64']
      argsTuple: YtAutoConverterArgs['tuple']['can_execute_conversion(byte[])uint64']
      returns: YtAutoConverterReturns['can_execute_conversion(byte[])uint64']
    }>
    & Record<'get_user_config()(uint64,uint64,uint64,uint64)' | 'get_user_config', {
      argsObj: YtAutoConverterArgs['obj']['get_user_config()(uint64,uint64,uint64,uint64)']
      argsTuple: YtAutoConverterArgs['tuple']['get_user_config()(uint64,uint64,uint64,uint64)']
      returns: YtAutoConverterReturns['get_user_config()(uint64,uint64,uint64,uint64)']
    }>
    & Record<'get_user_balances()(uint64,uint64)' | 'get_user_balances', {
      argsObj: YtAutoConverterArgs['obj']['get_user_balances()(uint64,uint64)']
      argsTuple: YtAutoConverterArgs['tuple']['get_user_balances()(uint64,uint64)']
      returns: YtAutoConverterReturns['get_user_balances()(uint64,uint64)']
    }>
    & Record<'get_conversion_info()(uint64,uint64,uint64)' | 'get_conversion_info', {
      argsObj: YtAutoConverterArgs['obj']['get_conversion_info()(uint64,uint64,uint64)']
      argsTuple: YtAutoConverterArgs['tuple']['get_conversion_info()(uint64,uint64,uint64)']
      returns: YtAutoConverterReturns['get_conversion_info()(uint64,uint64,uint64)']
    }>
    & Record<'calculate_conversion_output(uint64)(uint64,uint64)' | 'calculate_conversion_output', {
      argsObj: YtAutoConverterArgs['obj']['calculate_conversion_output(uint64)(uint64,uint64)']
      argsTuple: YtAutoConverterArgs['tuple']['calculate_conversion_output(uint64)(uint64,uint64)']
      returns: YtAutoConverterReturns['calculate_conversion_output(uint64)(uint64,uint64)']
    }>
    & Record<'add_maturity(uint64)string' | 'add_maturity', {
      argsObj: YtAutoConverterArgs['obj']['add_maturity(uint64)string']
      argsTuple: YtAutoConverterArgs['tuple']['add_maturity(uint64)string']
      returns: YtAutoConverterReturns['add_maturity(uint64)string']
    }>
    & Record<'remove_maturity()string' | 'remove_maturity', {
      argsObj: YtAutoConverterArgs['obj']['remove_maturity()string']
      argsTuple: YtAutoConverterArgs['tuple']['remove_maturity()string']
      returns: YtAutoConverterReturns['remove_maturity()string']
    }>
    & Record<'set_conversion_fee(uint64)string' | 'set_conversion_fee', {
      argsObj: YtAutoConverterArgs['obj']['set_conversion_fee(uint64)string']
      argsTuple: YtAutoConverterArgs['tuple']['set_conversion_fee(uint64)string']
      returns: YtAutoConverterReturns['set_conversion_fee(uint64)string']
    }>
    & Record<'pause_converter()string' | 'pause_converter', {
      argsObj: YtAutoConverterArgs['obj']['pause_converter()string']
      argsTuple: YtAutoConverterArgs['tuple']['pause_converter()string']
      returns: YtAutoConverterReturns['pause_converter()string']
    }>
    & Record<'unpause_converter()string' | 'unpause_converter', {
      argsObj: YtAutoConverterArgs['obj']['unpause_converter()string']
      argsTuple: YtAutoConverterArgs['tuple']['unpause_converter()string']
      returns: YtAutoConverterReturns['unpause_converter()string']
    }>
    & Record<'emergency_disable_conversion()string' | 'emergency_disable_conversion', {
      argsObj: YtAutoConverterArgs['obj']['emergency_disable_conversion()string']
      argsTuple: YtAutoConverterArgs['tuple']['emergency_disable_conversion()string']
      returns: YtAutoConverterReturns['emergency_disable_conversion()string']
    }>
    & Record<'withdraw_pt_tokens(uint64)string' | 'withdraw_pt_tokens', {
      argsObj: YtAutoConverterArgs['obj']['withdraw_pt_tokens(uint64)string']
      argsTuple: YtAutoConverterArgs['tuple']['withdraw_pt_tokens(uint64)string']
      returns: YtAutoConverterReturns['withdraw_pt_tokens(uint64)string']
    }>
    & Record<'get_ai_recommendation(uint64,uint64)(uint64,string)' | 'get_ai_recommendation', {
      argsObj: YtAutoConverterArgs['obj']['get_ai_recommendation(uint64,uint64)(uint64,string)']
      argsTuple: YtAutoConverterArgs['tuple']['get_ai_recommendation(uint64,uint64)(uint64,string)']
      returns: YtAutoConverterReturns['get_ai_recommendation(uint64,uint64)(uint64,string)']
    }>
    & Record<'update_addresses(byte[],byte[],byte[])string' | 'update_addresses', {
      argsObj: YtAutoConverterArgs['obj']['update_addresses(byte[],byte[],byte[])string']
      argsTuple: YtAutoConverterArgs['tuple']['update_addresses(byte[],byte[],byte[])string']
      returns: YtAutoConverterReturns['update_addresses(byte[],byte[],byte[])string']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        admin: BinaryState
        oracleAddress: BinaryState
        tokenizationAddress: BinaryState
        ammAddress: BinaryState
        conversionFee: bigint
        isPaused: bigint
        totalConversions: bigint
        maxSlippage: bigint
        feeDenominator: bigint
      }
      maps: {}
    }
    local: {
      keys: {
        conversionEnabled: bigint
        thresholdPrice: bigint
        userMaturity: bigint
        conversionExecuted: bigint
        ytBalance: bigint
        ptBalance: bigint
      }
      maps: {}
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type YtAutoConverterSignatures = keyof YtAutoConverterTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type YtAutoConverterNonVoidMethodSignatures = keyof YtAutoConverterTypes['methods'] extends infer T ? T extends keyof YtAutoConverterTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the YtAutoConverter smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends YtAutoConverterSignatures> = YtAutoConverterTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the YtAutoConverter smart contract to the method's return type
 */
export type MethodReturn<TSignature extends YtAutoConverterSignatures> = YtAutoConverterTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = YtAutoConverterTypes['state']['global']['keys']

/**
 * Defines the shape of the keyed local state of the application.
 */
export type LocalKeysState = YtAutoConverterTypes['state']['local']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type YtAutoConverterCreateCallParams =
  | Expand<AppClientBareCallParams & {method?: never} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type YtAutoConverterDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: YtAutoConverterCreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the YtAutoConverter smart contract
 */
export abstract class YtAutoConverterParamsFactory {
  /**
   * Constructs a no op call for the initialize(byte[],byte[],byte[])string ABI method
   *
   * Initialize the auto converter
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static initialize(params: CallParams<YtAutoConverterArgs['obj']['initialize(byte[],byte[],byte[])string'] | YtAutoConverterArgs['tuple']['initialize(byte[],byte[],byte[])string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'initialize(byte[],byte[],byte[])string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.oracleAddress, params.args.tokenizationAddress, params.args.ammAddress],
    }
  }
  /**
   * Constructs a no op call for the configure_conversion(uint64,uint64,uint64)string ABI method
   *
   * Configure automatic conversion for user
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static configureConversion(params: CallParams<YtAutoConverterArgs['obj']['configure_conversion(uint64,uint64,uint64)string'] | YtAutoConverterArgs['tuple']['configure_conversion(uint64,uint64,uint64)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'configure_conversion(uint64,uint64,uint64)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.enabled, params.args.thresholdPrice, params.args.maturity],
    }
  }
  /**
   * Constructs a no op call for the deposit_yt_tokens(uint64)string ABI method
   *
   * Deposit YT tokens for conversion (for testing)
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static depositYtTokens(params: CallParams<YtAutoConverterArgs['obj']['deposit_yt_tokens(uint64)string'] | YtAutoConverterArgs['tuple']['deposit_yt_tokens(uint64)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'deposit_yt_tokens(uint64)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.amount],
    }
  }
  /**
   * Constructs a no op call for the execute_conversion(byte[],uint64,uint64)string ABI method
   *
   * Execute YT to PT conversion
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static executeConversion(params: CallParams<YtAutoConverterArgs['obj']['execute_conversion(byte[],uint64,uint64)string'] | YtAutoConverterArgs['tuple']['execute_conversion(byte[],uint64,uint64)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'execute_conversion(byte[],uint64,uint64)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.user, params.args.minPtAmount, params.args.deadline],
    }
  }
  /**
   * Constructs a no op call for the can_execute_conversion(byte[])uint64 ABI method
   *
   * Check if conversion can be executed for user
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static canExecuteConversion(params: CallParams<YtAutoConverterArgs['obj']['can_execute_conversion(byte[])uint64'] | YtAutoConverterArgs['tuple']['can_execute_conversion(byte[])uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'can_execute_conversion(byte[])uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.user],
    }
  }
  /**
   * Constructs a no op call for the get_user_config()(uint64,uint64,uint64,uint64) ABI method
   *
   * Get user's conversion configuration
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getUserConfig(params: CallParams<YtAutoConverterArgs['obj']['get_user_config()(uint64,uint64,uint64,uint64)'] | YtAutoConverterArgs['tuple']['get_user_config()(uint64,uint64,uint64,uint64)']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'get_user_config()(uint64,uint64,uint64,uint64)' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the get_user_balances()(uint64,uint64) ABI method
   *
   * Get user's YT and PT balances
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getUserBalances(params: CallParams<YtAutoConverterArgs['obj']['get_user_balances()(uint64,uint64)'] | YtAutoConverterArgs['tuple']['get_user_balances()(uint64,uint64)']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'get_user_balances()(uint64,uint64)' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the get_conversion_info()(uint64,uint64,uint64) ABI method
   *
   * Get conversion information
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getConversionInfo(params: CallParams<YtAutoConverterArgs['obj']['get_conversion_info()(uint64,uint64,uint64)'] | YtAutoConverterArgs['tuple']['get_conversion_info()(uint64,uint64,uint64)']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'get_conversion_info()(uint64,uint64,uint64)' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the calculate_conversion_output(uint64)(uint64,uint64) ABI method
   *
   * Calculate expected PT output for YT input
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static calculateConversionOutput(params: CallParams<YtAutoConverterArgs['obj']['calculate_conversion_output(uint64)(uint64,uint64)'] | YtAutoConverterArgs['tuple']['calculate_conversion_output(uint64)(uint64,uint64)']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'calculate_conversion_output(uint64)(uint64,uint64)' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.ytAmount],
    }
  }
  /**
   * Constructs a no op call for the add_maturity(uint64)string ABI method
   *
   * Add a maturity for conversion
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static addMaturity(params: CallParams<YtAutoConverterArgs['obj']['add_maturity(uint64)string'] | YtAutoConverterArgs['tuple']['add_maturity(uint64)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'add_maturity(uint64)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.maturity],
    }
  }
  /**
   * Constructs a no op call for the remove_maturity()string ABI method
   *
   * Remove user's maturity
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static removeMaturity(params: CallParams<YtAutoConverterArgs['obj']['remove_maturity()string'] | YtAutoConverterArgs['tuple']['remove_maturity()string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'remove_maturity()string' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the set_conversion_fee(uint64)string ABI method
   *
   * Set conversion fee (admin only)
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static setConversionFee(params: CallParams<YtAutoConverterArgs['obj']['set_conversion_fee(uint64)string'] | YtAutoConverterArgs['tuple']['set_conversion_fee(uint64)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'set_conversion_fee(uint64)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.newFee],
    }
  }
  /**
   * Constructs a no op call for the pause_converter()string ABI method
   *
   * Pause the converter (admin only)
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static pauseConverter(params: CallParams<YtAutoConverterArgs['obj']['pause_converter()string'] | YtAutoConverterArgs['tuple']['pause_converter()string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'pause_converter()string' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the unpause_converter()string ABI method
   *
   * Unpause the converter (admin only)
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static unpauseConverter(params: CallParams<YtAutoConverterArgs['obj']['unpause_converter()string'] | YtAutoConverterArgs['tuple']['unpause_converter()string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'unpause_converter()string' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the emergency_disable_conversion()string ABI method
   *
   * Emergency disable conversion for user
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static emergencyDisableConversion(params: CallParams<YtAutoConverterArgs['obj']['emergency_disable_conversion()string'] | YtAutoConverterArgs['tuple']['emergency_disable_conversion()string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'emergency_disable_conversion()string' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the withdraw_pt_tokens(uint64)string ABI method
   *
   * Withdraw PT tokens
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static withdrawPtTokens(params: CallParams<YtAutoConverterArgs['obj']['withdraw_pt_tokens(uint64)string'] | YtAutoConverterArgs['tuple']['withdraw_pt_tokens(uint64)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'withdraw_pt_tokens(uint64)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.amount],
    }
  }
  /**
   * Constructs a no op call for the get_ai_recommendation(uint64,uint64)(uint64,string) ABI method
   *
   * Get AI recommendation for conversion (simplified)
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getAiRecommendation(params: CallParams<YtAutoConverterArgs['obj']['get_ai_recommendation(uint64,uint64)(uint64,string)'] | YtAutoConverterArgs['tuple']['get_ai_recommendation(uint64,uint64)(uint64,string)']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'get_ai_recommendation(uint64,uint64)(uint64,string)' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.ytAmount, params.args.currentPrice],
    }
  }
  /**
   * Constructs a no op call for the update_addresses(byte[],byte[],byte[])string ABI method
   *
   * Update contract addresses (admin only)
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static updateAddresses(params: CallParams<YtAutoConverterArgs['obj']['update_addresses(byte[],byte[],byte[])string'] | YtAutoConverterArgs['tuple']['update_addresses(byte[],byte[],byte[])string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'update_addresses(byte[],byte[],byte[])string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.oracleAddress, params.args.tokenizationAddress, params.args.ammAddress],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the YTAutoConverter smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class YtAutoConverterFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `YtAutoConverterFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClient {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new YtAutoConverterClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new YtAutoConverterClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the YTAutoConverter smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: YtAutoConverterDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
    })
    return { result: result.result, appClient: new YtAutoConverterClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the YTAutoConverter smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The params for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.params.bare.create(params)
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the YTAutoConverter smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The transaction for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.createTransaction.bare.create(params)
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the YTAutoConverter smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The create result
       */
      bare: async (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        const result = await this.appFactory.send.bare.create(params)
        return { result: result.result, appClient: new YtAutoConverterClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the YTAutoConverter smart contract
 */
export class YtAutoConverterClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `YtAutoConverterClient`
   *
   * @param appClient An `AppClient` instance which has been created with the YtAutoConverter app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `YtAutoConverterClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends YtAutoConverterNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `YtAutoConverterClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<YtAutoConverterClient> {
    return new YtAutoConverterClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `YtAutoConverterClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<YtAutoConverterClient> {
    return new YtAutoConverterClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClient {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the YTAutoConverter smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the YTAutoConverter smart contract using the `initialize(byte[],byte[],byte[])string` ABI method.
     *
     * Initialize the auto converter
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    initialize: (params: CallParams<YtAutoConverterArgs['obj']['initialize(byte[],byte[],byte[])string'] | YtAutoConverterArgs['tuple']['initialize(byte[],byte[],byte[])string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(YtAutoConverterParamsFactory.initialize(params))
    },

    /**
     * Makes a call to the YTAutoConverter smart contract using the `configure_conversion(uint64,uint64,uint64)string` ABI method.
     *
     * Configure automatic conversion for user
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    configureConversion: (params: CallParams<YtAutoConverterArgs['obj']['configure_conversion(uint64,uint64,uint64)string'] | YtAutoConverterArgs['tuple']['configure_conversion(uint64,uint64,uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(YtAutoConverterParamsFactory.configureConversion(params))
    },

    /**
     * Makes a call to the YTAutoConverter smart contract using the `deposit_yt_tokens(uint64)string` ABI method.
     *
     * Deposit YT tokens for conversion (for testing)
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    depositYtTokens: (params: CallParams<YtAutoConverterArgs['obj']['deposit_yt_tokens(uint64)string'] | YtAutoConverterArgs['tuple']['deposit_yt_tokens(uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(YtAutoConverterParamsFactory.depositYtTokens(params))
    },

    /**
     * Makes a call to the YTAutoConverter smart contract using the `execute_conversion(byte[],uint64,uint64)string` ABI method.
     *
     * Execute YT to PT conversion
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    executeConversion: (params: CallParams<YtAutoConverterArgs['obj']['execute_conversion(byte[],uint64,uint64)string'] | YtAutoConverterArgs['tuple']['execute_conversion(byte[],uint64,uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(YtAutoConverterParamsFactory.executeConversion(params))
    },

    /**
     * Makes a call to the YTAutoConverter smart contract using the `can_execute_conversion(byte[])uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Check if conversion can be executed for user
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    canExecuteConversion: (params: CallParams<YtAutoConverterArgs['obj']['can_execute_conversion(byte[])uint64'] | YtAutoConverterArgs['tuple']['can_execute_conversion(byte[])uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(YtAutoConverterParamsFactory.canExecuteConversion(params))
    },

    /**
     * Makes a call to the YTAutoConverter smart contract using the `get_user_config()(uint64,uint64,uint64,uint64)` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Get user's conversion configuration
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getUserConfig: (params: CallParams<YtAutoConverterArgs['obj']['get_user_config()(uint64,uint64,uint64,uint64)'] | YtAutoConverterArgs['tuple']['get_user_config()(uint64,uint64,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(YtAutoConverterParamsFactory.getUserConfig(params))
    },

    /**
     * Makes a call to the YTAutoConverter smart contract using the `get_user_balances()(uint64,uint64)` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Get user's YT and PT balances
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getUserBalances: (params: CallParams<YtAutoConverterArgs['obj']['get_user_balances()(uint64,uint64)'] | YtAutoConverterArgs['tuple']['get_user_balances()(uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(YtAutoConverterParamsFactory.getUserBalances(params))
    },

    /**
     * Makes a call to the YTAutoConverter smart contract using the `get_conversion_info()(uint64,uint64,uint64)` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Get conversion information
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getConversionInfo: (params: CallParams<YtAutoConverterArgs['obj']['get_conversion_info()(uint64,uint64,uint64)'] | YtAutoConverterArgs['tuple']['get_conversion_info()(uint64,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(YtAutoConverterParamsFactory.getConversionInfo(params))
    },

    /**
     * Makes a call to the YTAutoConverter smart contract using the `calculate_conversion_output(uint64)(uint64,uint64)` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Calculate expected PT output for YT input
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    calculateConversionOutput: (params: CallParams<YtAutoConverterArgs['obj']['calculate_conversion_output(uint64)(uint64,uint64)'] | YtAutoConverterArgs['tuple']['calculate_conversion_output(uint64)(uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(YtAutoConverterParamsFactory.calculateConversionOutput(params))
    },

    /**
     * Makes a call to the YTAutoConverter smart contract using the `add_maturity(uint64)string` ABI method.
     *
     * Add a maturity for conversion
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    addMaturity: (params: CallParams<YtAutoConverterArgs['obj']['add_maturity(uint64)string'] | YtAutoConverterArgs['tuple']['add_maturity(uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(YtAutoConverterParamsFactory.addMaturity(params))
    },

    /**
     * Makes a call to the YTAutoConverter smart contract using the `remove_maturity()string` ABI method.
     *
     * Remove user's maturity
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    removeMaturity: (params: CallParams<YtAutoConverterArgs['obj']['remove_maturity()string'] | YtAutoConverterArgs['tuple']['remove_maturity()string']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(YtAutoConverterParamsFactory.removeMaturity(params))
    },

    /**
     * Makes a call to the YTAutoConverter smart contract using the `set_conversion_fee(uint64)string` ABI method.
     *
     * Set conversion fee (admin only)
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    setConversionFee: (params: CallParams<YtAutoConverterArgs['obj']['set_conversion_fee(uint64)string'] | YtAutoConverterArgs['tuple']['set_conversion_fee(uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(YtAutoConverterParamsFactory.setConversionFee(params))
    },

    /**
     * Makes a call to the YTAutoConverter smart contract using the `pause_converter()string` ABI method.
     *
     * Pause the converter (admin only)
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    pauseConverter: (params: CallParams<YtAutoConverterArgs['obj']['pause_converter()string'] | YtAutoConverterArgs['tuple']['pause_converter()string']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(YtAutoConverterParamsFactory.pauseConverter(params))
    },

    /**
     * Makes a call to the YTAutoConverter smart contract using the `unpause_converter()string` ABI method.
     *
     * Unpause the converter (admin only)
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    unpauseConverter: (params: CallParams<YtAutoConverterArgs['obj']['unpause_converter()string'] | YtAutoConverterArgs['tuple']['unpause_converter()string']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(YtAutoConverterParamsFactory.unpauseConverter(params))
    },

    /**
     * Makes a call to the YTAutoConverter smart contract using the `emergency_disable_conversion()string` ABI method.
     *
     * Emergency disable conversion for user
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    emergencyDisableConversion: (params: CallParams<YtAutoConverterArgs['obj']['emergency_disable_conversion()string'] | YtAutoConverterArgs['tuple']['emergency_disable_conversion()string']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(YtAutoConverterParamsFactory.emergencyDisableConversion(params))
    },

    /**
     * Makes a call to the YTAutoConverter smart contract using the `withdraw_pt_tokens(uint64)string` ABI method.
     *
     * Withdraw PT tokens
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    withdrawPtTokens: (params: CallParams<YtAutoConverterArgs['obj']['withdraw_pt_tokens(uint64)string'] | YtAutoConverterArgs['tuple']['withdraw_pt_tokens(uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(YtAutoConverterParamsFactory.withdrawPtTokens(params))
    },

    /**
     * Makes a call to the YTAutoConverter smart contract using the `get_ai_recommendation(uint64,uint64)(uint64,string)` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Get AI recommendation for conversion (simplified)
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getAiRecommendation: (params: CallParams<YtAutoConverterArgs['obj']['get_ai_recommendation(uint64,uint64)(uint64,string)'] | YtAutoConverterArgs['tuple']['get_ai_recommendation(uint64,uint64)(uint64,string)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(YtAutoConverterParamsFactory.getAiRecommendation(params))
    },

    /**
     * Makes a call to the YTAutoConverter smart contract using the `update_addresses(byte[],byte[],byte[])string` ABI method.
     *
     * Update contract addresses (admin only)
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    updateAddresses: (params: CallParams<YtAutoConverterArgs['obj']['update_addresses(byte[],byte[],byte[])string'] | YtAutoConverterArgs['tuple']['update_addresses(byte[],byte[],byte[])string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(YtAutoConverterParamsFactory.updateAddresses(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the YTAutoConverter smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the YTAutoConverter smart contract using the `initialize(byte[],byte[],byte[])string` ABI method.
     *
     * Initialize the auto converter
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    initialize: (params: CallParams<YtAutoConverterArgs['obj']['initialize(byte[],byte[],byte[])string'] | YtAutoConverterArgs['tuple']['initialize(byte[],byte[],byte[])string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(YtAutoConverterParamsFactory.initialize(params))
    },

    /**
     * Makes a call to the YTAutoConverter smart contract using the `configure_conversion(uint64,uint64,uint64)string` ABI method.
     *
     * Configure automatic conversion for user
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    configureConversion: (params: CallParams<YtAutoConverterArgs['obj']['configure_conversion(uint64,uint64,uint64)string'] | YtAutoConverterArgs['tuple']['configure_conversion(uint64,uint64,uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(YtAutoConverterParamsFactory.configureConversion(params))
    },

    /**
     * Makes a call to the YTAutoConverter smart contract using the `deposit_yt_tokens(uint64)string` ABI method.
     *
     * Deposit YT tokens for conversion (for testing)
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    depositYtTokens: (params: CallParams<YtAutoConverterArgs['obj']['deposit_yt_tokens(uint64)string'] | YtAutoConverterArgs['tuple']['deposit_yt_tokens(uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(YtAutoConverterParamsFactory.depositYtTokens(params))
    },

    /**
     * Makes a call to the YTAutoConverter smart contract using the `execute_conversion(byte[],uint64,uint64)string` ABI method.
     *
     * Execute YT to PT conversion
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    executeConversion: (params: CallParams<YtAutoConverterArgs['obj']['execute_conversion(byte[],uint64,uint64)string'] | YtAutoConverterArgs['tuple']['execute_conversion(byte[],uint64,uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(YtAutoConverterParamsFactory.executeConversion(params))
    },

    /**
     * Makes a call to the YTAutoConverter smart contract using the `can_execute_conversion(byte[])uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Check if conversion can be executed for user
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    canExecuteConversion: (params: CallParams<YtAutoConverterArgs['obj']['can_execute_conversion(byte[])uint64'] | YtAutoConverterArgs['tuple']['can_execute_conversion(byte[])uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(YtAutoConverterParamsFactory.canExecuteConversion(params))
    },

    /**
     * Makes a call to the YTAutoConverter smart contract using the `get_user_config()(uint64,uint64,uint64,uint64)` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Get user's conversion configuration
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getUserConfig: (params: CallParams<YtAutoConverterArgs['obj']['get_user_config()(uint64,uint64,uint64,uint64)'] | YtAutoConverterArgs['tuple']['get_user_config()(uint64,uint64,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(YtAutoConverterParamsFactory.getUserConfig(params))
    },

    /**
     * Makes a call to the YTAutoConverter smart contract using the `get_user_balances()(uint64,uint64)` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Get user's YT and PT balances
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getUserBalances: (params: CallParams<YtAutoConverterArgs['obj']['get_user_balances()(uint64,uint64)'] | YtAutoConverterArgs['tuple']['get_user_balances()(uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(YtAutoConverterParamsFactory.getUserBalances(params))
    },

    /**
     * Makes a call to the YTAutoConverter smart contract using the `get_conversion_info()(uint64,uint64,uint64)` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Get conversion information
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getConversionInfo: (params: CallParams<YtAutoConverterArgs['obj']['get_conversion_info()(uint64,uint64,uint64)'] | YtAutoConverterArgs['tuple']['get_conversion_info()(uint64,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(YtAutoConverterParamsFactory.getConversionInfo(params))
    },

    /**
     * Makes a call to the YTAutoConverter smart contract using the `calculate_conversion_output(uint64)(uint64,uint64)` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Calculate expected PT output for YT input
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    calculateConversionOutput: (params: CallParams<YtAutoConverterArgs['obj']['calculate_conversion_output(uint64)(uint64,uint64)'] | YtAutoConverterArgs['tuple']['calculate_conversion_output(uint64)(uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(YtAutoConverterParamsFactory.calculateConversionOutput(params))
    },

    /**
     * Makes a call to the YTAutoConverter smart contract using the `add_maturity(uint64)string` ABI method.
     *
     * Add a maturity for conversion
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    addMaturity: (params: CallParams<YtAutoConverterArgs['obj']['add_maturity(uint64)string'] | YtAutoConverterArgs['tuple']['add_maturity(uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(YtAutoConverterParamsFactory.addMaturity(params))
    },

    /**
     * Makes a call to the YTAutoConverter smart contract using the `remove_maturity()string` ABI method.
     *
     * Remove user's maturity
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    removeMaturity: (params: CallParams<YtAutoConverterArgs['obj']['remove_maturity()string'] | YtAutoConverterArgs['tuple']['remove_maturity()string']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(YtAutoConverterParamsFactory.removeMaturity(params))
    },

    /**
     * Makes a call to the YTAutoConverter smart contract using the `set_conversion_fee(uint64)string` ABI method.
     *
     * Set conversion fee (admin only)
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    setConversionFee: (params: CallParams<YtAutoConverterArgs['obj']['set_conversion_fee(uint64)string'] | YtAutoConverterArgs['tuple']['set_conversion_fee(uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(YtAutoConverterParamsFactory.setConversionFee(params))
    },

    /**
     * Makes a call to the YTAutoConverter smart contract using the `pause_converter()string` ABI method.
     *
     * Pause the converter (admin only)
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    pauseConverter: (params: CallParams<YtAutoConverterArgs['obj']['pause_converter()string'] | YtAutoConverterArgs['tuple']['pause_converter()string']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(YtAutoConverterParamsFactory.pauseConverter(params))
    },

    /**
     * Makes a call to the YTAutoConverter smart contract using the `unpause_converter()string` ABI method.
     *
     * Unpause the converter (admin only)
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    unpauseConverter: (params: CallParams<YtAutoConverterArgs['obj']['unpause_converter()string'] | YtAutoConverterArgs['tuple']['unpause_converter()string']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(YtAutoConverterParamsFactory.unpauseConverter(params))
    },

    /**
     * Makes a call to the YTAutoConverter smart contract using the `emergency_disable_conversion()string` ABI method.
     *
     * Emergency disable conversion for user
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    emergencyDisableConversion: (params: CallParams<YtAutoConverterArgs['obj']['emergency_disable_conversion()string'] | YtAutoConverterArgs['tuple']['emergency_disable_conversion()string']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(YtAutoConverterParamsFactory.emergencyDisableConversion(params))
    },

    /**
     * Makes a call to the YTAutoConverter smart contract using the `withdraw_pt_tokens(uint64)string` ABI method.
     *
     * Withdraw PT tokens
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    withdrawPtTokens: (params: CallParams<YtAutoConverterArgs['obj']['withdraw_pt_tokens(uint64)string'] | YtAutoConverterArgs['tuple']['withdraw_pt_tokens(uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(YtAutoConverterParamsFactory.withdrawPtTokens(params))
    },

    /**
     * Makes a call to the YTAutoConverter smart contract using the `get_ai_recommendation(uint64,uint64)(uint64,string)` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Get AI recommendation for conversion (simplified)
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getAiRecommendation: (params: CallParams<YtAutoConverterArgs['obj']['get_ai_recommendation(uint64,uint64)(uint64,string)'] | YtAutoConverterArgs['tuple']['get_ai_recommendation(uint64,uint64)(uint64,string)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(YtAutoConverterParamsFactory.getAiRecommendation(params))
    },

    /**
     * Makes a call to the YTAutoConverter smart contract using the `update_addresses(byte[],byte[],byte[])string` ABI method.
     *
     * Update contract addresses (admin only)
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    updateAddresses: (params: CallParams<YtAutoConverterArgs['obj']['update_addresses(byte[],byte[],byte[])string'] | YtAutoConverterArgs['tuple']['update_addresses(byte[],byte[],byte[])string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(YtAutoConverterParamsFactory.updateAddresses(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the YTAutoConverter smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the YTAutoConverter smart contract using the `initialize(byte[],byte[],byte[])string` ABI method.
     *
     * Initialize the auto converter
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    initialize: async (params: CallParams<YtAutoConverterArgs['obj']['initialize(byte[],byte[],byte[])string'] | YtAutoConverterArgs['tuple']['initialize(byte[],byte[],byte[])string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(YtAutoConverterParamsFactory.initialize(params))
      return {...result, return: result.return as unknown as (undefined | YtAutoConverterReturns['initialize(byte[],byte[],byte[])string'])}
    },

    /**
     * Makes a call to the YTAutoConverter smart contract using the `configure_conversion(uint64,uint64,uint64)string` ABI method.
     *
     * Configure automatic conversion for user
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    configureConversion: async (params: CallParams<YtAutoConverterArgs['obj']['configure_conversion(uint64,uint64,uint64)string'] | YtAutoConverterArgs['tuple']['configure_conversion(uint64,uint64,uint64)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(YtAutoConverterParamsFactory.configureConversion(params))
      return {...result, return: result.return as unknown as (undefined | YtAutoConverterReturns['configure_conversion(uint64,uint64,uint64)string'])}
    },

    /**
     * Makes a call to the YTAutoConverter smart contract using the `deposit_yt_tokens(uint64)string` ABI method.
     *
     * Deposit YT tokens for conversion (for testing)
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    depositYtTokens: async (params: CallParams<YtAutoConverterArgs['obj']['deposit_yt_tokens(uint64)string'] | YtAutoConverterArgs['tuple']['deposit_yt_tokens(uint64)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(YtAutoConverterParamsFactory.depositYtTokens(params))
      return {...result, return: result.return as unknown as (undefined | YtAutoConverterReturns['deposit_yt_tokens(uint64)string'])}
    },

    /**
     * Makes a call to the YTAutoConverter smart contract using the `execute_conversion(byte[],uint64,uint64)string` ABI method.
     *
     * Execute YT to PT conversion
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    executeConversion: async (params: CallParams<YtAutoConverterArgs['obj']['execute_conversion(byte[],uint64,uint64)string'] | YtAutoConverterArgs['tuple']['execute_conversion(byte[],uint64,uint64)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(YtAutoConverterParamsFactory.executeConversion(params))
      return {...result, return: result.return as unknown as (undefined | YtAutoConverterReturns['execute_conversion(byte[],uint64,uint64)string'])}
    },

    /**
     * Makes a call to the YTAutoConverter smart contract using the `can_execute_conversion(byte[])uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Check if conversion can be executed for user
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    canExecuteConversion: async (params: CallParams<YtAutoConverterArgs['obj']['can_execute_conversion(byte[])uint64'] | YtAutoConverterArgs['tuple']['can_execute_conversion(byte[])uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(YtAutoConverterParamsFactory.canExecuteConversion(params))
      return {...result, return: result.return as unknown as (undefined | YtAutoConverterReturns['can_execute_conversion(byte[])uint64'])}
    },

    /**
     * Makes a call to the YTAutoConverter smart contract using the `get_user_config()(uint64,uint64,uint64,uint64)` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Get user's conversion configuration
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getUserConfig: async (params: CallParams<YtAutoConverterArgs['obj']['get_user_config()(uint64,uint64,uint64,uint64)'] | YtAutoConverterArgs['tuple']['get_user_config()(uint64,uint64,uint64,uint64)']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(YtAutoConverterParamsFactory.getUserConfig(params))
      return {...result, return: result.return as unknown as (undefined | YtAutoConverterReturns['get_user_config()(uint64,uint64,uint64,uint64)'])}
    },

    /**
     * Makes a call to the YTAutoConverter smart contract using the `get_user_balances()(uint64,uint64)` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Get user's YT and PT balances
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getUserBalances: async (params: CallParams<YtAutoConverterArgs['obj']['get_user_balances()(uint64,uint64)'] | YtAutoConverterArgs['tuple']['get_user_balances()(uint64,uint64)']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(YtAutoConverterParamsFactory.getUserBalances(params))
      return {...result, return: result.return as unknown as (undefined | YtAutoConverterReturns['get_user_balances()(uint64,uint64)'])}
    },

    /**
     * Makes a call to the YTAutoConverter smart contract using the `get_conversion_info()(uint64,uint64,uint64)` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Get conversion information
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getConversionInfo: async (params: CallParams<YtAutoConverterArgs['obj']['get_conversion_info()(uint64,uint64,uint64)'] | YtAutoConverterArgs['tuple']['get_conversion_info()(uint64,uint64,uint64)']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(YtAutoConverterParamsFactory.getConversionInfo(params))
      return {...result, return: result.return as unknown as (undefined | YtAutoConverterReturns['get_conversion_info()(uint64,uint64,uint64)'])}
    },

    /**
     * Makes a call to the YTAutoConverter smart contract using the `calculate_conversion_output(uint64)(uint64,uint64)` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Calculate expected PT output for YT input
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    calculateConversionOutput: async (params: CallParams<YtAutoConverterArgs['obj']['calculate_conversion_output(uint64)(uint64,uint64)'] | YtAutoConverterArgs['tuple']['calculate_conversion_output(uint64)(uint64,uint64)']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(YtAutoConverterParamsFactory.calculateConversionOutput(params))
      return {...result, return: result.return as unknown as (undefined | YtAutoConverterReturns['calculate_conversion_output(uint64)(uint64,uint64)'])}
    },

    /**
     * Makes a call to the YTAutoConverter smart contract using the `add_maturity(uint64)string` ABI method.
     *
     * Add a maturity for conversion
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    addMaturity: async (params: CallParams<YtAutoConverterArgs['obj']['add_maturity(uint64)string'] | YtAutoConverterArgs['tuple']['add_maturity(uint64)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(YtAutoConverterParamsFactory.addMaturity(params))
      return {...result, return: result.return as unknown as (undefined | YtAutoConverterReturns['add_maturity(uint64)string'])}
    },

    /**
     * Makes a call to the YTAutoConverter smart contract using the `remove_maturity()string` ABI method.
     *
     * Remove user's maturity
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    removeMaturity: async (params: CallParams<YtAutoConverterArgs['obj']['remove_maturity()string'] | YtAutoConverterArgs['tuple']['remove_maturity()string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(YtAutoConverterParamsFactory.removeMaturity(params))
      return {...result, return: result.return as unknown as (undefined | YtAutoConverterReturns['remove_maturity()string'])}
    },

    /**
     * Makes a call to the YTAutoConverter smart contract using the `set_conversion_fee(uint64)string` ABI method.
     *
     * Set conversion fee (admin only)
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    setConversionFee: async (params: CallParams<YtAutoConverterArgs['obj']['set_conversion_fee(uint64)string'] | YtAutoConverterArgs['tuple']['set_conversion_fee(uint64)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(YtAutoConverterParamsFactory.setConversionFee(params))
      return {...result, return: result.return as unknown as (undefined | YtAutoConverterReturns['set_conversion_fee(uint64)string'])}
    },

    /**
     * Makes a call to the YTAutoConverter smart contract using the `pause_converter()string` ABI method.
     *
     * Pause the converter (admin only)
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    pauseConverter: async (params: CallParams<YtAutoConverterArgs['obj']['pause_converter()string'] | YtAutoConverterArgs['tuple']['pause_converter()string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(YtAutoConverterParamsFactory.pauseConverter(params))
      return {...result, return: result.return as unknown as (undefined | YtAutoConverterReturns['pause_converter()string'])}
    },

    /**
     * Makes a call to the YTAutoConverter smart contract using the `unpause_converter()string` ABI method.
     *
     * Unpause the converter (admin only)
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    unpauseConverter: async (params: CallParams<YtAutoConverterArgs['obj']['unpause_converter()string'] | YtAutoConverterArgs['tuple']['unpause_converter()string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(YtAutoConverterParamsFactory.unpauseConverter(params))
      return {...result, return: result.return as unknown as (undefined | YtAutoConverterReturns['unpause_converter()string'])}
    },

    /**
     * Makes a call to the YTAutoConverter smart contract using the `emergency_disable_conversion()string` ABI method.
     *
     * Emergency disable conversion for user
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    emergencyDisableConversion: async (params: CallParams<YtAutoConverterArgs['obj']['emergency_disable_conversion()string'] | YtAutoConverterArgs['tuple']['emergency_disable_conversion()string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(YtAutoConverterParamsFactory.emergencyDisableConversion(params))
      return {...result, return: result.return as unknown as (undefined | YtAutoConverterReturns['emergency_disable_conversion()string'])}
    },

    /**
     * Makes a call to the YTAutoConverter smart contract using the `withdraw_pt_tokens(uint64)string` ABI method.
     *
     * Withdraw PT tokens
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    withdrawPtTokens: async (params: CallParams<YtAutoConverterArgs['obj']['withdraw_pt_tokens(uint64)string'] | YtAutoConverterArgs['tuple']['withdraw_pt_tokens(uint64)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(YtAutoConverterParamsFactory.withdrawPtTokens(params))
      return {...result, return: result.return as unknown as (undefined | YtAutoConverterReturns['withdraw_pt_tokens(uint64)string'])}
    },

    /**
     * Makes a call to the YTAutoConverter smart contract using the `get_ai_recommendation(uint64,uint64)(uint64,string)` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Get AI recommendation for conversion (simplified)
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getAiRecommendation: async (params: CallParams<YtAutoConverterArgs['obj']['get_ai_recommendation(uint64,uint64)(uint64,string)'] | YtAutoConverterArgs['tuple']['get_ai_recommendation(uint64,uint64)(uint64,string)']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(YtAutoConverterParamsFactory.getAiRecommendation(params))
      return {...result, return: result.return as unknown as (undefined | YtAutoConverterReturns['get_ai_recommendation(uint64,uint64)(uint64,string)'])}
    },

    /**
     * Makes a call to the YTAutoConverter smart contract using the `update_addresses(byte[],byte[],byte[])string` ABI method.
     *
     * Update contract addresses (admin only)
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    updateAddresses: async (params: CallParams<YtAutoConverterArgs['obj']['update_addresses(byte[],byte[],byte[])string'] | YtAutoConverterArgs['tuple']['update_addresses(byte[],byte[],byte[])string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(YtAutoConverterParamsFactory.updateAddresses(params))
      return {...result, return: result.return as unknown as (undefined | YtAutoConverterReturns['update_addresses(byte[],byte[],byte[])string'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new YtAutoConverterClient(this.appClient.clone(params))
  }

  /**
   * Makes a readonly (simulated) call to the YTAutoConverter smart contract using the `can_execute_conversion(byte[])uint64` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * Check if conversion can be executed for user
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async canExecuteConversion(params: CallParams<YtAutoConverterArgs['obj']['can_execute_conversion(byte[])uint64'] | YtAutoConverterArgs['tuple']['can_execute_conversion(byte[])uint64']>) {
    const result = await this.appClient.send.call(YtAutoConverterParamsFactory.canExecuteConversion(params))
    return result.return as unknown as YtAutoConverterReturns['can_execute_conversion(byte[])uint64']
  }

  /**
   * Makes a readonly (simulated) call to the YTAutoConverter smart contract using the `get_user_config()(uint64,uint64,uint64,uint64)` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * Get user's conversion configuration
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async getUserConfig(params: CallParams<YtAutoConverterArgs['obj']['get_user_config()(uint64,uint64,uint64,uint64)'] | YtAutoConverterArgs['tuple']['get_user_config()(uint64,uint64,uint64,uint64)']> = {args: []}) {
    const result = await this.appClient.send.call(YtAutoConverterParamsFactory.getUserConfig(params))
    return result.return as unknown as YtAutoConverterReturns['get_user_config()(uint64,uint64,uint64,uint64)']
  }

  /**
   * Makes a readonly (simulated) call to the YTAutoConverter smart contract using the `get_user_balances()(uint64,uint64)` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * Get user's YT and PT balances
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async getUserBalances(params: CallParams<YtAutoConverterArgs['obj']['get_user_balances()(uint64,uint64)'] | YtAutoConverterArgs['tuple']['get_user_balances()(uint64,uint64)']> = {args: []}) {
    const result = await this.appClient.send.call(YtAutoConverterParamsFactory.getUserBalances(params))
    return result.return as unknown as YtAutoConverterReturns['get_user_balances()(uint64,uint64)']
  }

  /**
   * Makes a readonly (simulated) call to the YTAutoConverter smart contract using the `get_conversion_info()(uint64,uint64,uint64)` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * Get conversion information
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async getConversionInfo(params: CallParams<YtAutoConverterArgs['obj']['get_conversion_info()(uint64,uint64,uint64)'] | YtAutoConverterArgs['tuple']['get_conversion_info()(uint64,uint64,uint64)']> = {args: []}) {
    const result = await this.appClient.send.call(YtAutoConverterParamsFactory.getConversionInfo(params))
    return result.return as unknown as YtAutoConverterReturns['get_conversion_info()(uint64,uint64,uint64)']
  }

  /**
   * Makes a readonly (simulated) call to the YTAutoConverter smart contract using the `calculate_conversion_output(uint64)(uint64,uint64)` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * Calculate expected PT output for YT input
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async calculateConversionOutput(params: CallParams<YtAutoConverterArgs['obj']['calculate_conversion_output(uint64)(uint64,uint64)'] | YtAutoConverterArgs['tuple']['calculate_conversion_output(uint64)(uint64,uint64)']>) {
    const result = await this.appClient.send.call(YtAutoConverterParamsFactory.calculateConversionOutput(params))
    return result.return as unknown as YtAutoConverterReturns['calculate_conversion_output(uint64)(uint64,uint64)']
  }

  /**
   * Makes a readonly (simulated) call to the YTAutoConverter smart contract using the `get_ai_recommendation(uint64,uint64)(uint64,string)` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * Get AI recommendation for conversion (simplified)
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async getAiRecommendation(params: CallParams<YtAutoConverterArgs['obj']['get_ai_recommendation(uint64,uint64)(uint64,string)'] | YtAutoConverterArgs['tuple']['get_ai_recommendation(uint64,uint64)(uint64,string)']>) {
    const result = await this.appClient.send.call(YtAutoConverterParamsFactory.getAiRecommendation(params))
    return result.return as unknown as YtAutoConverterReturns['get_ai_recommendation(uint64,uint64)(uint64,string)']
  }

  /**
   * Methods to access state for the current YTAutoConverter app
   */
  state = {
    /**
     * Methods to access global state for the current YTAutoConverter app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          admin: new BinaryStateValue(result.admin),
          oracleAddress: new BinaryStateValue(result.oracle_address),
          tokenizationAddress: new BinaryStateValue(result.tokenization_address),
          ammAddress: new BinaryStateValue(result.amm_address),
          conversionFee: result.conversion_fee,
          isPaused: result.is_paused,
          totalConversions: result.total_conversions,
          maxSlippage: result.max_slippage,
          feeDenominator: result.fee_denominator,
        }
      },
      /**
       * Get the current value of the admin key in global state
       */
      admin: async (): Promise<BinaryState> => { return new BinaryStateValue((await this.appClient.state.global.getValue("admin")) as Uint8Array | undefined) },
      /**
       * Get the current value of the oracle_address key in global state
       */
      oracleAddress: async (): Promise<BinaryState> => { return new BinaryStateValue((await this.appClient.state.global.getValue("oracle_address")) as Uint8Array | undefined) },
      /**
       * Get the current value of the tokenization_address key in global state
       */
      tokenizationAddress: async (): Promise<BinaryState> => { return new BinaryStateValue((await this.appClient.state.global.getValue("tokenization_address")) as Uint8Array | undefined) },
      /**
       * Get the current value of the amm_address key in global state
       */
      ammAddress: async (): Promise<BinaryState> => { return new BinaryStateValue((await this.appClient.state.global.getValue("amm_address")) as Uint8Array | undefined) },
      /**
       * Get the current value of the conversion_fee key in global state
       */
      conversionFee: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("conversion_fee")) as bigint | undefined },
      /**
       * Get the current value of the is_paused key in global state
       */
      isPaused: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("is_paused")) as bigint | undefined },
      /**
       * Get the current value of the total_conversions key in global state
       */
      totalConversions: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("total_conversions")) as bigint | undefined },
      /**
       * Get the current value of the max_slippage key in global state
       */
      maxSlippage: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("max_slippage")) as bigint | undefined },
      /**
       * Get the current value of the fee_denominator key in global state
       */
      feeDenominator: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("fee_denominator")) as bigint | undefined },
    },
    /**
     * Methods to access local state for the current YTAutoConverter app
     */
    local: (address: string | Address) => {
      const encodedAddress = typeof address === 'string' ? address : encodeAddress(address.publicKey)
      return {
        /**
         * Get all current keyed values from local state
         */
        getAll: async (): Promise<Partial<Expand<LocalKeysState>>> => {
          const result = await this.appClient.state.local(encodedAddress).getAll()
          return {
            conversionEnabled: result.conversion_enabled,
            thresholdPrice: result.threshold_price,
            userMaturity: result.user_maturity,
            conversionExecuted: result.conversion_executed,
            ytBalance: result.yt_balance,
            ptBalance: result.pt_balance,
          }
        },
        /**
         * Get the current value of the conversion_enabled key in local state
         */
        conversionEnabled: async (): Promise<bigint | undefined> => { return (await this.appClient.state.local(encodedAddress).getValue("conversion_enabled")) as bigint | undefined },
        /**
         * Get the current value of the threshold_price key in local state
         */
        thresholdPrice: async (): Promise<bigint | undefined> => { return (await this.appClient.state.local(encodedAddress).getValue("threshold_price")) as bigint | undefined },
        /**
         * Get the current value of the user_maturity key in local state
         */
        userMaturity: async (): Promise<bigint | undefined> => { return (await this.appClient.state.local(encodedAddress).getValue("user_maturity")) as bigint | undefined },
        /**
         * Get the current value of the conversion_executed key in local state
         */
        conversionExecuted: async (): Promise<bigint | undefined> => { return (await this.appClient.state.local(encodedAddress).getValue("conversion_executed")) as bigint | undefined },
        /**
         * Get the current value of the yt_balance key in local state
         */
        ytBalance: async (): Promise<bigint | undefined> => { return (await this.appClient.state.local(encodedAddress).getValue("yt_balance")) as bigint | undefined },
        /**
         * Get the current value of the pt_balance key in local state
         */
        ptBalance: async (): Promise<bigint | undefined> => { return (await this.appClient.state.local(encodedAddress).getValue("pt_balance")) as bigint | undefined },
      }
    },
  }

  public newGroup(): YtAutoConverterComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a initialize(byte[],byte[],byte[])string method call against the YTAutoConverter contract
       */
      initialize(params: CallParams<YtAutoConverterArgs['obj']['initialize(byte[],byte[],byte[])string'] | YtAutoConverterArgs['tuple']['initialize(byte[],byte[],byte[])string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.initialize(params)))
        resultMappers.push((v) => client.decodeReturnValue('initialize(byte[],byte[],byte[])string', v))
        return this
      },
      /**
       * Add a configure_conversion(uint64,uint64,uint64)string method call against the YTAutoConverter contract
       */
      configureConversion(params: CallParams<YtAutoConverterArgs['obj']['configure_conversion(uint64,uint64,uint64)string'] | YtAutoConverterArgs['tuple']['configure_conversion(uint64,uint64,uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.configureConversion(params)))
        resultMappers.push((v) => client.decodeReturnValue('configure_conversion(uint64,uint64,uint64)string', v))
        return this
      },
      /**
       * Add a deposit_yt_tokens(uint64)string method call against the YTAutoConverter contract
       */
      depositYtTokens(params: CallParams<YtAutoConverterArgs['obj']['deposit_yt_tokens(uint64)string'] | YtAutoConverterArgs['tuple']['deposit_yt_tokens(uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.depositYtTokens(params)))
        resultMappers.push((v) => client.decodeReturnValue('deposit_yt_tokens(uint64)string', v))
        return this
      },
      /**
       * Add a execute_conversion(byte[],uint64,uint64)string method call against the YTAutoConverter contract
       */
      executeConversion(params: CallParams<YtAutoConverterArgs['obj']['execute_conversion(byte[],uint64,uint64)string'] | YtAutoConverterArgs['tuple']['execute_conversion(byte[],uint64,uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.executeConversion(params)))
        resultMappers.push((v) => client.decodeReturnValue('execute_conversion(byte[],uint64,uint64)string', v))
        return this
      },
      /**
       * Add a can_execute_conversion(byte[])uint64 method call against the YTAutoConverter contract
       */
      canExecuteConversion(params: CallParams<YtAutoConverterArgs['obj']['can_execute_conversion(byte[])uint64'] | YtAutoConverterArgs['tuple']['can_execute_conversion(byte[])uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.canExecuteConversion(params)))
        resultMappers.push((v) => client.decodeReturnValue('can_execute_conversion(byte[])uint64', v))
        return this
      },
      /**
       * Add a get_user_config()(uint64,uint64,uint64,uint64) method call against the YTAutoConverter contract
       */
      getUserConfig(params: CallParams<YtAutoConverterArgs['obj']['get_user_config()(uint64,uint64,uint64,uint64)'] | YtAutoConverterArgs['tuple']['get_user_config()(uint64,uint64,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getUserConfig(params)))
        resultMappers.push((v) => client.decodeReturnValue('get_user_config()(uint64,uint64,uint64,uint64)', v))
        return this
      },
      /**
       * Add a get_user_balances()(uint64,uint64) method call against the YTAutoConverter contract
       */
      getUserBalances(params: CallParams<YtAutoConverterArgs['obj']['get_user_balances()(uint64,uint64)'] | YtAutoConverterArgs['tuple']['get_user_balances()(uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getUserBalances(params)))
        resultMappers.push((v) => client.decodeReturnValue('get_user_balances()(uint64,uint64)', v))
        return this
      },
      /**
       * Add a get_conversion_info()(uint64,uint64,uint64) method call against the YTAutoConverter contract
       */
      getConversionInfo(params: CallParams<YtAutoConverterArgs['obj']['get_conversion_info()(uint64,uint64,uint64)'] | YtAutoConverterArgs['tuple']['get_conversion_info()(uint64,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getConversionInfo(params)))
        resultMappers.push((v) => client.decodeReturnValue('get_conversion_info()(uint64,uint64,uint64)', v))
        return this
      },
      /**
       * Add a calculate_conversion_output(uint64)(uint64,uint64) method call against the YTAutoConverter contract
       */
      calculateConversionOutput(params: CallParams<YtAutoConverterArgs['obj']['calculate_conversion_output(uint64)(uint64,uint64)'] | YtAutoConverterArgs['tuple']['calculate_conversion_output(uint64)(uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.calculateConversionOutput(params)))
        resultMappers.push((v) => client.decodeReturnValue('calculate_conversion_output(uint64)(uint64,uint64)', v))
        return this
      },
      /**
       * Add a add_maturity(uint64)string method call against the YTAutoConverter contract
       */
      addMaturity(params: CallParams<YtAutoConverterArgs['obj']['add_maturity(uint64)string'] | YtAutoConverterArgs['tuple']['add_maturity(uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.addMaturity(params)))
        resultMappers.push((v) => client.decodeReturnValue('add_maturity(uint64)string', v))
        return this
      },
      /**
       * Add a remove_maturity()string method call against the YTAutoConverter contract
       */
      removeMaturity(params: CallParams<YtAutoConverterArgs['obj']['remove_maturity()string'] | YtAutoConverterArgs['tuple']['remove_maturity()string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.removeMaturity(params)))
        resultMappers.push((v) => client.decodeReturnValue('remove_maturity()string', v))
        return this
      },
      /**
       * Add a set_conversion_fee(uint64)string method call against the YTAutoConverter contract
       */
      setConversionFee(params: CallParams<YtAutoConverterArgs['obj']['set_conversion_fee(uint64)string'] | YtAutoConverterArgs['tuple']['set_conversion_fee(uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.setConversionFee(params)))
        resultMappers.push((v) => client.decodeReturnValue('set_conversion_fee(uint64)string', v))
        return this
      },
      /**
       * Add a pause_converter()string method call against the YTAutoConverter contract
       */
      pauseConverter(params: CallParams<YtAutoConverterArgs['obj']['pause_converter()string'] | YtAutoConverterArgs['tuple']['pause_converter()string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.pauseConverter(params)))
        resultMappers.push((v) => client.decodeReturnValue('pause_converter()string', v))
        return this
      },
      /**
       * Add a unpause_converter()string method call against the YTAutoConverter contract
       */
      unpauseConverter(params: CallParams<YtAutoConverterArgs['obj']['unpause_converter()string'] | YtAutoConverterArgs['tuple']['unpause_converter()string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.unpauseConverter(params)))
        resultMappers.push((v) => client.decodeReturnValue('unpause_converter()string', v))
        return this
      },
      /**
       * Add a emergency_disable_conversion()string method call against the YTAutoConverter contract
       */
      emergencyDisableConversion(params: CallParams<YtAutoConverterArgs['obj']['emergency_disable_conversion()string'] | YtAutoConverterArgs['tuple']['emergency_disable_conversion()string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.emergencyDisableConversion(params)))
        resultMappers.push((v) => client.decodeReturnValue('emergency_disable_conversion()string', v))
        return this
      },
      /**
       * Add a withdraw_pt_tokens(uint64)string method call against the YTAutoConverter contract
       */
      withdrawPtTokens(params: CallParams<YtAutoConverterArgs['obj']['withdraw_pt_tokens(uint64)string'] | YtAutoConverterArgs['tuple']['withdraw_pt_tokens(uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.withdrawPtTokens(params)))
        resultMappers.push((v) => client.decodeReturnValue('withdraw_pt_tokens(uint64)string', v))
        return this
      },
      /**
       * Add a get_ai_recommendation(uint64,uint64)(uint64,string) method call against the YTAutoConverter contract
       */
      getAiRecommendation(params: CallParams<YtAutoConverterArgs['obj']['get_ai_recommendation(uint64,uint64)(uint64,string)'] | YtAutoConverterArgs['tuple']['get_ai_recommendation(uint64,uint64)(uint64,string)']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getAiRecommendation(params)))
        resultMappers.push((v) => client.decodeReturnValue('get_ai_recommendation(uint64,uint64)(uint64,string)', v))
        return this
      },
      /**
       * Add a update_addresses(byte[],byte[],byte[])string method call against the YTAutoConverter contract
       */
      updateAddresses(params: CallParams<YtAutoConverterArgs['obj']['update_addresses(byte[],byte[],byte[])string'] | YtAutoConverterArgs['tuple']['update_addresses(byte[],byte[],byte[])string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.updateAddresses(params)))
        resultMappers.push((v) => client.decodeReturnValue('update_addresses(byte[],byte[],byte[])string', v))
        return this
      },
      /**
       * Add a clear state call to the YTAutoConverter contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as YtAutoConverterComposer
  }
}
export type YtAutoConverterComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the initialize(byte[],byte[],byte[])string ABI method.
   *
   * Initialize the auto converter
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  initialize(params?: CallParams<YtAutoConverterArgs['obj']['initialize(byte[],byte[],byte[])string'] | YtAutoConverterArgs['tuple']['initialize(byte[],byte[],byte[])string']>): YtAutoConverterComposer<[...TReturns, YtAutoConverterReturns['initialize(byte[],byte[],byte[])string'] | undefined]>

  /**
   * Calls the configure_conversion(uint64,uint64,uint64)string ABI method.
   *
   * Configure automatic conversion for user
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  configureConversion(params?: CallParams<YtAutoConverterArgs['obj']['configure_conversion(uint64,uint64,uint64)string'] | YtAutoConverterArgs['tuple']['configure_conversion(uint64,uint64,uint64)string']>): YtAutoConverterComposer<[...TReturns, YtAutoConverterReturns['configure_conversion(uint64,uint64,uint64)string'] | undefined]>

  /**
   * Calls the deposit_yt_tokens(uint64)string ABI method.
   *
   * Deposit YT tokens for conversion (for testing)
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  depositYtTokens(params?: CallParams<YtAutoConverterArgs['obj']['deposit_yt_tokens(uint64)string'] | YtAutoConverterArgs['tuple']['deposit_yt_tokens(uint64)string']>): YtAutoConverterComposer<[...TReturns, YtAutoConverterReturns['deposit_yt_tokens(uint64)string'] | undefined]>

  /**
   * Calls the execute_conversion(byte[],uint64,uint64)string ABI method.
   *
   * Execute YT to PT conversion
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  executeConversion(params?: CallParams<YtAutoConverterArgs['obj']['execute_conversion(byte[],uint64,uint64)string'] | YtAutoConverterArgs['tuple']['execute_conversion(byte[],uint64,uint64)string']>): YtAutoConverterComposer<[...TReturns, YtAutoConverterReturns['execute_conversion(byte[],uint64,uint64)string'] | undefined]>

  /**
   * Calls the can_execute_conversion(byte[])uint64 ABI method.
   *
   * Check if conversion can be executed for user
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  canExecuteConversion(params?: CallParams<YtAutoConverterArgs['obj']['can_execute_conversion(byte[])uint64'] | YtAutoConverterArgs['tuple']['can_execute_conversion(byte[])uint64']>): YtAutoConverterComposer<[...TReturns, YtAutoConverterReturns['can_execute_conversion(byte[])uint64'] | undefined]>

  /**
   * Calls the get_user_config()(uint64,uint64,uint64,uint64) ABI method.
   *
   * Get user's conversion configuration
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getUserConfig(params?: CallParams<YtAutoConverterArgs['obj']['get_user_config()(uint64,uint64,uint64,uint64)'] | YtAutoConverterArgs['tuple']['get_user_config()(uint64,uint64,uint64,uint64)']>): YtAutoConverterComposer<[...TReturns, YtAutoConverterReturns['get_user_config()(uint64,uint64,uint64,uint64)'] | undefined]>

  /**
   * Calls the get_user_balances()(uint64,uint64) ABI method.
   *
   * Get user's YT and PT balances
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getUserBalances(params?: CallParams<YtAutoConverterArgs['obj']['get_user_balances()(uint64,uint64)'] | YtAutoConverterArgs['tuple']['get_user_balances()(uint64,uint64)']>): YtAutoConverterComposer<[...TReturns, YtAutoConverterReturns['get_user_balances()(uint64,uint64)'] | undefined]>

  /**
   * Calls the get_conversion_info()(uint64,uint64,uint64) ABI method.
   *
   * Get conversion information
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getConversionInfo(params?: CallParams<YtAutoConverterArgs['obj']['get_conversion_info()(uint64,uint64,uint64)'] | YtAutoConverterArgs['tuple']['get_conversion_info()(uint64,uint64,uint64)']>): YtAutoConverterComposer<[...TReturns, YtAutoConverterReturns['get_conversion_info()(uint64,uint64,uint64)'] | undefined]>

  /**
   * Calls the calculate_conversion_output(uint64)(uint64,uint64) ABI method.
   *
   * Calculate expected PT output for YT input
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  calculateConversionOutput(params?: CallParams<YtAutoConverterArgs['obj']['calculate_conversion_output(uint64)(uint64,uint64)'] | YtAutoConverterArgs['tuple']['calculate_conversion_output(uint64)(uint64,uint64)']>): YtAutoConverterComposer<[...TReturns, YtAutoConverterReturns['calculate_conversion_output(uint64)(uint64,uint64)'] | undefined]>

  /**
   * Calls the add_maturity(uint64)string ABI method.
   *
   * Add a maturity for conversion
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  addMaturity(params?: CallParams<YtAutoConverterArgs['obj']['add_maturity(uint64)string'] | YtAutoConverterArgs['tuple']['add_maturity(uint64)string']>): YtAutoConverterComposer<[...TReturns, YtAutoConverterReturns['add_maturity(uint64)string'] | undefined]>

  /**
   * Calls the remove_maturity()string ABI method.
   *
   * Remove user's maturity
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  removeMaturity(params?: CallParams<YtAutoConverterArgs['obj']['remove_maturity()string'] | YtAutoConverterArgs['tuple']['remove_maturity()string']>): YtAutoConverterComposer<[...TReturns, YtAutoConverterReturns['remove_maturity()string'] | undefined]>

  /**
   * Calls the set_conversion_fee(uint64)string ABI method.
   *
   * Set conversion fee (admin only)
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setConversionFee(params?: CallParams<YtAutoConverterArgs['obj']['set_conversion_fee(uint64)string'] | YtAutoConverterArgs['tuple']['set_conversion_fee(uint64)string']>): YtAutoConverterComposer<[...TReturns, YtAutoConverterReturns['set_conversion_fee(uint64)string'] | undefined]>

  /**
   * Calls the pause_converter()string ABI method.
   *
   * Pause the converter (admin only)
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  pauseConverter(params?: CallParams<YtAutoConverterArgs['obj']['pause_converter()string'] | YtAutoConverterArgs['tuple']['pause_converter()string']>): YtAutoConverterComposer<[...TReturns, YtAutoConverterReturns['pause_converter()string'] | undefined]>

  /**
   * Calls the unpause_converter()string ABI method.
   *
   * Unpause the converter (admin only)
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  unpauseConverter(params?: CallParams<YtAutoConverterArgs['obj']['unpause_converter()string'] | YtAutoConverterArgs['tuple']['unpause_converter()string']>): YtAutoConverterComposer<[...TReturns, YtAutoConverterReturns['unpause_converter()string'] | undefined]>

  /**
   * Calls the emergency_disable_conversion()string ABI method.
   *
   * Emergency disable conversion for user
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  emergencyDisableConversion(params?: CallParams<YtAutoConverterArgs['obj']['emergency_disable_conversion()string'] | YtAutoConverterArgs['tuple']['emergency_disable_conversion()string']>): YtAutoConverterComposer<[...TReturns, YtAutoConverterReturns['emergency_disable_conversion()string'] | undefined]>

  /**
   * Calls the withdraw_pt_tokens(uint64)string ABI method.
   *
   * Withdraw PT tokens
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  withdrawPtTokens(params?: CallParams<YtAutoConverterArgs['obj']['withdraw_pt_tokens(uint64)string'] | YtAutoConverterArgs['tuple']['withdraw_pt_tokens(uint64)string']>): YtAutoConverterComposer<[...TReturns, YtAutoConverterReturns['withdraw_pt_tokens(uint64)string'] | undefined]>

  /**
   * Calls the get_ai_recommendation(uint64,uint64)(uint64,string) ABI method.
   *
   * Get AI recommendation for conversion (simplified)
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getAiRecommendation(params?: CallParams<YtAutoConverterArgs['obj']['get_ai_recommendation(uint64,uint64)(uint64,string)'] | YtAutoConverterArgs['tuple']['get_ai_recommendation(uint64,uint64)(uint64,string)']>): YtAutoConverterComposer<[...TReturns, YtAutoConverterReturns['get_ai_recommendation(uint64,uint64)(uint64,string)'] | undefined]>

  /**
   * Calls the update_addresses(byte[],byte[],byte[])string ABI method.
   *
   * Update contract addresses (admin only)
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  updateAddresses(params?: CallParams<YtAutoConverterArgs['obj']['update_addresses(byte[],byte[],byte[])string'] | YtAutoConverterArgs['tuple']['update_addresses(byte[],byte[],byte[])string']>): YtAutoConverterComposer<[...TReturns, YtAutoConverterReturns['update_addresses(byte[],byte[],byte[])string'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the YTAutoConverter smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): YtAutoConverterComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): YtAutoConverterComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<YtAutoConverterComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<YtAutoConverterComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<YtAutoConverterComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<YtAutoConverterComposerResults<TReturns>>
}
export type YtAutoConverterComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

