/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { type AlgorandClient } from '@algorandfoundation/algokit-utils/types/algorand-client'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"name":"PTToken","structs":{},"methods":[{"name":"initialize","args":[{"type":"string","name":"name"},{"type":"string","name":"symbol"},{"type":"uint64","name":"maturity_timestamp"}],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Initialize PT token with maturity","events":[],"recommendations":{}},{"name":"mint","args":[{"type":"byte[]","name":"to"},{"type":"uint64","name":"amount"}],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Mint PT tokens to an address (owner only)","events":[],"recommendations":{}},{"name":"burn","args":[{"type":"uint64","name":"amount"}],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Burn PT tokens from sender's balance","events":[],"recommendations":{}},{"name":"transfer","args":[{"type":"byte[]","name":"to"},{"type":"uint64","name":"amount"}],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Transfer PT tokens to another address","events":[],"recommendations":{}},{"name":"balance_of","args":[{"type":"byte[]","name":"account"}],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"desc":"Get balance of an account","events":[],"recommendations":{}},{"name":"get_total_supply","args":[],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"desc":"Get total supply of PT tokens","events":[],"recommendations":{}},{"name":"get_maturity","args":[],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"desc":"Get maturity timestamp","events":[],"recommendations":{}},{"name":"is_mature","args":[],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"desc":"Check if token has reached maturity","events":[],"recommendations":{}},{"name":"get_token_info","args":[],"returns":{"type":"(string,string,uint64,uint64)"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"desc":"Get token information","events":[],"recommendations":{}},{"name":"approve","args":[{"type":"byte[]","name":"spender"},{"type":"uint64","name":"amount"}],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Approve spender to spend tokens on behalf of sender","events":[],"recommendations":{}},{"name":"get_allowance","args":[{"type":"byte[]","name":"owner"},{"type":"byte[]","name":"spender"}],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"desc":"Get allowance for spender","events":[],"recommendations":{}},{"name":"transfer_from","args":[{"type":"byte[]","name":"from_addr"},{"type":"byte[]","name":"to"},{"type":"uint64","name":"amount"}],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Transfer tokens from one address to another using allowance","events":[],"recommendations":{}},{"name":"update_owner","args":[{"type":"byte[]","name":"new_owner"}],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Update contract owner (current owner only)","events":[],"recommendations":{}}],"arcs":[22,28],"desc":"Principal Token contract for yield tokenization","networks":{},"state":{"schema":{"global":{"ints":3,"bytes":3},"local":{"ints":2,"bytes":0}},"keys":{"global":{"owner":{"keyType":"AVMString","valueType":"AVMBytes","key":"b3duZXI="},"name":{"keyType":"AVMString","valueType":"AVMString","key":"bmFtZQ=="},"symbol":{"keyType":"AVMString","valueType":"AVMString","key":"c3ltYm9s"},"maturity":{"keyType":"AVMString","valueType":"AVMUint64","key":"bWF0dXJpdHk="},"total_supply":{"keyType":"AVMString","valueType":"AVMUint64","key":"dG90YWxfc3VwcGx5"},"decimals":{"keyType":"AVMString","valueType":"AVMUint64","key":"ZGVjaW1hbHM="}},"local":{"balance":{"keyType":"AVMString","valueType":"AVMUint64","key":"YmFsYW5jZQ=="},"allowance":{"keyType":"AVMString","valueType":"AVMUint64","key":"YWxsb3dhbmNl"}},"box":{}},"maps":{"global":{},"local":{},"box":{}}},"bareActions":{"create":["NoOp"],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"pc":[686,784,887,1170],"errorMessage":"Amount must be positive"},{"pc":[1182],"errorMessage":"Insufficient allowance"},{"pc":[795,898,1193],"errorMessage":"Insufficient balance"},{"pc":[568],"errorMessage":"Maturity must be in future"},{"pc":[187,217,257,286,320,336,353,370,387,410,444,472,506],"errorMessage":"OnCompletion is not NoOp"},{"pc":[562],"errorMessage":"Only creator can initialize"},{"pc":[683],"errorMessage":"Only owner can mint"},{"pc":[1299],"errorMessage":"Only owner can update"},{"pc":[551],"errorMessage":"can only call when creating"},{"pc":[190,220,260,289,323,339,356,373,390,413,447,475,509],"errorMessage":"can only call when not creating"},{"pc":[1163,1177],"errorMessage":"check self.allowance exists for account"},{"pc":[702,790,893,993,1188],"errorMessage":"check self.balance exists for account"},{"pc":[1051],"errorMessage":"check self.decimals exists"},{"pc":[1004,1012],"errorMessage":"check self.maturity exists"},{"pc":[1025],"errorMessage":"check self.name exists"},{"pc":[681,1297],"errorMessage":"check self.owner exists"},{"pc":[1038],"errorMessage":"check self.symbol exists"},{"pc":[690,808,998,1056],"errorMessage":"check self.total_supply exists"}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"},"byteCode":{"approval":"CiACAAEmCQQVH3x1B2JhbGFuY2UMdG90YWxfc3VwcGx5BW93bmVyCWFsbG93YW5jZQhtYXR1cml0eQRuYW1lBnN5bWJvbAhkZWNpbWFsczEbQQHLgg0ES5htOgR5LaHKBHI8FTsEe19vVwRgpVzmBEaQk1UETzc+iASErFitBEZjr9EEWx+X/gQqFcmIBMlV/YMEvu7mGTYaAI4NAUEBHwEDAOEAygC5AKgAlwCHAGUASAAgAAIiQzEZFEQxGEQ2GgFXAgCIBEFJFRZXBgJMUChMULAjQzEZFEQxGEQ2GgFXAgA2GgJXAgA2GgMXiAOdSRUWVwYCTFAoTFCwI0MxGRREMRhENhoBVwIANhoCVwIAiANuFihMULAjQzEZFEQxGEQ2GgFXAgA2GgIXiAMOSRUWVwYCTFAoTFCwI0MxGRREMRhEiAK2KExQsCNDMRkURDEYRIgClxYoTFCwI0MxGRREMRhEiAKAFihMULAjQzEZFEQxGESIAmoWKExQsCNDMRkURDEYRDYaAVcCAIgCSRYoTFCwI0MxGRREMRhENhoBVwIANhoCF4gBx0kVFlcGAkxQKExQsCNDMRkURDEYRDYaAReIAURJFRZXBgJMUChMULAjQzEZFEQxGEQ2GgFXAgA2GgIXiAC4SRUWVwYCTFAoTFCwI0MxGRREMRhENhoBVwIANhoCVwIANhoDF4gAGUkVFlcGAkxQKExQsCNDMRlA/pIxGBREI0OKAwExADIJEkSL/zIHDUQrMQBnJwaL/WcnB4v+ZycFi/9nKiJnJwiBCGeL/xaAIVBUIFRva2VuIGluaXRpYWxpemVkIC0gTWF0dXJpdHk6IExQsIAhUFQgVG9rZW4gaW5pdGlhbGl6ZWQgc3VjY2Vzc2Z1bGx5iYoCATEAIitlRBJEi/9EIiplRIv/CCpMZzEAIiljRIv/CDEAKU8CZov/FoAbUFQgdG9rZW5zIG1pbnRlZCAtIEFtb3VudDogTFCwgB1QVCB0b2tlbnMgbWludGVkIHN1Y2Nlc3NmdWxseYmKAQGL/0QxACIpY0RJi/8PRIv/CTEAKU8CZiIqZUSL/wkqTGeL/xaAG1BUIHRva2VucyBidXJuZWQgLSBBbW91bnQ6IExQsIAdUFQgdG9rZW5zIGJ1cm5lZCBzdWNjZXNzZnVsbHmJigIBi/9EMQAiKWNESYv/D0SL/wkxAClPAmaL/xaAIFBUIHRva2VucyB0cmFuc2ZlcnJlZCAtIEFtb3VudDogTFCwgCJQVCB0b2tlbnMgdHJhbnNmZXJyZWQgc3VjY2Vzc2Z1bGx5iYoBATEAIiljRIkiKmVEiSInBWVEiTIHIicFZUQPQQACI4kiiSInBmVESRUWVwYCTFAiJwdlREkVFlcGAkxQIicIZUQWIiplRBZLAxWBFAgWVwYCgAIAFExQTwJQTFBPAlBMUImKAgExACcEi/9mi/8WgBdBcHByb3ZhbCBzZXQgLSBBbW91bnQ6IExQsIAZQXBwcm92YWwgc2V0IHN1Y2Nlc3NmdWxseYmKAgExACInBGNEiYoDAYv/RDEAIicEY0RJi/8PRDEAIiljREmL/w9Ei/8JMQApTwJmi/8JMQAnBE8CZov/FoAiVG9rZW5zIHRyYW5zZmVycmVkIGZyb20gLSBBbW91bnQ6IExQsIAfVG9rZW5zIHRyYW5zZmVycmVkIHN1Y2Nlc3NmdWxseYmKAQExACIrZUQSRCuL/2eADU93bmVyIHVwZGF0ZWSwgBpPd25lciB1cGRhdGVkIHN1Y2Nlc3NmdWxseYk=","clear":"CoEBQw=="},"compilerInfo":{"compiler":"puya","compilerVersion":{"major":4,"minor":10,"patch":0}},"events":[],"templateVariables":{}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


/**
 * The argument types for the PtToken contract
 */
export type PtTokenArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'initialize(string,string,uint64)string': {
      name: string
      symbol: string
      maturityTimestamp: bigint | number
    }
    'mint(byte[],uint64)string': {
      to: Uint8Array
      amount: bigint | number
    }
    'burn(uint64)string': {
      amount: bigint | number
    }
    'transfer(byte[],uint64)string': {
      to: Uint8Array
      amount: bigint | number
    }
    'balance_of(byte[])uint64': {
      account: Uint8Array
    }
    'get_total_supply()uint64': Record<string, never>
    'get_maturity()uint64': Record<string, never>
    'is_mature()uint64': Record<string, never>
    'get_token_info()(string,string,uint64,uint64)': Record<string, never>
    'approve(byte[],uint64)string': {
      spender: Uint8Array
      amount: bigint | number
    }
    'get_allowance(byte[],byte[])uint64': {
      owner: Uint8Array
      spender: Uint8Array
    }
    'transfer_from(byte[],byte[],uint64)string': {
      fromAddr: Uint8Array
      to: Uint8Array
      amount: bigint | number
    }
    'update_owner(byte[])string': {
      newOwner: Uint8Array
    }
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'initialize(string,string,uint64)string': [name: string, symbol: string, maturityTimestamp: bigint | number]
    'mint(byte[],uint64)string': [to: Uint8Array, amount: bigint | number]
    'burn(uint64)string': [amount: bigint | number]
    'transfer(byte[],uint64)string': [to: Uint8Array, amount: bigint | number]
    'balance_of(byte[])uint64': [account: Uint8Array]
    'get_total_supply()uint64': []
    'get_maturity()uint64': []
    'is_mature()uint64': []
    'get_token_info()(string,string,uint64,uint64)': []
    'approve(byte[],uint64)string': [spender: Uint8Array, amount: bigint | number]
    'get_allowance(byte[],byte[])uint64': [owner: Uint8Array, spender: Uint8Array]
    'transfer_from(byte[],byte[],uint64)string': [fromAddr: Uint8Array, to: Uint8Array, amount: bigint | number]
    'update_owner(byte[])string': [newOwner: Uint8Array]
  }
}

/**
 * The return type for each method
 */
export type PtTokenReturns = {
  'initialize(string,string,uint64)string': string
  'mint(byte[],uint64)string': string
  'burn(uint64)string': string
  'transfer(byte[],uint64)string': string
  'balance_of(byte[])uint64': bigint
  'get_total_supply()uint64': bigint
  'get_maturity()uint64': bigint
  'is_mature()uint64': bigint
  'get_token_info()(string,string,uint64,uint64)': [string, string, bigint, bigint]
  'approve(byte[],uint64)string': string
  'get_allowance(byte[],byte[])uint64': bigint
  'transfer_from(byte[],byte[],uint64)string': string
  'update_owner(byte[])string': string
}

/**
 * Defines the types of available calls and state of the PtToken smart contract.
 */
export type PtTokenTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'initialize(string,string,uint64)string' | 'initialize', {
      argsObj: PtTokenArgs['obj']['initialize(string,string,uint64)string']
      argsTuple: PtTokenArgs['tuple']['initialize(string,string,uint64)string']
      returns: PtTokenReturns['initialize(string,string,uint64)string']
    }>
    & Record<'mint(byte[],uint64)string' | 'mint', {
      argsObj: PtTokenArgs['obj']['mint(byte[],uint64)string']
      argsTuple: PtTokenArgs['tuple']['mint(byte[],uint64)string']
      returns: PtTokenReturns['mint(byte[],uint64)string']
    }>
    & Record<'burn(uint64)string' | 'burn', {
      argsObj: PtTokenArgs['obj']['burn(uint64)string']
      argsTuple: PtTokenArgs['tuple']['burn(uint64)string']
      returns: PtTokenReturns['burn(uint64)string']
    }>
    & Record<'transfer(byte[],uint64)string' | 'transfer', {
      argsObj: PtTokenArgs['obj']['transfer(byte[],uint64)string']
      argsTuple: PtTokenArgs['tuple']['transfer(byte[],uint64)string']
      returns: PtTokenReturns['transfer(byte[],uint64)string']
    }>
    & Record<'balance_of(byte[])uint64' | 'balance_of', {
      argsObj: PtTokenArgs['obj']['balance_of(byte[])uint64']
      argsTuple: PtTokenArgs['tuple']['balance_of(byte[])uint64']
      returns: PtTokenReturns['balance_of(byte[])uint64']
    }>
    & Record<'get_total_supply()uint64' | 'get_total_supply', {
      argsObj: PtTokenArgs['obj']['get_total_supply()uint64']
      argsTuple: PtTokenArgs['tuple']['get_total_supply()uint64']
      returns: PtTokenReturns['get_total_supply()uint64']
    }>
    & Record<'get_maturity()uint64' | 'get_maturity', {
      argsObj: PtTokenArgs['obj']['get_maturity()uint64']
      argsTuple: PtTokenArgs['tuple']['get_maturity()uint64']
      returns: PtTokenReturns['get_maturity()uint64']
    }>
    & Record<'is_mature()uint64' | 'is_mature', {
      argsObj: PtTokenArgs['obj']['is_mature()uint64']
      argsTuple: PtTokenArgs['tuple']['is_mature()uint64']
      returns: PtTokenReturns['is_mature()uint64']
    }>
    & Record<'get_token_info()(string,string,uint64,uint64)' | 'get_token_info', {
      argsObj: PtTokenArgs['obj']['get_token_info()(string,string,uint64,uint64)']
      argsTuple: PtTokenArgs['tuple']['get_token_info()(string,string,uint64,uint64)']
      returns: PtTokenReturns['get_token_info()(string,string,uint64,uint64)']
    }>
    & Record<'approve(byte[],uint64)string' | 'approve', {
      argsObj: PtTokenArgs['obj']['approve(byte[],uint64)string']
      argsTuple: PtTokenArgs['tuple']['approve(byte[],uint64)string']
      returns: PtTokenReturns['approve(byte[],uint64)string']
    }>
    & Record<'get_allowance(byte[],byte[])uint64' | 'get_allowance', {
      argsObj: PtTokenArgs['obj']['get_allowance(byte[],byte[])uint64']
      argsTuple: PtTokenArgs['tuple']['get_allowance(byte[],byte[])uint64']
      returns: PtTokenReturns['get_allowance(byte[],byte[])uint64']
    }>
    & Record<'transfer_from(byte[],byte[],uint64)string' | 'transfer_from', {
      argsObj: PtTokenArgs['obj']['transfer_from(byte[],byte[],uint64)string']
      argsTuple: PtTokenArgs['tuple']['transfer_from(byte[],byte[],uint64)string']
      returns: PtTokenReturns['transfer_from(byte[],byte[],uint64)string']
    }>
    & Record<'update_owner(byte[])string' | 'update_owner', {
      argsObj: PtTokenArgs['obj']['update_owner(byte[])string']
      argsTuple: PtTokenArgs['tuple']['update_owner(byte[])string']
      returns: PtTokenReturns['update_owner(byte[])string']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        owner: BinaryState
        name: string
        symbol: string
        maturity: bigint
        totalSupply: bigint
        decimals: bigint
      }
      maps: {}
    }
    local: {
      keys: {
        balance: bigint
        allowance: bigint
      }
      maps: {}
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type PtTokenSignatures = keyof PtTokenTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type PtTokenNonVoidMethodSignatures = keyof PtTokenTypes['methods'] extends infer T ? T extends keyof PtTokenTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the PtToken smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends PtTokenSignatures> = PtTokenTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the PtToken smart contract to the method's return type
 */
export type MethodReturn<TSignature extends PtTokenSignatures> = PtTokenTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = PtTokenTypes['state']['global']['keys']

/**
 * Defines the shape of the keyed local state of the application.
 */
export type LocalKeysState = PtTokenTypes['state']['local']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type PtTokenCreateCallParams =
  | Expand<AppClientBareCallParams & {method?: never} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type PtTokenDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: PtTokenCreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the PtToken smart contract
 */
export abstract class PtTokenParamsFactory {
  /**
   * Constructs a no op call for the initialize(string,string,uint64)string ABI method
   *
   * Initialize PT token with maturity
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static initialize(params: CallParams<PtTokenArgs['obj']['initialize(string,string,uint64)string'] | PtTokenArgs['tuple']['initialize(string,string,uint64)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'initialize(string,string,uint64)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.name, params.args.symbol, params.args.maturityTimestamp],
    }
  }
  /**
   * Constructs a no op call for the mint(byte[],uint64)string ABI method
   *
   * Mint PT tokens to an address (owner only)
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static mint(params: CallParams<PtTokenArgs['obj']['mint(byte[],uint64)string'] | PtTokenArgs['tuple']['mint(byte[],uint64)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'mint(byte[],uint64)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.to, params.args.amount],
    }
  }
  /**
   * Constructs a no op call for the burn(uint64)string ABI method
   *
   * Burn PT tokens from sender's balance
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static burn(params: CallParams<PtTokenArgs['obj']['burn(uint64)string'] | PtTokenArgs['tuple']['burn(uint64)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'burn(uint64)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.amount],
    }
  }
  /**
   * Constructs a no op call for the transfer(byte[],uint64)string ABI method
   *
   * Transfer PT tokens to another address
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static transfer(params: CallParams<PtTokenArgs['obj']['transfer(byte[],uint64)string'] | PtTokenArgs['tuple']['transfer(byte[],uint64)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'transfer(byte[],uint64)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.to, params.args.amount],
    }
  }
  /**
   * Constructs a no op call for the balance_of(byte[])uint64 ABI method
   *
   * Get balance of an account
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static balanceOf(params: CallParams<PtTokenArgs['obj']['balance_of(byte[])uint64'] | PtTokenArgs['tuple']['balance_of(byte[])uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'balance_of(byte[])uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.account],
    }
  }
  /**
   * Constructs a no op call for the get_total_supply()uint64 ABI method
   *
   * Get total supply of PT tokens
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getTotalSupply(params: CallParams<PtTokenArgs['obj']['get_total_supply()uint64'] | PtTokenArgs['tuple']['get_total_supply()uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'get_total_supply()uint64' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the get_maturity()uint64 ABI method
   *
   * Get maturity timestamp
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getMaturity(params: CallParams<PtTokenArgs['obj']['get_maturity()uint64'] | PtTokenArgs['tuple']['get_maturity()uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'get_maturity()uint64' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the is_mature()uint64 ABI method
   *
   * Check if token has reached maturity
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static isMature(params: CallParams<PtTokenArgs['obj']['is_mature()uint64'] | PtTokenArgs['tuple']['is_mature()uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'is_mature()uint64' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the get_token_info()(string,string,uint64,uint64) ABI method
   *
   * Get token information
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getTokenInfo(params: CallParams<PtTokenArgs['obj']['get_token_info()(string,string,uint64,uint64)'] | PtTokenArgs['tuple']['get_token_info()(string,string,uint64,uint64)']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'get_token_info()(string,string,uint64,uint64)' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the approve(byte[],uint64)string ABI method
   *
   * Approve spender to spend tokens on behalf of sender
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static approve(params: CallParams<PtTokenArgs['obj']['approve(byte[],uint64)string'] | PtTokenArgs['tuple']['approve(byte[],uint64)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'approve(byte[],uint64)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.spender, params.args.amount],
    }
  }
  /**
   * Constructs a no op call for the get_allowance(byte[],byte[])uint64 ABI method
   *
   * Get allowance for spender
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getAllowance(params: CallParams<PtTokenArgs['obj']['get_allowance(byte[],byte[])uint64'] | PtTokenArgs['tuple']['get_allowance(byte[],byte[])uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'get_allowance(byte[],byte[])uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.owner, params.args.spender],
    }
  }
  /**
   * Constructs a no op call for the transfer_from(byte[],byte[],uint64)string ABI method
   *
   * Transfer tokens from one address to another using allowance
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static transferFrom(params: CallParams<PtTokenArgs['obj']['transfer_from(byte[],byte[],uint64)string'] | PtTokenArgs['tuple']['transfer_from(byte[],byte[],uint64)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'transfer_from(byte[],byte[],uint64)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.fromAddr, params.args.to, params.args.amount],
    }
  }
  /**
   * Constructs a no op call for the update_owner(byte[])string ABI method
   *
   * Update contract owner (current owner only)
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static updateOwner(params: CallParams<PtTokenArgs['obj']['update_owner(byte[])string'] | PtTokenArgs['tuple']['update_owner(byte[])string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'update_owner(byte[])string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.newOwner],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the PTToken smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class PtTokenFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `PtTokenFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClient {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new PtTokenClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new PtTokenClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the PTToken smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: PtTokenDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
    })
    return { result: result.result, appClient: new PtTokenClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the PTToken smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The params for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.params.bare.create(params)
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the PTToken smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The transaction for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.createTransaction.bare.create(params)
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the PTToken smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The create result
       */
      bare: async (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        const result = await this.appFactory.send.bare.create(params)
        return { result: result.result, appClient: new PtTokenClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the PTToken smart contract
 */
export class PtTokenClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `PtTokenClient`
   *
   * @param appClient An `AppClient` instance which has been created with the PtToken app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `PtTokenClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends PtTokenNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `PtTokenClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<PtTokenClient> {
    return new PtTokenClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `PtTokenClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<PtTokenClient> {
    return new PtTokenClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClient {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the PTToken smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the PTToken smart contract using the `initialize(string,string,uint64)string` ABI method.
     *
     * Initialize PT token with maturity
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    initialize: (params: CallParams<PtTokenArgs['obj']['initialize(string,string,uint64)string'] | PtTokenArgs['tuple']['initialize(string,string,uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(PtTokenParamsFactory.initialize(params))
    },

    /**
     * Makes a call to the PTToken smart contract using the `mint(byte[],uint64)string` ABI method.
     *
     * Mint PT tokens to an address (owner only)
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    mint: (params: CallParams<PtTokenArgs['obj']['mint(byte[],uint64)string'] | PtTokenArgs['tuple']['mint(byte[],uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(PtTokenParamsFactory.mint(params))
    },

    /**
     * Makes a call to the PTToken smart contract using the `burn(uint64)string` ABI method.
     *
     * Burn PT tokens from sender's balance
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    burn: (params: CallParams<PtTokenArgs['obj']['burn(uint64)string'] | PtTokenArgs['tuple']['burn(uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(PtTokenParamsFactory.burn(params))
    },

    /**
     * Makes a call to the PTToken smart contract using the `transfer(byte[],uint64)string` ABI method.
     *
     * Transfer PT tokens to another address
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    transfer: (params: CallParams<PtTokenArgs['obj']['transfer(byte[],uint64)string'] | PtTokenArgs['tuple']['transfer(byte[],uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(PtTokenParamsFactory.transfer(params))
    },

    /**
     * Makes a call to the PTToken smart contract using the `balance_of(byte[])uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Get balance of an account
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    balanceOf: (params: CallParams<PtTokenArgs['obj']['balance_of(byte[])uint64'] | PtTokenArgs['tuple']['balance_of(byte[])uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(PtTokenParamsFactory.balanceOf(params))
    },

    /**
     * Makes a call to the PTToken smart contract using the `get_total_supply()uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Get total supply of PT tokens
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getTotalSupply: (params: CallParams<PtTokenArgs['obj']['get_total_supply()uint64'] | PtTokenArgs['tuple']['get_total_supply()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(PtTokenParamsFactory.getTotalSupply(params))
    },

    /**
     * Makes a call to the PTToken smart contract using the `get_maturity()uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Get maturity timestamp
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getMaturity: (params: CallParams<PtTokenArgs['obj']['get_maturity()uint64'] | PtTokenArgs['tuple']['get_maturity()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(PtTokenParamsFactory.getMaturity(params))
    },

    /**
     * Makes a call to the PTToken smart contract using the `is_mature()uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Check if token has reached maturity
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    isMature: (params: CallParams<PtTokenArgs['obj']['is_mature()uint64'] | PtTokenArgs['tuple']['is_mature()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(PtTokenParamsFactory.isMature(params))
    },

    /**
     * Makes a call to the PTToken smart contract using the `get_token_info()(string,string,uint64,uint64)` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Get token information
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getTokenInfo: (params: CallParams<PtTokenArgs['obj']['get_token_info()(string,string,uint64,uint64)'] | PtTokenArgs['tuple']['get_token_info()(string,string,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(PtTokenParamsFactory.getTokenInfo(params))
    },

    /**
     * Makes a call to the PTToken smart contract using the `approve(byte[],uint64)string` ABI method.
     *
     * Approve spender to spend tokens on behalf of sender
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    approve: (params: CallParams<PtTokenArgs['obj']['approve(byte[],uint64)string'] | PtTokenArgs['tuple']['approve(byte[],uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(PtTokenParamsFactory.approve(params))
    },

    /**
     * Makes a call to the PTToken smart contract using the `get_allowance(byte[],byte[])uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Get allowance for spender
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getAllowance: (params: CallParams<PtTokenArgs['obj']['get_allowance(byte[],byte[])uint64'] | PtTokenArgs['tuple']['get_allowance(byte[],byte[])uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(PtTokenParamsFactory.getAllowance(params))
    },

    /**
     * Makes a call to the PTToken smart contract using the `transfer_from(byte[],byte[],uint64)string` ABI method.
     *
     * Transfer tokens from one address to another using allowance
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    transferFrom: (params: CallParams<PtTokenArgs['obj']['transfer_from(byte[],byte[],uint64)string'] | PtTokenArgs['tuple']['transfer_from(byte[],byte[],uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(PtTokenParamsFactory.transferFrom(params))
    },

    /**
     * Makes a call to the PTToken smart contract using the `update_owner(byte[])string` ABI method.
     *
     * Update contract owner (current owner only)
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    updateOwner: (params: CallParams<PtTokenArgs['obj']['update_owner(byte[])string'] | PtTokenArgs['tuple']['update_owner(byte[])string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(PtTokenParamsFactory.updateOwner(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the PTToken smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the PTToken smart contract using the `initialize(string,string,uint64)string` ABI method.
     *
     * Initialize PT token with maturity
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    initialize: (params: CallParams<PtTokenArgs['obj']['initialize(string,string,uint64)string'] | PtTokenArgs['tuple']['initialize(string,string,uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(PtTokenParamsFactory.initialize(params))
    },

    /**
     * Makes a call to the PTToken smart contract using the `mint(byte[],uint64)string` ABI method.
     *
     * Mint PT tokens to an address (owner only)
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    mint: (params: CallParams<PtTokenArgs['obj']['mint(byte[],uint64)string'] | PtTokenArgs['tuple']['mint(byte[],uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(PtTokenParamsFactory.mint(params))
    },

    /**
     * Makes a call to the PTToken smart contract using the `burn(uint64)string` ABI method.
     *
     * Burn PT tokens from sender's balance
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    burn: (params: CallParams<PtTokenArgs['obj']['burn(uint64)string'] | PtTokenArgs['tuple']['burn(uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(PtTokenParamsFactory.burn(params))
    },

    /**
     * Makes a call to the PTToken smart contract using the `transfer(byte[],uint64)string` ABI method.
     *
     * Transfer PT tokens to another address
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    transfer: (params: CallParams<PtTokenArgs['obj']['transfer(byte[],uint64)string'] | PtTokenArgs['tuple']['transfer(byte[],uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(PtTokenParamsFactory.transfer(params))
    },

    /**
     * Makes a call to the PTToken smart contract using the `balance_of(byte[])uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Get balance of an account
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    balanceOf: (params: CallParams<PtTokenArgs['obj']['balance_of(byte[])uint64'] | PtTokenArgs['tuple']['balance_of(byte[])uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(PtTokenParamsFactory.balanceOf(params))
    },

    /**
     * Makes a call to the PTToken smart contract using the `get_total_supply()uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Get total supply of PT tokens
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getTotalSupply: (params: CallParams<PtTokenArgs['obj']['get_total_supply()uint64'] | PtTokenArgs['tuple']['get_total_supply()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(PtTokenParamsFactory.getTotalSupply(params))
    },

    /**
     * Makes a call to the PTToken smart contract using the `get_maturity()uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Get maturity timestamp
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getMaturity: (params: CallParams<PtTokenArgs['obj']['get_maturity()uint64'] | PtTokenArgs['tuple']['get_maturity()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(PtTokenParamsFactory.getMaturity(params))
    },

    /**
     * Makes a call to the PTToken smart contract using the `is_mature()uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Check if token has reached maturity
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    isMature: (params: CallParams<PtTokenArgs['obj']['is_mature()uint64'] | PtTokenArgs['tuple']['is_mature()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(PtTokenParamsFactory.isMature(params))
    },

    /**
     * Makes a call to the PTToken smart contract using the `get_token_info()(string,string,uint64,uint64)` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Get token information
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getTokenInfo: (params: CallParams<PtTokenArgs['obj']['get_token_info()(string,string,uint64,uint64)'] | PtTokenArgs['tuple']['get_token_info()(string,string,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(PtTokenParamsFactory.getTokenInfo(params))
    },

    /**
     * Makes a call to the PTToken smart contract using the `approve(byte[],uint64)string` ABI method.
     *
     * Approve spender to spend tokens on behalf of sender
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    approve: (params: CallParams<PtTokenArgs['obj']['approve(byte[],uint64)string'] | PtTokenArgs['tuple']['approve(byte[],uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(PtTokenParamsFactory.approve(params))
    },

    /**
     * Makes a call to the PTToken smart contract using the `get_allowance(byte[],byte[])uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Get allowance for spender
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getAllowance: (params: CallParams<PtTokenArgs['obj']['get_allowance(byte[],byte[])uint64'] | PtTokenArgs['tuple']['get_allowance(byte[],byte[])uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(PtTokenParamsFactory.getAllowance(params))
    },

    /**
     * Makes a call to the PTToken smart contract using the `transfer_from(byte[],byte[],uint64)string` ABI method.
     *
     * Transfer tokens from one address to another using allowance
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    transferFrom: (params: CallParams<PtTokenArgs['obj']['transfer_from(byte[],byte[],uint64)string'] | PtTokenArgs['tuple']['transfer_from(byte[],byte[],uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(PtTokenParamsFactory.transferFrom(params))
    },

    /**
     * Makes a call to the PTToken smart contract using the `update_owner(byte[])string` ABI method.
     *
     * Update contract owner (current owner only)
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    updateOwner: (params: CallParams<PtTokenArgs['obj']['update_owner(byte[])string'] | PtTokenArgs['tuple']['update_owner(byte[])string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(PtTokenParamsFactory.updateOwner(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the PTToken smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the PTToken smart contract using the `initialize(string,string,uint64)string` ABI method.
     *
     * Initialize PT token with maturity
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    initialize: async (params: CallParams<PtTokenArgs['obj']['initialize(string,string,uint64)string'] | PtTokenArgs['tuple']['initialize(string,string,uint64)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(PtTokenParamsFactory.initialize(params))
      return {...result, return: result.return as unknown as (undefined | PtTokenReturns['initialize(string,string,uint64)string'])}
    },

    /**
     * Makes a call to the PTToken smart contract using the `mint(byte[],uint64)string` ABI method.
     *
     * Mint PT tokens to an address (owner only)
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    mint: async (params: CallParams<PtTokenArgs['obj']['mint(byte[],uint64)string'] | PtTokenArgs['tuple']['mint(byte[],uint64)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(PtTokenParamsFactory.mint(params))
      return {...result, return: result.return as unknown as (undefined | PtTokenReturns['mint(byte[],uint64)string'])}
    },

    /**
     * Makes a call to the PTToken smart contract using the `burn(uint64)string` ABI method.
     *
     * Burn PT tokens from sender's balance
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    burn: async (params: CallParams<PtTokenArgs['obj']['burn(uint64)string'] | PtTokenArgs['tuple']['burn(uint64)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(PtTokenParamsFactory.burn(params))
      return {...result, return: result.return as unknown as (undefined | PtTokenReturns['burn(uint64)string'])}
    },

    /**
     * Makes a call to the PTToken smart contract using the `transfer(byte[],uint64)string` ABI method.
     *
     * Transfer PT tokens to another address
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    transfer: async (params: CallParams<PtTokenArgs['obj']['transfer(byte[],uint64)string'] | PtTokenArgs['tuple']['transfer(byte[],uint64)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(PtTokenParamsFactory.transfer(params))
      return {...result, return: result.return as unknown as (undefined | PtTokenReturns['transfer(byte[],uint64)string'])}
    },

    /**
     * Makes a call to the PTToken smart contract using the `balance_of(byte[])uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Get balance of an account
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    balanceOf: async (params: CallParams<PtTokenArgs['obj']['balance_of(byte[])uint64'] | PtTokenArgs['tuple']['balance_of(byte[])uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(PtTokenParamsFactory.balanceOf(params))
      return {...result, return: result.return as unknown as (undefined | PtTokenReturns['balance_of(byte[])uint64'])}
    },

    /**
     * Makes a call to the PTToken smart contract using the `get_total_supply()uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Get total supply of PT tokens
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getTotalSupply: async (params: CallParams<PtTokenArgs['obj']['get_total_supply()uint64'] | PtTokenArgs['tuple']['get_total_supply()uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(PtTokenParamsFactory.getTotalSupply(params))
      return {...result, return: result.return as unknown as (undefined | PtTokenReturns['get_total_supply()uint64'])}
    },

    /**
     * Makes a call to the PTToken smart contract using the `get_maturity()uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Get maturity timestamp
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getMaturity: async (params: CallParams<PtTokenArgs['obj']['get_maturity()uint64'] | PtTokenArgs['tuple']['get_maturity()uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(PtTokenParamsFactory.getMaturity(params))
      return {...result, return: result.return as unknown as (undefined | PtTokenReturns['get_maturity()uint64'])}
    },

    /**
     * Makes a call to the PTToken smart contract using the `is_mature()uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Check if token has reached maturity
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    isMature: async (params: CallParams<PtTokenArgs['obj']['is_mature()uint64'] | PtTokenArgs['tuple']['is_mature()uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(PtTokenParamsFactory.isMature(params))
      return {...result, return: result.return as unknown as (undefined | PtTokenReturns['is_mature()uint64'])}
    },

    /**
     * Makes a call to the PTToken smart contract using the `get_token_info()(string,string,uint64,uint64)` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Get token information
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getTokenInfo: async (params: CallParams<PtTokenArgs['obj']['get_token_info()(string,string,uint64,uint64)'] | PtTokenArgs['tuple']['get_token_info()(string,string,uint64,uint64)']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(PtTokenParamsFactory.getTokenInfo(params))
      return {...result, return: result.return as unknown as (undefined | PtTokenReturns['get_token_info()(string,string,uint64,uint64)'])}
    },

    /**
     * Makes a call to the PTToken smart contract using the `approve(byte[],uint64)string` ABI method.
     *
     * Approve spender to spend tokens on behalf of sender
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    approve: async (params: CallParams<PtTokenArgs['obj']['approve(byte[],uint64)string'] | PtTokenArgs['tuple']['approve(byte[],uint64)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(PtTokenParamsFactory.approve(params))
      return {...result, return: result.return as unknown as (undefined | PtTokenReturns['approve(byte[],uint64)string'])}
    },

    /**
     * Makes a call to the PTToken smart contract using the `get_allowance(byte[],byte[])uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Get allowance for spender
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getAllowance: async (params: CallParams<PtTokenArgs['obj']['get_allowance(byte[],byte[])uint64'] | PtTokenArgs['tuple']['get_allowance(byte[],byte[])uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(PtTokenParamsFactory.getAllowance(params))
      return {...result, return: result.return as unknown as (undefined | PtTokenReturns['get_allowance(byte[],byte[])uint64'])}
    },

    /**
     * Makes a call to the PTToken smart contract using the `transfer_from(byte[],byte[],uint64)string` ABI method.
     *
     * Transfer tokens from one address to another using allowance
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    transferFrom: async (params: CallParams<PtTokenArgs['obj']['transfer_from(byte[],byte[],uint64)string'] | PtTokenArgs['tuple']['transfer_from(byte[],byte[],uint64)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(PtTokenParamsFactory.transferFrom(params))
      return {...result, return: result.return as unknown as (undefined | PtTokenReturns['transfer_from(byte[],byte[],uint64)string'])}
    },

    /**
     * Makes a call to the PTToken smart contract using the `update_owner(byte[])string` ABI method.
     *
     * Update contract owner (current owner only)
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    updateOwner: async (params: CallParams<PtTokenArgs['obj']['update_owner(byte[])string'] | PtTokenArgs['tuple']['update_owner(byte[])string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(PtTokenParamsFactory.updateOwner(params))
      return {...result, return: result.return as unknown as (undefined | PtTokenReturns['update_owner(byte[])string'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new PtTokenClient(this.appClient.clone(params))
  }

  /**
   * Makes a readonly (simulated) call to the PTToken smart contract using the `balance_of(byte[])uint64` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * Get balance of an account
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async balanceOf(params: CallParams<PtTokenArgs['obj']['balance_of(byte[])uint64'] | PtTokenArgs['tuple']['balance_of(byte[])uint64']>) {
    const result = await this.appClient.send.call(PtTokenParamsFactory.balanceOf(params))
    return result.return as unknown as PtTokenReturns['balance_of(byte[])uint64']
  }

  /**
   * Makes a readonly (simulated) call to the PTToken smart contract using the `get_total_supply()uint64` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * Get total supply of PT tokens
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async getTotalSupply(params: CallParams<PtTokenArgs['obj']['get_total_supply()uint64'] | PtTokenArgs['tuple']['get_total_supply()uint64']> = {args: []}) {
    const result = await this.appClient.send.call(PtTokenParamsFactory.getTotalSupply(params))
    return result.return as unknown as PtTokenReturns['get_total_supply()uint64']
  }

  /**
   * Makes a readonly (simulated) call to the PTToken smart contract using the `get_maturity()uint64` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * Get maturity timestamp
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async getMaturity(params: CallParams<PtTokenArgs['obj']['get_maturity()uint64'] | PtTokenArgs['tuple']['get_maturity()uint64']> = {args: []}) {
    const result = await this.appClient.send.call(PtTokenParamsFactory.getMaturity(params))
    return result.return as unknown as PtTokenReturns['get_maturity()uint64']
  }

  /**
   * Makes a readonly (simulated) call to the PTToken smart contract using the `is_mature()uint64` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * Check if token has reached maturity
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async isMature(params: CallParams<PtTokenArgs['obj']['is_mature()uint64'] | PtTokenArgs['tuple']['is_mature()uint64']> = {args: []}) {
    const result = await this.appClient.send.call(PtTokenParamsFactory.isMature(params))
    return result.return as unknown as PtTokenReturns['is_mature()uint64']
  }

  /**
   * Makes a readonly (simulated) call to the PTToken smart contract using the `get_token_info()(string,string,uint64,uint64)` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * Get token information
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async getTokenInfo(params: CallParams<PtTokenArgs['obj']['get_token_info()(string,string,uint64,uint64)'] | PtTokenArgs['tuple']['get_token_info()(string,string,uint64,uint64)']> = {args: []}) {
    const result = await this.appClient.send.call(PtTokenParamsFactory.getTokenInfo(params))
    return result.return as unknown as PtTokenReturns['get_token_info()(string,string,uint64,uint64)']
  }

  /**
   * Makes a readonly (simulated) call to the PTToken smart contract using the `get_allowance(byte[],byte[])uint64` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * Get allowance for spender
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async getAllowance(params: CallParams<PtTokenArgs['obj']['get_allowance(byte[],byte[])uint64'] | PtTokenArgs['tuple']['get_allowance(byte[],byte[])uint64']>) {
    const result = await this.appClient.send.call(PtTokenParamsFactory.getAllowance(params))
    return result.return as unknown as PtTokenReturns['get_allowance(byte[],byte[])uint64']
  }

  /**
   * Methods to access state for the current PTToken app
   */
  state = {
    /**
     * Methods to access global state for the current PTToken app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          owner: new BinaryStateValue(result.owner),
          name: result.name,
          symbol: result.symbol,
          maturity: result.maturity,
          totalSupply: result.total_supply,
          decimals: result.decimals,
        }
      },
      /**
       * Get the current value of the owner key in global state
       */
      owner: async (): Promise<BinaryState> => { return new BinaryStateValue((await this.appClient.state.global.getValue("owner")) as Uint8Array | undefined) },
      /**
       * Get the current value of the name key in global state
       */
      name: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("name")) as string | undefined },
      /**
       * Get the current value of the symbol key in global state
       */
      symbol: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("symbol")) as string | undefined },
      /**
       * Get the current value of the maturity key in global state
       */
      maturity: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("maturity")) as bigint | undefined },
      /**
       * Get the current value of the total_supply key in global state
       */
      totalSupply: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("total_supply")) as bigint | undefined },
      /**
       * Get the current value of the decimals key in global state
       */
      decimals: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("decimals")) as bigint | undefined },
    },
    /**
     * Methods to access local state for the current PTToken app
     */
    local: (address: string | Address) => {
      const encodedAddress = typeof address === 'string' ? address : encodeAddress(address.publicKey)
      return {
        /**
         * Get all current keyed values from local state
         */
        getAll: async (): Promise<Partial<Expand<LocalKeysState>>> => {
          const result = await this.appClient.state.local(encodedAddress).getAll()
          return {
            balance: result.balance,
            allowance: result.allowance,
          }
        },
        /**
         * Get the current value of the balance key in local state
         */
        balance: async (): Promise<bigint | undefined> => { return (await this.appClient.state.local(encodedAddress).getValue("balance")) as bigint | undefined },
        /**
         * Get the current value of the allowance key in local state
         */
        allowance: async (): Promise<bigint | undefined> => { return (await this.appClient.state.local(encodedAddress).getValue("allowance")) as bigint | undefined },
      }
    },
  }

  public newGroup(): PtTokenComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a initialize(string,string,uint64)string method call against the PTToken contract
       */
      initialize(params: CallParams<PtTokenArgs['obj']['initialize(string,string,uint64)string'] | PtTokenArgs['tuple']['initialize(string,string,uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.initialize(params)))
        resultMappers.push((v) => client.decodeReturnValue('initialize(string,string,uint64)string', v))
        return this
      },
      /**
       * Add a mint(byte[],uint64)string method call against the PTToken contract
       */
      mint(params: CallParams<PtTokenArgs['obj']['mint(byte[],uint64)string'] | PtTokenArgs['tuple']['mint(byte[],uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.mint(params)))
        resultMappers.push((v) => client.decodeReturnValue('mint(byte[],uint64)string', v))
        return this
      },
      /**
       * Add a burn(uint64)string method call against the PTToken contract
       */
      burn(params: CallParams<PtTokenArgs['obj']['burn(uint64)string'] | PtTokenArgs['tuple']['burn(uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.burn(params)))
        resultMappers.push((v) => client.decodeReturnValue('burn(uint64)string', v))
        return this
      },
      /**
       * Add a transfer(byte[],uint64)string method call against the PTToken contract
       */
      transfer(params: CallParams<PtTokenArgs['obj']['transfer(byte[],uint64)string'] | PtTokenArgs['tuple']['transfer(byte[],uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.transfer(params)))
        resultMappers.push((v) => client.decodeReturnValue('transfer(byte[],uint64)string', v))
        return this
      },
      /**
       * Add a balance_of(byte[])uint64 method call against the PTToken contract
       */
      balanceOf(params: CallParams<PtTokenArgs['obj']['balance_of(byte[])uint64'] | PtTokenArgs['tuple']['balance_of(byte[])uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.balanceOf(params)))
        resultMappers.push((v) => client.decodeReturnValue('balance_of(byte[])uint64', v))
        return this
      },
      /**
       * Add a get_total_supply()uint64 method call against the PTToken contract
       */
      getTotalSupply(params: CallParams<PtTokenArgs['obj']['get_total_supply()uint64'] | PtTokenArgs['tuple']['get_total_supply()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getTotalSupply(params)))
        resultMappers.push((v) => client.decodeReturnValue('get_total_supply()uint64', v))
        return this
      },
      /**
       * Add a get_maturity()uint64 method call against the PTToken contract
       */
      getMaturity(params: CallParams<PtTokenArgs['obj']['get_maturity()uint64'] | PtTokenArgs['tuple']['get_maturity()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getMaturity(params)))
        resultMappers.push((v) => client.decodeReturnValue('get_maturity()uint64', v))
        return this
      },
      /**
       * Add a is_mature()uint64 method call against the PTToken contract
       */
      isMature(params: CallParams<PtTokenArgs['obj']['is_mature()uint64'] | PtTokenArgs['tuple']['is_mature()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.isMature(params)))
        resultMappers.push((v) => client.decodeReturnValue('is_mature()uint64', v))
        return this
      },
      /**
       * Add a get_token_info()(string,string,uint64,uint64) method call against the PTToken contract
       */
      getTokenInfo(params: CallParams<PtTokenArgs['obj']['get_token_info()(string,string,uint64,uint64)'] | PtTokenArgs['tuple']['get_token_info()(string,string,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getTokenInfo(params)))
        resultMappers.push((v) => client.decodeReturnValue('get_token_info()(string,string,uint64,uint64)', v))
        return this
      },
      /**
       * Add a approve(byte[],uint64)string method call against the PTToken contract
       */
      approve(params: CallParams<PtTokenArgs['obj']['approve(byte[],uint64)string'] | PtTokenArgs['tuple']['approve(byte[],uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.approve(params)))
        resultMappers.push((v) => client.decodeReturnValue('approve(byte[],uint64)string', v))
        return this
      },
      /**
       * Add a get_allowance(byte[],byte[])uint64 method call against the PTToken contract
       */
      getAllowance(params: CallParams<PtTokenArgs['obj']['get_allowance(byte[],byte[])uint64'] | PtTokenArgs['tuple']['get_allowance(byte[],byte[])uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getAllowance(params)))
        resultMappers.push((v) => client.decodeReturnValue('get_allowance(byte[],byte[])uint64', v))
        return this
      },
      /**
       * Add a transfer_from(byte[],byte[],uint64)string method call against the PTToken contract
       */
      transferFrom(params: CallParams<PtTokenArgs['obj']['transfer_from(byte[],byte[],uint64)string'] | PtTokenArgs['tuple']['transfer_from(byte[],byte[],uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.transferFrom(params)))
        resultMappers.push((v) => client.decodeReturnValue('transfer_from(byte[],byte[],uint64)string', v))
        return this
      },
      /**
       * Add a update_owner(byte[])string method call against the PTToken contract
       */
      updateOwner(params: CallParams<PtTokenArgs['obj']['update_owner(byte[])string'] | PtTokenArgs['tuple']['update_owner(byte[])string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.updateOwner(params)))
        resultMappers.push((v) => client.decodeReturnValue('update_owner(byte[])string', v))
        return this
      },
      /**
       * Add a clear state call to the PTToken contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as PtTokenComposer
  }
}
export type PtTokenComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the initialize(string,string,uint64)string ABI method.
   *
   * Initialize PT token with maturity
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  initialize(params?: CallParams<PtTokenArgs['obj']['initialize(string,string,uint64)string'] | PtTokenArgs['tuple']['initialize(string,string,uint64)string']>): PtTokenComposer<[...TReturns, PtTokenReturns['initialize(string,string,uint64)string'] | undefined]>

  /**
   * Calls the mint(byte[],uint64)string ABI method.
   *
   * Mint PT tokens to an address (owner only)
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  mint(params?: CallParams<PtTokenArgs['obj']['mint(byte[],uint64)string'] | PtTokenArgs['tuple']['mint(byte[],uint64)string']>): PtTokenComposer<[...TReturns, PtTokenReturns['mint(byte[],uint64)string'] | undefined]>

  /**
   * Calls the burn(uint64)string ABI method.
   *
   * Burn PT tokens from sender's balance
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  burn(params?: CallParams<PtTokenArgs['obj']['burn(uint64)string'] | PtTokenArgs['tuple']['burn(uint64)string']>): PtTokenComposer<[...TReturns, PtTokenReturns['burn(uint64)string'] | undefined]>

  /**
   * Calls the transfer(byte[],uint64)string ABI method.
   *
   * Transfer PT tokens to another address
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  transfer(params?: CallParams<PtTokenArgs['obj']['transfer(byte[],uint64)string'] | PtTokenArgs['tuple']['transfer(byte[],uint64)string']>): PtTokenComposer<[...TReturns, PtTokenReturns['transfer(byte[],uint64)string'] | undefined]>

  /**
   * Calls the balance_of(byte[])uint64 ABI method.
   *
   * Get balance of an account
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  balanceOf(params?: CallParams<PtTokenArgs['obj']['balance_of(byte[])uint64'] | PtTokenArgs['tuple']['balance_of(byte[])uint64']>): PtTokenComposer<[...TReturns, PtTokenReturns['balance_of(byte[])uint64'] | undefined]>

  /**
   * Calls the get_total_supply()uint64 ABI method.
   *
   * Get total supply of PT tokens
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getTotalSupply(params?: CallParams<PtTokenArgs['obj']['get_total_supply()uint64'] | PtTokenArgs['tuple']['get_total_supply()uint64']>): PtTokenComposer<[...TReturns, PtTokenReturns['get_total_supply()uint64'] | undefined]>

  /**
   * Calls the get_maturity()uint64 ABI method.
   *
   * Get maturity timestamp
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getMaturity(params?: CallParams<PtTokenArgs['obj']['get_maturity()uint64'] | PtTokenArgs['tuple']['get_maturity()uint64']>): PtTokenComposer<[...TReturns, PtTokenReturns['get_maturity()uint64'] | undefined]>

  /**
   * Calls the is_mature()uint64 ABI method.
   *
   * Check if token has reached maturity
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  isMature(params?: CallParams<PtTokenArgs['obj']['is_mature()uint64'] | PtTokenArgs['tuple']['is_mature()uint64']>): PtTokenComposer<[...TReturns, PtTokenReturns['is_mature()uint64'] | undefined]>

  /**
   * Calls the get_token_info()(string,string,uint64,uint64) ABI method.
   *
   * Get token information
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getTokenInfo(params?: CallParams<PtTokenArgs['obj']['get_token_info()(string,string,uint64,uint64)'] | PtTokenArgs['tuple']['get_token_info()(string,string,uint64,uint64)']>): PtTokenComposer<[...TReturns, PtTokenReturns['get_token_info()(string,string,uint64,uint64)'] | undefined]>

  /**
   * Calls the approve(byte[],uint64)string ABI method.
   *
   * Approve spender to spend tokens on behalf of sender
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  approve(params?: CallParams<PtTokenArgs['obj']['approve(byte[],uint64)string'] | PtTokenArgs['tuple']['approve(byte[],uint64)string']>): PtTokenComposer<[...TReturns, PtTokenReturns['approve(byte[],uint64)string'] | undefined]>

  /**
   * Calls the get_allowance(byte[],byte[])uint64 ABI method.
   *
   * Get allowance for spender
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getAllowance(params?: CallParams<PtTokenArgs['obj']['get_allowance(byte[],byte[])uint64'] | PtTokenArgs['tuple']['get_allowance(byte[],byte[])uint64']>): PtTokenComposer<[...TReturns, PtTokenReturns['get_allowance(byte[],byte[])uint64'] | undefined]>

  /**
   * Calls the transfer_from(byte[],byte[],uint64)string ABI method.
   *
   * Transfer tokens from one address to another using allowance
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  transferFrom(params?: CallParams<PtTokenArgs['obj']['transfer_from(byte[],byte[],uint64)string'] | PtTokenArgs['tuple']['transfer_from(byte[],byte[],uint64)string']>): PtTokenComposer<[...TReturns, PtTokenReturns['transfer_from(byte[],byte[],uint64)string'] | undefined]>

  /**
   * Calls the update_owner(byte[])string ABI method.
   *
   * Update contract owner (current owner only)
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  updateOwner(params?: CallParams<PtTokenArgs['obj']['update_owner(byte[])string'] | PtTokenArgs['tuple']['update_owner(byte[])string']>): PtTokenComposer<[...TReturns, PtTokenReturns['update_owner(byte[])string'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the PTToken smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): PtTokenComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): PtTokenComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<PtTokenComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<PtTokenComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<PtTokenComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<PtTokenComposerResults<TReturns>>
}
export type PtTokenComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

