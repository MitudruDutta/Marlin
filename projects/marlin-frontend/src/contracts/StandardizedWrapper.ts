/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { type AlgorandClient } from '@algorandfoundation/algokit-utils/types/algorand-client'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"name":"StandardizedWrapper","structs":{},"methods":[{"name":"initialize","args":[{"type":"string","name":"name"},{"type":"string","name":"symbol"},{"type":"uint64","name":"yield_rate_bps"}],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Initialize the standardized wrapper","events":[],"recommendations":{}},{"name":"configure_token","args":[{"type":"uint64","name":"token_index"},{"type":"uint64","name":"ratio"},{"type":"uint64","name":"is_enabled"}],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Configure a token for wrapping","events":[],"recommendations":{}},{"name":"wrap_tokens","args":[{"type":"uint64","name":"amount0"},{"type":"uint64","name":"amount1"}],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Wrap multiple tokens into SY tokens","events":[],"recommendations":{}},{"name":"unwrap_tokens","args":[{"type":"uint64","name":"amount"}],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Unwrap SY tokens back to underlying tokens","events":[],"recommendations":{}},{"name":"get_user_balances","args":[],"returns":{"type":"(uint64,uint64,uint64)"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"desc":"Get user's SY balance and deposited token amounts","events":[],"recommendations":{}},{"name":"get_token_config","args":[{"type":"uint64","name":"token_index"}],"returns":{"type":"(uint64,uint64)"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"desc":"Get token configuration (ratio and enabled status)","events":[],"recommendations":{}},{"name":"get_yield_rate","args":[],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"desc":"Get current yield rate in basis points","events":[],"recommendations":{}},{"name":"get_total_supply","args":[],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"desc":"Get total supply of SY tokens","events":[],"recommendations":{}},{"name":"calculate_wrap_amount","args":[{"type":"uint64","name":"amount0"},{"type":"uint64","name":"amount1"}],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"desc":"Calculate how many SY tokens would be received for given amounts","events":[],"recommendations":{}},{"name":"set_yield_rate","args":[{"type":"uint64","name":"new_rate"}],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Update yield rate (admin only)","events":[],"recommendations":{}},{"name":"pause_wrapper","args":[],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Pause the wrapper (admin only)","events":[],"recommendations":{}},{"name":"unpause_wrapper","args":[],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Unpause the wrapper (admin only)","events":[],"recommendations":{}},{"name":"is_wrapper_paused","args":[],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"desc":"Check if wrapper is paused","events":[],"recommendations":{}}],"arcs":[22,28],"desc":"Standardized token wrapper for multiple yield-bearing tokens","networks":{},"state":{"schema":{"global":{"ints":7,"bytes":3},"local":{"ints":3,"bytes":0}},"keys":{"global":{"admin":{"keyType":"AVMString","valueType":"AVMBytes","key":"YWRtaW4="},"name":{"keyType":"AVMString","valueType":"AVMString","key":"bmFtZQ=="},"symbol":{"keyType":"AVMString","valueType":"AVMString","key":"c3ltYm9s"},"yield_rate_bps":{"keyType":"AVMString","valueType":"AVMUint64","key":"eWllbGRfcmF0ZV9icHM="},"is_paused":{"keyType":"AVMString","valueType":"AVMUint64","key":"aXNfcGF1c2Vk"},"total_supply":{"keyType":"AVMString","valueType":"AVMUint64","key":"dG90YWxfc3VwcGx5"},"token0_ratio":{"keyType":"AVMString","valueType":"AVMUint64","key":"dG9rZW4wX3JhdGlv"},"token1_ratio":{"keyType":"AVMString","valueType":"AVMUint64","key":"dG9rZW4xX3JhdGlv"},"token0_enabled":{"keyType":"AVMString","valueType":"AVMUint64","key":"dG9rZW4wX2VuYWJsZWQ="},"token1_enabled":{"keyType":"AVMString","valueType":"AVMUint64","key":"dG9rZW4xX2VuYWJsZWQ="}},"local":{"sy_balance":{"keyType":"AVMString","valueType":"AVMUint64","key":"c3lfYmFsYW5jZQ=="},"token0_deposited":{"keyType":"AVMString","valueType":"AVMUint64","key":"dG9rZW4wX2RlcG9zaXRlZA=="},"token1_deposited":{"keyType":"AVMString","valueType":"AVMUint64","key":"dG9rZW4xX2RlcG9zaXRlZA=="}},"box":{}},"maps":{"global":{},"local":{},"box":{}}},"bareActions":{"create":["NoOp"],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"pc":[1126],"errorMessage":"Amount must be positive"},{"pc":[920],"errorMessage":"At least one amount must be positive"},{"pc":[1141],"errorMessage":"Insufficient SY balance"},{"pc":[301,318,342,366,394,419,436,453,473,489,517,549,585],"errorMessage":"OnCompletion is not NoOp"},{"pc":[778],"errorMessage":"Only admin can configure"},{"pc":[1621],"errorMessage":"Only admin can pause"},{"pc":[1518],"errorMessage":"Only admin can set yield rate"},{"pc":[1639],"errorMessage":"Only admin can unpause"},{"pc":[641],"errorMessage":"Only creator can initialize"},{"pc":[788],"errorMessage":"Only tokens 0 and 1 supported"},{"pc":[783],"errorMessage":"Ratio cannot exceed 100%"},{"pc":[936],"errorMessage":"Token 0 not enabled"},{"pc":[981],"errorMessage":"Token 1 not enabled"},{"pc":[1017],"errorMessage":"Wrapped amount must be positive"},{"pc":[908,1123],"errorMessage":"Wrapper is paused"},{"pc":[646,1523],"errorMessage":"Yield rate cannot exceed 100%"},{"pc":[630],"errorMessage":"can only call when creating"},{"pc":[304,321,345,369,397,422,439,456,476,492,520,552,588],"errorMessage":"can only call when not creating"},{"pc":[776,1516,1619,1637],"errorMessage":"check self.admin exists"},{"pc":[906,1121,1652],"errorMessage":"check self.is_paused exists"},{"pc":[1024,1137,1356],"errorMessage":"check self.sy_balance exists for account"},{"pc":[952,1226,1364],"errorMessage":"check self.token0_deposited exists for account"},{"pc":[933,1148,1397,1440],"errorMessage":"check self.token0_enabled exists"},{"pc":[940,1157,1391,1453],"errorMessage":"check self.token0_ratio exists"},{"pc":[1001,1262,1372],"errorMessage":"check self.token1_deposited exists for account"},{"pc":[978,1169,1411,1477],"errorMessage":"check self.token1_enabled exists"},{"pc":[986,1179,1405,1491],"errorMessage":"check self.token1_ratio exists"},{"pc":[1038,1202,1424],"errorMessage":"check self.total_supply exists"},{"pc":[1419,1528],"errorMessage":"check self.yield_rate_bps exists"}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"},"byteCode":{"approval":"CiAEAAGQTognJg4EFR98dQlpc19wYXVzZWQMdG90YWxfc3VwcGx5DHRva2VuMF9yYXRpbwx0b2tlbjFfcmF0aW8OdG9rZW4wX2VuYWJsZWQOdG9rZW4xX2VuYWJsZWQFYWRtaW4QdG9rZW4wX2RlcG9zaXRlZBB0b2tlbjFfZGVwb3NpdGVkCnN5X2JhbGFuY2UOeWllbGRfcmF0ZV9icHMOV3JhcHBlciBwYXVzZWQQV3JhcHBlciB1bnBhdXNlZDEbQQGogg0ES5htOgRcgVLTBCaKer8EyW/TVwQmwbmQBE+uuGgEgIixcQRGkJNVBC0qcbUEC8QZ8QSLnQifBDqqqrcE8TV0gTYaAI4NAR4A+gDaAL4ArgCaAIkAeABfAEMAKwATAAIiQzEZFEQxGESIBT0WKExQsCNDMRkURDEYRIgFGkkVFlcGAkxQKExQsCNDMRkURDEYRIgE8EkVFlcGAkxQKExQsCNDMRkURDEYRDYaAReIBGpJFRZXBgJMUChMULAjQzEZFEQxGEQ2GgEXNhoCF4gD+RYoTFCwI0MxGRREMRhEiAPjFihMULAjQzEZFEQxGESIA8wWKExQsCNDMRkURDEYRDYaAReIA5QoTFCwI0MxGRREMRhEiANmKExQsCNDMRkURDEYRDYaAReIAmRJFRZXBgJMUChMULAjQzEZFEQxGEQ2GgEXNhoCF4gBbUkVFlcGAkxQKExQsCNDMRkURDEYRDYaARc2GgIXNhoDF4gAx0kVFlcGAkxQKExQsCNDMRkURDEYRDYaAVcCADYaAlcCADYaAxeIABlJFRZXBgJMUChMULAjQzEZQP61MRgURCNDigMBMQAyCRJEi/8kDkQnBzEAZ4AEbmFtZYv9Z4AGc3ltYm9si/5nJwuL/2cpImcqImcrJWcnBCVnJwUjZycGI2eAH1N0YW5kYXJkaXplZFdyYXBwZXIgaW5pdGlhbGl6ZWSwgCBXcmFwcGVyIGluaXRpYWxpemVkIHN1Y2Nlc3NmdWxseYmKAwExACInB2VEEkSL/iQORIv9Iw5Ei/1AAFori/5nJwWL/2eL/RaAGlRva2VuIGNvbmZpZ3VyZWQgLSBJbmRleDogTFCACCBSYXRpbzogUIv+FlCwgB1Ub2tlbiBjb25maWd1cmVkIHN1Y2Nlc3NmdWxseYknBIv+ZycGi/9nQv+iigIBgABJIillRBREi/5AAAWL/0EAvSNEIowAi/5BACQiJwVlRCMSRCIrZUSL/gskCjEAIicIY0SL/ggxACcITwJmjACLAIwBi/9BACgiJwZlRCMSRCInBGVEi/8LJAqLAAgxACInCWNEi/8IMQAnCU8CZowBiwFJRDEAIicKY0RLAQgxACcKTwJmIiplREsBCCpMZxaAGVRva2VucyB3cmFwcGVkIC0gQW1vdW50OiBMULCAG1Rva2VucyB3cmFwcGVkIHN1Y2Nlc3NmdWxseYwAiSJC/0CKAQGAAEkiKWVEFESL/0QxACInCmNMSU8CRIv/D0QiRwInBWVEIxJBAAsiK2VEi/8LJAqMAyInBmVEIxJBAAwiJwRlRIv/CyQKjASLAov/CTEAJwpPAmYiKmVEi/8JKkxniwNBAB8xACInCGNMSU4CjABEiwMPQQAMiwCLAwkxACcITwJmiwRBAB8xACInCWNMSU4CjAFEiwQPQQAMiwGLBAkxACcJTwJmi/8WgBtUb2tlbnMgdW53cmFwcGVkIC0gQW1vdW50OiBMULCAHVRva2VucyB1bndyYXBwZWQgc3VjY2Vzc2Z1bGx5jACJMQAiJwpjRBYxACInCGNEFjEAIicJY0QWTgJQTFCJigEBi/9AAA0iK2VEFiInBWVEFlCJIicEZUQWIicGZUQWUIkiJwtlRIkiKmVEiYoCASJJi/5BABkiJwVlRCMSiwCMAUEACyIrZUSL/gskCowBiwFJjACMAYv/QQAdIicGZUQjEosAjAFBAA8iJwRlRIv/CyQKiwAIjAGLAYwAiYoBATEAIicHZUQSRIv/JA5EIicLZUQnC4v/ZxaAGllpZWxkIHJhdGUgdXBkYXRlZCAtIE9sZDogTFCABiBOZXc6IFCL/xZQsIAfWWllbGQgcmF0ZSB1cGRhdGVkIHN1Y2Nlc3NmdWxseYkxACInB2VEEkQpI2cnDLAnDIkxACInB2VEEkQpImcnDbAnDYkiKWVEiQ==","clear":"CoEBQw=="},"compilerInfo":{"compiler":"puya","compilerVersion":{"major":4,"minor":10,"patch":0}},"events":[],"templateVariables":{}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


/**
 * The argument types for the StandardizedWrapper contract
 */
export type StandardizedWrapperArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'initialize(string,string,uint64)string': {
      name: string
      symbol: string
      yieldRateBps: bigint | number
    }
    'configure_token(uint64,uint64,uint64)string': {
      tokenIndex: bigint | number
      ratio: bigint | number
      isEnabled: bigint | number
    }
    'wrap_tokens(uint64,uint64)string': {
      amount0: bigint | number
      amount1: bigint | number
    }
    'unwrap_tokens(uint64)string': {
      amount: bigint | number
    }
    'get_user_balances()(uint64,uint64,uint64)': Record<string, never>
    'get_token_config(uint64)(uint64,uint64)': {
      tokenIndex: bigint | number
    }
    'get_yield_rate()uint64': Record<string, never>
    'get_total_supply()uint64': Record<string, never>
    'calculate_wrap_amount(uint64,uint64)uint64': {
      amount0: bigint | number
      amount1: bigint | number
    }
    'set_yield_rate(uint64)string': {
      newRate: bigint | number
    }
    'pause_wrapper()string': Record<string, never>
    'unpause_wrapper()string': Record<string, never>
    'is_wrapper_paused()uint64': Record<string, never>
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'initialize(string,string,uint64)string': [name: string, symbol: string, yieldRateBps: bigint | number]
    'configure_token(uint64,uint64,uint64)string': [tokenIndex: bigint | number, ratio: bigint | number, isEnabled: bigint | number]
    'wrap_tokens(uint64,uint64)string': [amount0: bigint | number, amount1: bigint | number]
    'unwrap_tokens(uint64)string': [amount: bigint | number]
    'get_user_balances()(uint64,uint64,uint64)': []
    'get_token_config(uint64)(uint64,uint64)': [tokenIndex: bigint | number]
    'get_yield_rate()uint64': []
    'get_total_supply()uint64': []
    'calculate_wrap_amount(uint64,uint64)uint64': [amount0: bigint | number, amount1: bigint | number]
    'set_yield_rate(uint64)string': [newRate: bigint | number]
    'pause_wrapper()string': []
    'unpause_wrapper()string': []
    'is_wrapper_paused()uint64': []
  }
}

/**
 * The return type for each method
 */
export type StandardizedWrapperReturns = {
  'initialize(string,string,uint64)string': string
  'configure_token(uint64,uint64,uint64)string': string
  'wrap_tokens(uint64,uint64)string': string
  'unwrap_tokens(uint64)string': string
  'get_user_balances()(uint64,uint64,uint64)': [bigint, bigint, bigint]
  'get_token_config(uint64)(uint64,uint64)': [bigint, bigint]
  'get_yield_rate()uint64': bigint
  'get_total_supply()uint64': bigint
  'calculate_wrap_amount(uint64,uint64)uint64': bigint
  'set_yield_rate(uint64)string': string
  'pause_wrapper()string': string
  'unpause_wrapper()string': string
  'is_wrapper_paused()uint64': bigint
}

/**
 * Defines the types of available calls and state of the StandardizedWrapper smart contract.
 */
export type StandardizedWrapperTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'initialize(string,string,uint64)string' | 'initialize', {
      argsObj: StandardizedWrapperArgs['obj']['initialize(string,string,uint64)string']
      argsTuple: StandardizedWrapperArgs['tuple']['initialize(string,string,uint64)string']
      returns: StandardizedWrapperReturns['initialize(string,string,uint64)string']
    }>
    & Record<'configure_token(uint64,uint64,uint64)string' | 'configure_token', {
      argsObj: StandardizedWrapperArgs['obj']['configure_token(uint64,uint64,uint64)string']
      argsTuple: StandardizedWrapperArgs['tuple']['configure_token(uint64,uint64,uint64)string']
      returns: StandardizedWrapperReturns['configure_token(uint64,uint64,uint64)string']
    }>
    & Record<'wrap_tokens(uint64,uint64)string' | 'wrap_tokens', {
      argsObj: StandardizedWrapperArgs['obj']['wrap_tokens(uint64,uint64)string']
      argsTuple: StandardizedWrapperArgs['tuple']['wrap_tokens(uint64,uint64)string']
      returns: StandardizedWrapperReturns['wrap_tokens(uint64,uint64)string']
    }>
    & Record<'unwrap_tokens(uint64)string' | 'unwrap_tokens', {
      argsObj: StandardizedWrapperArgs['obj']['unwrap_tokens(uint64)string']
      argsTuple: StandardizedWrapperArgs['tuple']['unwrap_tokens(uint64)string']
      returns: StandardizedWrapperReturns['unwrap_tokens(uint64)string']
    }>
    & Record<'get_user_balances()(uint64,uint64,uint64)' | 'get_user_balances', {
      argsObj: StandardizedWrapperArgs['obj']['get_user_balances()(uint64,uint64,uint64)']
      argsTuple: StandardizedWrapperArgs['tuple']['get_user_balances()(uint64,uint64,uint64)']
      returns: StandardizedWrapperReturns['get_user_balances()(uint64,uint64,uint64)']
    }>
    & Record<'get_token_config(uint64)(uint64,uint64)' | 'get_token_config', {
      argsObj: StandardizedWrapperArgs['obj']['get_token_config(uint64)(uint64,uint64)']
      argsTuple: StandardizedWrapperArgs['tuple']['get_token_config(uint64)(uint64,uint64)']
      returns: StandardizedWrapperReturns['get_token_config(uint64)(uint64,uint64)']
    }>
    & Record<'get_yield_rate()uint64' | 'get_yield_rate', {
      argsObj: StandardizedWrapperArgs['obj']['get_yield_rate()uint64']
      argsTuple: StandardizedWrapperArgs['tuple']['get_yield_rate()uint64']
      returns: StandardizedWrapperReturns['get_yield_rate()uint64']
    }>
    & Record<'get_total_supply()uint64' | 'get_total_supply', {
      argsObj: StandardizedWrapperArgs['obj']['get_total_supply()uint64']
      argsTuple: StandardizedWrapperArgs['tuple']['get_total_supply()uint64']
      returns: StandardizedWrapperReturns['get_total_supply()uint64']
    }>
    & Record<'calculate_wrap_amount(uint64,uint64)uint64' | 'calculate_wrap_amount', {
      argsObj: StandardizedWrapperArgs['obj']['calculate_wrap_amount(uint64,uint64)uint64']
      argsTuple: StandardizedWrapperArgs['tuple']['calculate_wrap_amount(uint64,uint64)uint64']
      returns: StandardizedWrapperReturns['calculate_wrap_amount(uint64,uint64)uint64']
    }>
    & Record<'set_yield_rate(uint64)string' | 'set_yield_rate', {
      argsObj: StandardizedWrapperArgs['obj']['set_yield_rate(uint64)string']
      argsTuple: StandardizedWrapperArgs['tuple']['set_yield_rate(uint64)string']
      returns: StandardizedWrapperReturns['set_yield_rate(uint64)string']
    }>
    & Record<'pause_wrapper()string' | 'pause_wrapper', {
      argsObj: StandardizedWrapperArgs['obj']['pause_wrapper()string']
      argsTuple: StandardizedWrapperArgs['tuple']['pause_wrapper()string']
      returns: StandardizedWrapperReturns['pause_wrapper()string']
    }>
    & Record<'unpause_wrapper()string' | 'unpause_wrapper', {
      argsObj: StandardizedWrapperArgs['obj']['unpause_wrapper()string']
      argsTuple: StandardizedWrapperArgs['tuple']['unpause_wrapper()string']
      returns: StandardizedWrapperReturns['unpause_wrapper()string']
    }>
    & Record<'is_wrapper_paused()uint64' | 'is_wrapper_paused', {
      argsObj: StandardizedWrapperArgs['obj']['is_wrapper_paused()uint64']
      argsTuple: StandardizedWrapperArgs['tuple']['is_wrapper_paused()uint64']
      returns: StandardizedWrapperReturns['is_wrapper_paused()uint64']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        admin: BinaryState
        name: string
        symbol: string
        yieldRateBps: bigint
        isPaused: bigint
        totalSupply: bigint
        token0Ratio: bigint
        token1Ratio: bigint
        token0Enabled: bigint
        token1Enabled: bigint
      }
      maps: {}
    }
    local: {
      keys: {
        syBalance: bigint
        token0Deposited: bigint
        token1Deposited: bigint
      }
      maps: {}
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type StandardizedWrapperSignatures = keyof StandardizedWrapperTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type StandardizedWrapperNonVoidMethodSignatures = keyof StandardizedWrapperTypes['methods'] extends infer T ? T extends keyof StandardizedWrapperTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the StandardizedWrapper smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends StandardizedWrapperSignatures> = StandardizedWrapperTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the StandardizedWrapper smart contract to the method's return type
 */
export type MethodReturn<TSignature extends StandardizedWrapperSignatures> = StandardizedWrapperTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = StandardizedWrapperTypes['state']['global']['keys']

/**
 * Defines the shape of the keyed local state of the application.
 */
export type LocalKeysState = StandardizedWrapperTypes['state']['local']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type StandardizedWrapperCreateCallParams =
  | Expand<AppClientBareCallParams & {method?: never} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type StandardizedWrapperDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: StandardizedWrapperCreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the StandardizedWrapper smart contract
 */
export abstract class StandardizedWrapperParamsFactory {
  /**
   * Constructs a no op call for the initialize(string,string,uint64)string ABI method
   *
   * Initialize the standardized wrapper
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static initialize(params: CallParams<StandardizedWrapperArgs['obj']['initialize(string,string,uint64)string'] | StandardizedWrapperArgs['tuple']['initialize(string,string,uint64)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'initialize(string,string,uint64)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.name, params.args.symbol, params.args.yieldRateBps],
    }
  }
  /**
   * Constructs a no op call for the configure_token(uint64,uint64,uint64)string ABI method
   *
   * Configure a token for wrapping
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static configureToken(params: CallParams<StandardizedWrapperArgs['obj']['configure_token(uint64,uint64,uint64)string'] | StandardizedWrapperArgs['tuple']['configure_token(uint64,uint64,uint64)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'configure_token(uint64,uint64,uint64)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.tokenIndex, params.args.ratio, params.args.isEnabled],
    }
  }
  /**
   * Constructs a no op call for the wrap_tokens(uint64,uint64)string ABI method
   *
   * Wrap multiple tokens into SY tokens
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static wrapTokens(params: CallParams<StandardizedWrapperArgs['obj']['wrap_tokens(uint64,uint64)string'] | StandardizedWrapperArgs['tuple']['wrap_tokens(uint64,uint64)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'wrap_tokens(uint64,uint64)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.amount0, params.args.amount1],
    }
  }
  /**
   * Constructs a no op call for the unwrap_tokens(uint64)string ABI method
   *
   * Unwrap SY tokens back to underlying tokens
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static unwrapTokens(params: CallParams<StandardizedWrapperArgs['obj']['unwrap_tokens(uint64)string'] | StandardizedWrapperArgs['tuple']['unwrap_tokens(uint64)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'unwrap_tokens(uint64)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.amount],
    }
  }
  /**
   * Constructs a no op call for the get_user_balances()(uint64,uint64,uint64) ABI method
   *
   * Get user's SY balance and deposited token amounts
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getUserBalances(params: CallParams<StandardizedWrapperArgs['obj']['get_user_balances()(uint64,uint64,uint64)'] | StandardizedWrapperArgs['tuple']['get_user_balances()(uint64,uint64,uint64)']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'get_user_balances()(uint64,uint64,uint64)' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the get_token_config(uint64)(uint64,uint64) ABI method
   *
   * Get token configuration (ratio and enabled status)
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getTokenConfig(params: CallParams<StandardizedWrapperArgs['obj']['get_token_config(uint64)(uint64,uint64)'] | StandardizedWrapperArgs['tuple']['get_token_config(uint64)(uint64,uint64)']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'get_token_config(uint64)(uint64,uint64)' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.tokenIndex],
    }
  }
  /**
   * Constructs a no op call for the get_yield_rate()uint64 ABI method
   *
   * Get current yield rate in basis points
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getYieldRate(params: CallParams<StandardizedWrapperArgs['obj']['get_yield_rate()uint64'] | StandardizedWrapperArgs['tuple']['get_yield_rate()uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'get_yield_rate()uint64' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the get_total_supply()uint64 ABI method
   *
   * Get total supply of SY tokens
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getTotalSupply(params: CallParams<StandardizedWrapperArgs['obj']['get_total_supply()uint64'] | StandardizedWrapperArgs['tuple']['get_total_supply()uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'get_total_supply()uint64' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the calculate_wrap_amount(uint64,uint64)uint64 ABI method
   *
   * Calculate how many SY tokens would be received for given amounts
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static calculateWrapAmount(params: CallParams<StandardizedWrapperArgs['obj']['calculate_wrap_amount(uint64,uint64)uint64'] | StandardizedWrapperArgs['tuple']['calculate_wrap_amount(uint64,uint64)uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'calculate_wrap_amount(uint64,uint64)uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.amount0, params.args.amount1],
    }
  }
  /**
   * Constructs a no op call for the set_yield_rate(uint64)string ABI method
   *
   * Update yield rate (admin only)
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static setYieldRate(params: CallParams<StandardizedWrapperArgs['obj']['set_yield_rate(uint64)string'] | StandardizedWrapperArgs['tuple']['set_yield_rate(uint64)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'set_yield_rate(uint64)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.newRate],
    }
  }
  /**
   * Constructs a no op call for the pause_wrapper()string ABI method
   *
   * Pause the wrapper (admin only)
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static pauseWrapper(params: CallParams<StandardizedWrapperArgs['obj']['pause_wrapper()string'] | StandardizedWrapperArgs['tuple']['pause_wrapper()string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'pause_wrapper()string' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the unpause_wrapper()string ABI method
   *
   * Unpause the wrapper (admin only)
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static unpauseWrapper(params: CallParams<StandardizedWrapperArgs['obj']['unpause_wrapper()string'] | StandardizedWrapperArgs['tuple']['unpause_wrapper()string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'unpause_wrapper()string' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the is_wrapper_paused()uint64 ABI method
   *
   * Check if wrapper is paused
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static isWrapperPaused(params: CallParams<StandardizedWrapperArgs['obj']['is_wrapper_paused()uint64'] | StandardizedWrapperArgs['tuple']['is_wrapper_paused()uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'is_wrapper_paused()uint64' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the StandardizedWrapper smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class StandardizedWrapperFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `StandardizedWrapperFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClient {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new StandardizedWrapperClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new StandardizedWrapperClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the StandardizedWrapper smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: StandardizedWrapperDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
    })
    return { result: result.result, appClient: new StandardizedWrapperClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the StandardizedWrapper smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The params for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.params.bare.create(params)
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the StandardizedWrapper smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The transaction for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.createTransaction.bare.create(params)
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the StandardizedWrapper smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The create result
       */
      bare: async (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        const result = await this.appFactory.send.bare.create(params)
        return { result: result.result, appClient: new StandardizedWrapperClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the StandardizedWrapper smart contract
 */
export class StandardizedWrapperClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `StandardizedWrapperClient`
   *
   * @param appClient An `AppClient` instance which has been created with the StandardizedWrapper app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `StandardizedWrapperClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends StandardizedWrapperNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `StandardizedWrapperClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<StandardizedWrapperClient> {
    return new StandardizedWrapperClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `StandardizedWrapperClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<StandardizedWrapperClient> {
    return new StandardizedWrapperClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClient {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the StandardizedWrapper smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the StandardizedWrapper smart contract using the `initialize(string,string,uint64)string` ABI method.
     *
     * Initialize the standardized wrapper
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    initialize: (params: CallParams<StandardizedWrapperArgs['obj']['initialize(string,string,uint64)string'] | StandardizedWrapperArgs['tuple']['initialize(string,string,uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(StandardizedWrapperParamsFactory.initialize(params))
    },

    /**
     * Makes a call to the StandardizedWrapper smart contract using the `configure_token(uint64,uint64,uint64)string` ABI method.
     *
     * Configure a token for wrapping
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    configureToken: (params: CallParams<StandardizedWrapperArgs['obj']['configure_token(uint64,uint64,uint64)string'] | StandardizedWrapperArgs['tuple']['configure_token(uint64,uint64,uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(StandardizedWrapperParamsFactory.configureToken(params))
    },

    /**
     * Makes a call to the StandardizedWrapper smart contract using the `wrap_tokens(uint64,uint64)string` ABI method.
     *
     * Wrap multiple tokens into SY tokens
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    wrapTokens: (params: CallParams<StandardizedWrapperArgs['obj']['wrap_tokens(uint64,uint64)string'] | StandardizedWrapperArgs['tuple']['wrap_tokens(uint64,uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(StandardizedWrapperParamsFactory.wrapTokens(params))
    },

    /**
     * Makes a call to the StandardizedWrapper smart contract using the `unwrap_tokens(uint64)string` ABI method.
     *
     * Unwrap SY tokens back to underlying tokens
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    unwrapTokens: (params: CallParams<StandardizedWrapperArgs['obj']['unwrap_tokens(uint64)string'] | StandardizedWrapperArgs['tuple']['unwrap_tokens(uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(StandardizedWrapperParamsFactory.unwrapTokens(params))
    },

    /**
     * Makes a call to the StandardizedWrapper smart contract using the `get_user_balances()(uint64,uint64,uint64)` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Get user's SY balance and deposited token amounts
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getUserBalances: (params: CallParams<StandardizedWrapperArgs['obj']['get_user_balances()(uint64,uint64,uint64)'] | StandardizedWrapperArgs['tuple']['get_user_balances()(uint64,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(StandardizedWrapperParamsFactory.getUserBalances(params))
    },

    /**
     * Makes a call to the StandardizedWrapper smart contract using the `get_token_config(uint64)(uint64,uint64)` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Get token configuration (ratio and enabled status)
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getTokenConfig: (params: CallParams<StandardizedWrapperArgs['obj']['get_token_config(uint64)(uint64,uint64)'] | StandardizedWrapperArgs['tuple']['get_token_config(uint64)(uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(StandardizedWrapperParamsFactory.getTokenConfig(params))
    },

    /**
     * Makes a call to the StandardizedWrapper smart contract using the `get_yield_rate()uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Get current yield rate in basis points
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getYieldRate: (params: CallParams<StandardizedWrapperArgs['obj']['get_yield_rate()uint64'] | StandardizedWrapperArgs['tuple']['get_yield_rate()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(StandardizedWrapperParamsFactory.getYieldRate(params))
    },

    /**
     * Makes a call to the StandardizedWrapper smart contract using the `get_total_supply()uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Get total supply of SY tokens
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getTotalSupply: (params: CallParams<StandardizedWrapperArgs['obj']['get_total_supply()uint64'] | StandardizedWrapperArgs['tuple']['get_total_supply()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(StandardizedWrapperParamsFactory.getTotalSupply(params))
    },

    /**
     * Makes a call to the StandardizedWrapper smart contract using the `calculate_wrap_amount(uint64,uint64)uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Calculate how many SY tokens would be received for given amounts
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    calculateWrapAmount: (params: CallParams<StandardizedWrapperArgs['obj']['calculate_wrap_amount(uint64,uint64)uint64'] | StandardizedWrapperArgs['tuple']['calculate_wrap_amount(uint64,uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(StandardizedWrapperParamsFactory.calculateWrapAmount(params))
    },

    /**
     * Makes a call to the StandardizedWrapper smart contract using the `set_yield_rate(uint64)string` ABI method.
     *
     * Update yield rate (admin only)
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    setYieldRate: (params: CallParams<StandardizedWrapperArgs['obj']['set_yield_rate(uint64)string'] | StandardizedWrapperArgs['tuple']['set_yield_rate(uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(StandardizedWrapperParamsFactory.setYieldRate(params))
    },

    /**
     * Makes a call to the StandardizedWrapper smart contract using the `pause_wrapper()string` ABI method.
     *
     * Pause the wrapper (admin only)
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    pauseWrapper: (params: CallParams<StandardizedWrapperArgs['obj']['pause_wrapper()string'] | StandardizedWrapperArgs['tuple']['pause_wrapper()string']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(StandardizedWrapperParamsFactory.pauseWrapper(params))
    },

    /**
     * Makes a call to the StandardizedWrapper smart contract using the `unpause_wrapper()string` ABI method.
     *
     * Unpause the wrapper (admin only)
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    unpauseWrapper: (params: CallParams<StandardizedWrapperArgs['obj']['unpause_wrapper()string'] | StandardizedWrapperArgs['tuple']['unpause_wrapper()string']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(StandardizedWrapperParamsFactory.unpauseWrapper(params))
    },

    /**
     * Makes a call to the StandardizedWrapper smart contract using the `is_wrapper_paused()uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Check if wrapper is paused
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    isWrapperPaused: (params: CallParams<StandardizedWrapperArgs['obj']['is_wrapper_paused()uint64'] | StandardizedWrapperArgs['tuple']['is_wrapper_paused()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(StandardizedWrapperParamsFactory.isWrapperPaused(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the StandardizedWrapper smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the StandardizedWrapper smart contract using the `initialize(string,string,uint64)string` ABI method.
     *
     * Initialize the standardized wrapper
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    initialize: (params: CallParams<StandardizedWrapperArgs['obj']['initialize(string,string,uint64)string'] | StandardizedWrapperArgs['tuple']['initialize(string,string,uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(StandardizedWrapperParamsFactory.initialize(params))
    },

    /**
     * Makes a call to the StandardizedWrapper smart contract using the `configure_token(uint64,uint64,uint64)string` ABI method.
     *
     * Configure a token for wrapping
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    configureToken: (params: CallParams<StandardizedWrapperArgs['obj']['configure_token(uint64,uint64,uint64)string'] | StandardizedWrapperArgs['tuple']['configure_token(uint64,uint64,uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(StandardizedWrapperParamsFactory.configureToken(params))
    },

    /**
     * Makes a call to the StandardizedWrapper smart contract using the `wrap_tokens(uint64,uint64)string` ABI method.
     *
     * Wrap multiple tokens into SY tokens
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    wrapTokens: (params: CallParams<StandardizedWrapperArgs['obj']['wrap_tokens(uint64,uint64)string'] | StandardizedWrapperArgs['tuple']['wrap_tokens(uint64,uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(StandardizedWrapperParamsFactory.wrapTokens(params))
    },

    /**
     * Makes a call to the StandardizedWrapper smart contract using the `unwrap_tokens(uint64)string` ABI method.
     *
     * Unwrap SY tokens back to underlying tokens
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    unwrapTokens: (params: CallParams<StandardizedWrapperArgs['obj']['unwrap_tokens(uint64)string'] | StandardizedWrapperArgs['tuple']['unwrap_tokens(uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(StandardizedWrapperParamsFactory.unwrapTokens(params))
    },

    /**
     * Makes a call to the StandardizedWrapper smart contract using the `get_user_balances()(uint64,uint64,uint64)` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Get user's SY balance and deposited token amounts
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getUserBalances: (params: CallParams<StandardizedWrapperArgs['obj']['get_user_balances()(uint64,uint64,uint64)'] | StandardizedWrapperArgs['tuple']['get_user_balances()(uint64,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(StandardizedWrapperParamsFactory.getUserBalances(params))
    },

    /**
     * Makes a call to the StandardizedWrapper smart contract using the `get_token_config(uint64)(uint64,uint64)` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Get token configuration (ratio and enabled status)
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getTokenConfig: (params: CallParams<StandardizedWrapperArgs['obj']['get_token_config(uint64)(uint64,uint64)'] | StandardizedWrapperArgs['tuple']['get_token_config(uint64)(uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(StandardizedWrapperParamsFactory.getTokenConfig(params))
    },

    /**
     * Makes a call to the StandardizedWrapper smart contract using the `get_yield_rate()uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Get current yield rate in basis points
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getYieldRate: (params: CallParams<StandardizedWrapperArgs['obj']['get_yield_rate()uint64'] | StandardizedWrapperArgs['tuple']['get_yield_rate()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(StandardizedWrapperParamsFactory.getYieldRate(params))
    },

    /**
     * Makes a call to the StandardizedWrapper smart contract using the `get_total_supply()uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Get total supply of SY tokens
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getTotalSupply: (params: CallParams<StandardizedWrapperArgs['obj']['get_total_supply()uint64'] | StandardizedWrapperArgs['tuple']['get_total_supply()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(StandardizedWrapperParamsFactory.getTotalSupply(params))
    },

    /**
     * Makes a call to the StandardizedWrapper smart contract using the `calculate_wrap_amount(uint64,uint64)uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Calculate how many SY tokens would be received for given amounts
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    calculateWrapAmount: (params: CallParams<StandardizedWrapperArgs['obj']['calculate_wrap_amount(uint64,uint64)uint64'] | StandardizedWrapperArgs['tuple']['calculate_wrap_amount(uint64,uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(StandardizedWrapperParamsFactory.calculateWrapAmount(params))
    },

    /**
     * Makes a call to the StandardizedWrapper smart contract using the `set_yield_rate(uint64)string` ABI method.
     *
     * Update yield rate (admin only)
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    setYieldRate: (params: CallParams<StandardizedWrapperArgs['obj']['set_yield_rate(uint64)string'] | StandardizedWrapperArgs['tuple']['set_yield_rate(uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(StandardizedWrapperParamsFactory.setYieldRate(params))
    },

    /**
     * Makes a call to the StandardizedWrapper smart contract using the `pause_wrapper()string` ABI method.
     *
     * Pause the wrapper (admin only)
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    pauseWrapper: (params: CallParams<StandardizedWrapperArgs['obj']['pause_wrapper()string'] | StandardizedWrapperArgs['tuple']['pause_wrapper()string']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(StandardizedWrapperParamsFactory.pauseWrapper(params))
    },

    /**
     * Makes a call to the StandardizedWrapper smart contract using the `unpause_wrapper()string` ABI method.
     *
     * Unpause the wrapper (admin only)
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    unpauseWrapper: (params: CallParams<StandardizedWrapperArgs['obj']['unpause_wrapper()string'] | StandardizedWrapperArgs['tuple']['unpause_wrapper()string']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(StandardizedWrapperParamsFactory.unpauseWrapper(params))
    },

    /**
     * Makes a call to the StandardizedWrapper smart contract using the `is_wrapper_paused()uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Check if wrapper is paused
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    isWrapperPaused: (params: CallParams<StandardizedWrapperArgs['obj']['is_wrapper_paused()uint64'] | StandardizedWrapperArgs['tuple']['is_wrapper_paused()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(StandardizedWrapperParamsFactory.isWrapperPaused(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the StandardizedWrapper smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the StandardizedWrapper smart contract using the `initialize(string,string,uint64)string` ABI method.
     *
     * Initialize the standardized wrapper
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    initialize: async (params: CallParams<StandardizedWrapperArgs['obj']['initialize(string,string,uint64)string'] | StandardizedWrapperArgs['tuple']['initialize(string,string,uint64)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(StandardizedWrapperParamsFactory.initialize(params))
      return {...result, return: result.return as unknown as (undefined | StandardizedWrapperReturns['initialize(string,string,uint64)string'])}
    },

    /**
     * Makes a call to the StandardizedWrapper smart contract using the `configure_token(uint64,uint64,uint64)string` ABI method.
     *
     * Configure a token for wrapping
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    configureToken: async (params: CallParams<StandardizedWrapperArgs['obj']['configure_token(uint64,uint64,uint64)string'] | StandardizedWrapperArgs['tuple']['configure_token(uint64,uint64,uint64)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(StandardizedWrapperParamsFactory.configureToken(params))
      return {...result, return: result.return as unknown as (undefined | StandardizedWrapperReturns['configure_token(uint64,uint64,uint64)string'])}
    },

    /**
     * Makes a call to the StandardizedWrapper smart contract using the `wrap_tokens(uint64,uint64)string` ABI method.
     *
     * Wrap multiple tokens into SY tokens
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    wrapTokens: async (params: CallParams<StandardizedWrapperArgs['obj']['wrap_tokens(uint64,uint64)string'] | StandardizedWrapperArgs['tuple']['wrap_tokens(uint64,uint64)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(StandardizedWrapperParamsFactory.wrapTokens(params))
      return {...result, return: result.return as unknown as (undefined | StandardizedWrapperReturns['wrap_tokens(uint64,uint64)string'])}
    },

    /**
     * Makes a call to the StandardizedWrapper smart contract using the `unwrap_tokens(uint64)string` ABI method.
     *
     * Unwrap SY tokens back to underlying tokens
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    unwrapTokens: async (params: CallParams<StandardizedWrapperArgs['obj']['unwrap_tokens(uint64)string'] | StandardizedWrapperArgs['tuple']['unwrap_tokens(uint64)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(StandardizedWrapperParamsFactory.unwrapTokens(params))
      return {...result, return: result.return as unknown as (undefined | StandardizedWrapperReturns['unwrap_tokens(uint64)string'])}
    },

    /**
     * Makes a call to the StandardizedWrapper smart contract using the `get_user_balances()(uint64,uint64,uint64)` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Get user's SY balance and deposited token amounts
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getUserBalances: async (params: CallParams<StandardizedWrapperArgs['obj']['get_user_balances()(uint64,uint64,uint64)'] | StandardizedWrapperArgs['tuple']['get_user_balances()(uint64,uint64,uint64)']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(StandardizedWrapperParamsFactory.getUserBalances(params))
      return {...result, return: result.return as unknown as (undefined | StandardizedWrapperReturns['get_user_balances()(uint64,uint64,uint64)'])}
    },

    /**
     * Makes a call to the StandardizedWrapper smart contract using the `get_token_config(uint64)(uint64,uint64)` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Get token configuration (ratio and enabled status)
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getTokenConfig: async (params: CallParams<StandardizedWrapperArgs['obj']['get_token_config(uint64)(uint64,uint64)'] | StandardizedWrapperArgs['tuple']['get_token_config(uint64)(uint64,uint64)']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(StandardizedWrapperParamsFactory.getTokenConfig(params))
      return {...result, return: result.return as unknown as (undefined | StandardizedWrapperReturns['get_token_config(uint64)(uint64,uint64)'])}
    },

    /**
     * Makes a call to the StandardizedWrapper smart contract using the `get_yield_rate()uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Get current yield rate in basis points
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getYieldRate: async (params: CallParams<StandardizedWrapperArgs['obj']['get_yield_rate()uint64'] | StandardizedWrapperArgs['tuple']['get_yield_rate()uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(StandardizedWrapperParamsFactory.getYieldRate(params))
      return {...result, return: result.return as unknown as (undefined | StandardizedWrapperReturns['get_yield_rate()uint64'])}
    },

    /**
     * Makes a call to the StandardizedWrapper smart contract using the `get_total_supply()uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Get total supply of SY tokens
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getTotalSupply: async (params: CallParams<StandardizedWrapperArgs['obj']['get_total_supply()uint64'] | StandardizedWrapperArgs['tuple']['get_total_supply()uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(StandardizedWrapperParamsFactory.getTotalSupply(params))
      return {...result, return: result.return as unknown as (undefined | StandardizedWrapperReturns['get_total_supply()uint64'])}
    },

    /**
     * Makes a call to the StandardizedWrapper smart contract using the `calculate_wrap_amount(uint64,uint64)uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Calculate how many SY tokens would be received for given amounts
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    calculateWrapAmount: async (params: CallParams<StandardizedWrapperArgs['obj']['calculate_wrap_amount(uint64,uint64)uint64'] | StandardizedWrapperArgs['tuple']['calculate_wrap_amount(uint64,uint64)uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(StandardizedWrapperParamsFactory.calculateWrapAmount(params))
      return {...result, return: result.return as unknown as (undefined | StandardizedWrapperReturns['calculate_wrap_amount(uint64,uint64)uint64'])}
    },

    /**
     * Makes a call to the StandardizedWrapper smart contract using the `set_yield_rate(uint64)string` ABI method.
     *
     * Update yield rate (admin only)
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    setYieldRate: async (params: CallParams<StandardizedWrapperArgs['obj']['set_yield_rate(uint64)string'] | StandardizedWrapperArgs['tuple']['set_yield_rate(uint64)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(StandardizedWrapperParamsFactory.setYieldRate(params))
      return {...result, return: result.return as unknown as (undefined | StandardizedWrapperReturns['set_yield_rate(uint64)string'])}
    },

    /**
     * Makes a call to the StandardizedWrapper smart contract using the `pause_wrapper()string` ABI method.
     *
     * Pause the wrapper (admin only)
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    pauseWrapper: async (params: CallParams<StandardizedWrapperArgs['obj']['pause_wrapper()string'] | StandardizedWrapperArgs['tuple']['pause_wrapper()string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(StandardizedWrapperParamsFactory.pauseWrapper(params))
      return {...result, return: result.return as unknown as (undefined | StandardizedWrapperReturns['pause_wrapper()string'])}
    },

    /**
     * Makes a call to the StandardizedWrapper smart contract using the `unpause_wrapper()string` ABI method.
     *
     * Unpause the wrapper (admin only)
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    unpauseWrapper: async (params: CallParams<StandardizedWrapperArgs['obj']['unpause_wrapper()string'] | StandardizedWrapperArgs['tuple']['unpause_wrapper()string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(StandardizedWrapperParamsFactory.unpauseWrapper(params))
      return {...result, return: result.return as unknown as (undefined | StandardizedWrapperReturns['unpause_wrapper()string'])}
    },

    /**
     * Makes a call to the StandardizedWrapper smart contract using the `is_wrapper_paused()uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Check if wrapper is paused
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    isWrapperPaused: async (params: CallParams<StandardizedWrapperArgs['obj']['is_wrapper_paused()uint64'] | StandardizedWrapperArgs['tuple']['is_wrapper_paused()uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(StandardizedWrapperParamsFactory.isWrapperPaused(params))
      return {...result, return: result.return as unknown as (undefined | StandardizedWrapperReturns['is_wrapper_paused()uint64'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new StandardizedWrapperClient(this.appClient.clone(params))
  }

  /**
   * Makes a readonly (simulated) call to the StandardizedWrapper smart contract using the `get_user_balances()(uint64,uint64,uint64)` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * Get user's SY balance and deposited token amounts
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async getUserBalances(params: CallParams<StandardizedWrapperArgs['obj']['get_user_balances()(uint64,uint64,uint64)'] | StandardizedWrapperArgs['tuple']['get_user_balances()(uint64,uint64,uint64)']> = {args: []}) {
    const result = await this.appClient.send.call(StandardizedWrapperParamsFactory.getUserBalances(params))
    return result.return as unknown as StandardizedWrapperReturns['get_user_balances()(uint64,uint64,uint64)']
  }

  /**
   * Makes a readonly (simulated) call to the StandardizedWrapper smart contract using the `get_token_config(uint64)(uint64,uint64)` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * Get token configuration (ratio and enabled status)
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async getTokenConfig(params: CallParams<StandardizedWrapperArgs['obj']['get_token_config(uint64)(uint64,uint64)'] | StandardizedWrapperArgs['tuple']['get_token_config(uint64)(uint64,uint64)']>) {
    const result = await this.appClient.send.call(StandardizedWrapperParamsFactory.getTokenConfig(params))
    return result.return as unknown as StandardizedWrapperReturns['get_token_config(uint64)(uint64,uint64)']
  }

  /**
   * Makes a readonly (simulated) call to the StandardizedWrapper smart contract using the `get_yield_rate()uint64` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * Get current yield rate in basis points
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async getYieldRate(params: CallParams<StandardizedWrapperArgs['obj']['get_yield_rate()uint64'] | StandardizedWrapperArgs['tuple']['get_yield_rate()uint64']> = {args: []}) {
    const result = await this.appClient.send.call(StandardizedWrapperParamsFactory.getYieldRate(params))
    return result.return as unknown as StandardizedWrapperReturns['get_yield_rate()uint64']
  }

  /**
   * Makes a readonly (simulated) call to the StandardizedWrapper smart contract using the `get_total_supply()uint64` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * Get total supply of SY tokens
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async getTotalSupply(params: CallParams<StandardizedWrapperArgs['obj']['get_total_supply()uint64'] | StandardizedWrapperArgs['tuple']['get_total_supply()uint64']> = {args: []}) {
    const result = await this.appClient.send.call(StandardizedWrapperParamsFactory.getTotalSupply(params))
    return result.return as unknown as StandardizedWrapperReturns['get_total_supply()uint64']
  }

  /**
   * Makes a readonly (simulated) call to the StandardizedWrapper smart contract using the `calculate_wrap_amount(uint64,uint64)uint64` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * Calculate how many SY tokens would be received for given amounts
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async calculateWrapAmount(params: CallParams<StandardizedWrapperArgs['obj']['calculate_wrap_amount(uint64,uint64)uint64'] | StandardizedWrapperArgs['tuple']['calculate_wrap_amount(uint64,uint64)uint64']>) {
    const result = await this.appClient.send.call(StandardizedWrapperParamsFactory.calculateWrapAmount(params))
    return result.return as unknown as StandardizedWrapperReturns['calculate_wrap_amount(uint64,uint64)uint64']
  }

  /**
   * Makes a readonly (simulated) call to the StandardizedWrapper smart contract using the `is_wrapper_paused()uint64` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * Check if wrapper is paused
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async isWrapperPaused(params: CallParams<StandardizedWrapperArgs['obj']['is_wrapper_paused()uint64'] | StandardizedWrapperArgs['tuple']['is_wrapper_paused()uint64']> = {args: []}) {
    const result = await this.appClient.send.call(StandardizedWrapperParamsFactory.isWrapperPaused(params))
    return result.return as unknown as StandardizedWrapperReturns['is_wrapper_paused()uint64']
  }

  /**
   * Methods to access state for the current StandardizedWrapper app
   */
  state = {
    /**
     * Methods to access global state for the current StandardizedWrapper app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          admin: new BinaryStateValue(result.admin),
          name: result.name,
          symbol: result.symbol,
          yieldRateBps: result.yield_rate_bps,
          isPaused: result.is_paused,
          totalSupply: result.total_supply,
          token0Ratio: result.token0_ratio,
          token1Ratio: result.token1_ratio,
          token0Enabled: result.token0_enabled,
          token1Enabled: result.token1_enabled,
        }
      },
      /**
       * Get the current value of the admin key in global state
       */
      admin: async (): Promise<BinaryState> => { return new BinaryStateValue((await this.appClient.state.global.getValue("admin")) as Uint8Array | undefined) },
      /**
       * Get the current value of the name key in global state
       */
      name: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("name")) as string | undefined },
      /**
       * Get the current value of the symbol key in global state
       */
      symbol: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("symbol")) as string | undefined },
      /**
       * Get the current value of the yield_rate_bps key in global state
       */
      yieldRateBps: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("yield_rate_bps")) as bigint | undefined },
      /**
       * Get the current value of the is_paused key in global state
       */
      isPaused: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("is_paused")) as bigint | undefined },
      /**
       * Get the current value of the total_supply key in global state
       */
      totalSupply: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("total_supply")) as bigint | undefined },
      /**
       * Get the current value of the token0_ratio key in global state
       */
      token0Ratio: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("token0_ratio")) as bigint | undefined },
      /**
       * Get the current value of the token1_ratio key in global state
       */
      token1Ratio: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("token1_ratio")) as bigint | undefined },
      /**
       * Get the current value of the token0_enabled key in global state
       */
      token0Enabled: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("token0_enabled")) as bigint | undefined },
      /**
       * Get the current value of the token1_enabled key in global state
       */
      token1Enabled: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("token1_enabled")) as bigint | undefined },
    },
    /**
     * Methods to access local state for the current StandardizedWrapper app
     */
    local: (address: string | Address) => {
      const encodedAddress = typeof address === 'string' ? address : encodeAddress(address.publicKey)
      return {
        /**
         * Get all current keyed values from local state
         */
        getAll: async (): Promise<Partial<Expand<LocalKeysState>>> => {
          const result = await this.appClient.state.local(encodedAddress).getAll()
          return {
            syBalance: result.sy_balance,
            token0Deposited: result.token0_deposited,
            token1Deposited: result.token1_deposited,
          }
        },
        /**
         * Get the current value of the sy_balance key in local state
         */
        syBalance: async (): Promise<bigint | undefined> => { return (await this.appClient.state.local(encodedAddress).getValue("sy_balance")) as bigint | undefined },
        /**
         * Get the current value of the token0_deposited key in local state
         */
        token0Deposited: async (): Promise<bigint | undefined> => { return (await this.appClient.state.local(encodedAddress).getValue("token0_deposited")) as bigint | undefined },
        /**
         * Get the current value of the token1_deposited key in local state
         */
        token1Deposited: async (): Promise<bigint | undefined> => { return (await this.appClient.state.local(encodedAddress).getValue("token1_deposited")) as bigint | undefined },
      }
    },
  }

  public newGroup(): StandardizedWrapperComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a initialize(string,string,uint64)string method call against the StandardizedWrapper contract
       */
      initialize(params: CallParams<StandardizedWrapperArgs['obj']['initialize(string,string,uint64)string'] | StandardizedWrapperArgs['tuple']['initialize(string,string,uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.initialize(params)))
        resultMappers.push((v) => client.decodeReturnValue('initialize(string,string,uint64)string', v))
        return this
      },
      /**
       * Add a configure_token(uint64,uint64,uint64)string method call against the StandardizedWrapper contract
       */
      configureToken(params: CallParams<StandardizedWrapperArgs['obj']['configure_token(uint64,uint64,uint64)string'] | StandardizedWrapperArgs['tuple']['configure_token(uint64,uint64,uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.configureToken(params)))
        resultMappers.push((v) => client.decodeReturnValue('configure_token(uint64,uint64,uint64)string', v))
        return this
      },
      /**
       * Add a wrap_tokens(uint64,uint64)string method call against the StandardizedWrapper contract
       */
      wrapTokens(params: CallParams<StandardizedWrapperArgs['obj']['wrap_tokens(uint64,uint64)string'] | StandardizedWrapperArgs['tuple']['wrap_tokens(uint64,uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.wrapTokens(params)))
        resultMappers.push((v) => client.decodeReturnValue('wrap_tokens(uint64,uint64)string', v))
        return this
      },
      /**
       * Add a unwrap_tokens(uint64)string method call against the StandardizedWrapper contract
       */
      unwrapTokens(params: CallParams<StandardizedWrapperArgs['obj']['unwrap_tokens(uint64)string'] | StandardizedWrapperArgs['tuple']['unwrap_tokens(uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.unwrapTokens(params)))
        resultMappers.push((v) => client.decodeReturnValue('unwrap_tokens(uint64)string', v))
        return this
      },
      /**
       * Add a get_user_balances()(uint64,uint64,uint64) method call against the StandardizedWrapper contract
       */
      getUserBalances(params: CallParams<StandardizedWrapperArgs['obj']['get_user_balances()(uint64,uint64,uint64)'] | StandardizedWrapperArgs['tuple']['get_user_balances()(uint64,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getUserBalances(params)))
        resultMappers.push((v) => client.decodeReturnValue('get_user_balances()(uint64,uint64,uint64)', v))
        return this
      },
      /**
       * Add a get_token_config(uint64)(uint64,uint64) method call against the StandardizedWrapper contract
       */
      getTokenConfig(params: CallParams<StandardizedWrapperArgs['obj']['get_token_config(uint64)(uint64,uint64)'] | StandardizedWrapperArgs['tuple']['get_token_config(uint64)(uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getTokenConfig(params)))
        resultMappers.push((v) => client.decodeReturnValue('get_token_config(uint64)(uint64,uint64)', v))
        return this
      },
      /**
       * Add a get_yield_rate()uint64 method call against the StandardizedWrapper contract
       */
      getYieldRate(params: CallParams<StandardizedWrapperArgs['obj']['get_yield_rate()uint64'] | StandardizedWrapperArgs['tuple']['get_yield_rate()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getYieldRate(params)))
        resultMappers.push((v) => client.decodeReturnValue('get_yield_rate()uint64', v))
        return this
      },
      /**
       * Add a get_total_supply()uint64 method call against the StandardizedWrapper contract
       */
      getTotalSupply(params: CallParams<StandardizedWrapperArgs['obj']['get_total_supply()uint64'] | StandardizedWrapperArgs['tuple']['get_total_supply()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getTotalSupply(params)))
        resultMappers.push((v) => client.decodeReturnValue('get_total_supply()uint64', v))
        return this
      },
      /**
       * Add a calculate_wrap_amount(uint64,uint64)uint64 method call against the StandardizedWrapper contract
       */
      calculateWrapAmount(params: CallParams<StandardizedWrapperArgs['obj']['calculate_wrap_amount(uint64,uint64)uint64'] | StandardizedWrapperArgs['tuple']['calculate_wrap_amount(uint64,uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.calculateWrapAmount(params)))
        resultMappers.push((v) => client.decodeReturnValue('calculate_wrap_amount(uint64,uint64)uint64', v))
        return this
      },
      /**
       * Add a set_yield_rate(uint64)string method call against the StandardizedWrapper contract
       */
      setYieldRate(params: CallParams<StandardizedWrapperArgs['obj']['set_yield_rate(uint64)string'] | StandardizedWrapperArgs['tuple']['set_yield_rate(uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.setYieldRate(params)))
        resultMappers.push((v) => client.decodeReturnValue('set_yield_rate(uint64)string', v))
        return this
      },
      /**
       * Add a pause_wrapper()string method call against the StandardizedWrapper contract
       */
      pauseWrapper(params: CallParams<StandardizedWrapperArgs['obj']['pause_wrapper()string'] | StandardizedWrapperArgs['tuple']['pause_wrapper()string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.pauseWrapper(params)))
        resultMappers.push((v) => client.decodeReturnValue('pause_wrapper()string', v))
        return this
      },
      /**
       * Add a unpause_wrapper()string method call against the StandardizedWrapper contract
       */
      unpauseWrapper(params: CallParams<StandardizedWrapperArgs['obj']['unpause_wrapper()string'] | StandardizedWrapperArgs['tuple']['unpause_wrapper()string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.unpauseWrapper(params)))
        resultMappers.push((v) => client.decodeReturnValue('unpause_wrapper()string', v))
        return this
      },
      /**
       * Add a is_wrapper_paused()uint64 method call against the StandardizedWrapper contract
       */
      isWrapperPaused(params: CallParams<StandardizedWrapperArgs['obj']['is_wrapper_paused()uint64'] | StandardizedWrapperArgs['tuple']['is_wrapper_paused()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.isWrapperPaused(params)))
        resultMappers.push((v) => client.decodeReturnValue('is_wrapper_paused()uint64', v))
        return this
      },
      /**
       * Add a clear state call to the StandardizedWrapper contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as StandardizedWrapperComposer
  }
}
export type StandardizedWrapperComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the initialize(string,string,uint64)string ABI method.
   *
   * Initialize the standardized wrapper
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  initialize(params?: CallParams<StandardizedWrapperArgs['obj']['initialize(string,string,uint64)string'] | StandardizedWrapperArgs['tuple']['initialize(string,string,uint64)string']>): StandardizedWrapperComposer<[...TReturns, StandardizedWrapperReturns['initialize(string,string,uint64)string'] | undefined]>

  /**
   * Calls the configure_token(uint64,uint64,uint64)string ABI method.
   *
   * Configure a token for wrapping
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  configureToken(params?: CallParams<StandardizedWrapperArgs['obj']['configure_token(uint64,uint64,uint64)string'] | StandardizedWrapperArgs['tuple']['configure_token(uint64,uint64,uint64)string']>): StandardizedWrapperComposer<[...TReturns, StandardizedWrapperReturns['configure_token(uint64,uint64,uint64)string'] | undefined]>

  /**
   * Calls the wrap_tokens(uint64,uint64)string ABI method.
   *
   * Wrap multiple tokens into SY tokens
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  wrapTokens(params?: CallParams<StandardizedWrapperArgs['obj']['wrap_tokens(uint64,uint64)string'] | StandardizedWrapperArgs['tuple']['wrap_tokens(uint64,uint64)string']>): StandardizedWrapperComposer<[...TReturns, StandardizedWrapperReturns['wrap_tokens(uint64,uint64)string'] | undefined]>

  /**
   * Calls the unwrap_tokens(uint64)string ABI method.
   *
   * Unwrap SY tokens back to underlying tokens
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  unwrapTokens(params?: CallParams<StandardizedWrapperArgs['obj']['unwrap_tokens(uint64)string'] | StandardizedWrapperArgs['tuple']['unwrap_tokens(uint64)string']>): StandardizedWrapperComposer<[...TReturns, StandardizedWrapperReturns['unwrap_tokens(uint64)string'] | undefined]>

  /**
   * Calls the get_user_balances()(uint64,uint64,uint64) ABI method.
   *
   * Get user's SY balance and deposited token amounts
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getUserBalances(params?: CallParams<StandardizedWrapperArgs['obj']['get_user_balances()(uint64,uint64,uint64)'] | StandardizedWrapperArgs['tuple']['get_user_balances()(uint64,uint64,uint64)']>): StandardizedWrapperComposer<[...TReturns, StandardizedWrapperReturns['get_user_balances()(uint64,uint64,uint64)'] | undefined]>

  /**
   * Calls the get_token_config(uint64)(uint64,uint64) ABI method.
   *
   * Get token configuration (ratio and enabled status)
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getTokenConfig(params?: CallParams<StandardizedWrapperArgs['obj']['get_token_config(uint64)(uint64,uint64)'] | StandardizedWrapperArgs['tuple']['get_token_config(uint64)(uint64,uint64)']>): StandardizedWrapperComposer<[...TReturns, StandardizedWrapperReturns['get_token_config(uint64)(uint64,uint64)'] | undefined]>

  /**
   * Calls the get_yield_rate()uint64 ABI method.
   *
   * Get current yield rate in basis points
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getYieldRate(params?: CallParams<StandardizedWrapperArgs['obj']['get_yield_rate()uint64'] | StandardizedWrapperArgs['tuple']['get_yield_rate()uint64']>): StandardizedWrapperComposer<[...TReturns, StandardizedWrapperReturns['get_yield_rate()uint64'] | undefined]>

  /**
   * Calls the get_total_supply()uint64 ABI method.
   *
   * Get total supply of SY tokens
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getTotalSupply(params?: CallParams<StandardizedWrapperArgs['obj']['get_total_supply()uint64'] | StandardizedWrapperArgs['tuple']['get_total_supply()uint64']>): StandardizedWrapperComposer<[...TReturns, StandardizedWrapperReturns['get_total_supply()uint64'] | undefined]>

  /**
   * Calls the calculate_wrap_amount(uint64,uint64)uint64 ABI method.
   *
   * Calculate how many SY tokens would be received for given amounts
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  calculateWrapAmount(params?: CallParams<StandardizedWrapperArgs['obj']['calculate_wrap_amount(uint64,uint64)uint64'] | StandardizedWrapperArgs['tuple']['calculate_wrap_amount(uint64,uint64)uint64']>): StandardizedWrapperComposer<[...TReturns, StandardizedWrapperReturns['calculate_wrap_amount(uint64,uint64)uint64'] | undefined]>

  /**
   * Calls the set_yield_rate(uint64)string ABI method.
   *
   * Update yield rate (admin only)
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setYieldRate(params?: CallParams<StandardizedWrapperArgs['obj']['set_yield_rate(uint64)string'] | StandardizedWrapperArgs['tuple']['set_yield_rate(uint64)string']>): StandardizedWrapperComposer<[...TReturns, StandardizedWrapperReturns['set_yield_rate(uint64)string'] | undefined]>

  /**
   * Calls the pause_wrapper()string ABI method.
   *
   * Pause the wrapper (admin only)
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  pauseWrapper(params?: CallParams<StandardizedWrapperArgs['obj']['pause_wrapper()string'] | StandardizedWrapperArgs['tuple']['pause_wrapper()string']>): StandardizedWrapperComposer<[...TReturns, StandardizedWrapperReturns['pause_wrapper()string'] | undefined]>

  /**
   * Calls the unpause_wrapper()string ABI method.
   *
   * Unpause the wrapper (admin only)
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  unpauseWrapper(params?: CallParams<StandardizedWrapperArgs['obj']['unpause_wrapper()string'] | StandardizedWrapperArgs['tuple']['unpause_wrapper()string']>): StandardizedWrapperComposer<[...TReturns, StandardizedWrapperReturns['unpause_wrapper()string'] | undefined]>

  /**
   * Calls the is_wrapper_paused()uint64 ABI method.
   *
   * Check if wrapper is paused
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  isWrapperPaused(params?: CallParams<StandardizedWrapperArgs['obj']['is_wrapper_paused()uint64'] | StandardizedWrapperArgs['tuple']['is_wrapper_paused()uint64']>): StandardizedWrapperComposer<[...TReturns, StandardizedWrapperReturns['is_wrapper_paused()uint64'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the StandardizedWrapper smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): StandardizedWrapperComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): StandardizedWrapperComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<StandardizedWrapperComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<StandardizedWrapperComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<StandardizedWrapperComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<StandardizedWrapperComposerResults<TReturns>>
}
export type StandardizedWrapperComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

