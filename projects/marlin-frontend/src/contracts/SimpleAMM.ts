/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { type AlgorandClient } from '@algorandfoundation/algokit-utils/types/algorand-client'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"name":"SimpleAMM","structs":{},"methods":[{"name":"initialize","args":[],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Initialize the AMM","events":[],"recommendations":{}},{"name":"add_liquidity","args":[{"type":"uint64","name":"amount_a"},{"type":"uint64","name":"amount_b"}],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Add liquidity to the pool","events":[],"recommendations":{}},{"name":"swap_a_for_b","args":[{"type":"uint64","name":"amount_in"}],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Swap token A for token B","events":[],"recommendations":{}},{"name":"swap_b_for_a","args":[{"type":"uint64","name":"amount_in"}],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Swap token B for token A","events":[],"recommendations":{}},{"name":"get_reserves","args":[],"returns":{"type":"(uint64,uint64)"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"desc":"Get current reserves","events":[],"recommendations":{}},{"name":"get_amount_out","args":[{"type":"uint64","name":"amount_in"},{"type":"uint64","name":"reserve_in"},{"type":"uint64","name":"reserve_out"}],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"desc":"Calculate output amount for a given input","events":[],"recommendations":{}},{"name":"get_user_liquidity","args":[],"returns":{"type":"(uint64,uint64,uint64)"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"desc":"Get user's liquidity position","events":[],"recommendations":{}},{"name":"get_pool_info","args":[],"returns":{"type":"(uint64,uint64,uint64,uint64)"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"desc":"Get pool information","events":[],"recommendations":{}},{"name":"remove_liquidity","args":[{"type":"uint64","name":"liquidity_amount"}],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Remove liquidity from the pool","events":[],"recommendations":{}},{"name":"set_fee_rate","args":[{"type":"uint64","name":"new_fee"}],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Set swap fee rate (admin only)","events":[],"recommendations":{}},{"name":"pause_amm","args":[],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Pause the AMM (admin only)","events":[],"recommendations":{}},{"name":"unpause_amm","args":[],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Unpause the AMM (admin only)","events":[],"recommendations":{}}],"arcs":[22,28],"desc":"Simple AMM for PT/YT token trading","networks":{},"state":{"schema":{"global":{"ints":6,"bytes":1},"local":{"ints":3,"bytes":0}},"keys":{"global":{"admin":{"keyType":"AVMString","valueType":"AVMBytes","key":"YWRtaW4="},"reserve_a":{"keyType":"AVMString","valueType":"AVMUint64","key":"cmVzZXJ2ZV9h"},"reserve_b":{"keyType":"AVMString","valueType":"AVMUint64","key":"cmVzZXJ2ZV9i"},"fee_rate":{"keyType":"AVMString","valueType":"AVMUint64","key":"ZmVlX3JhdGU="},"is_paused":{"keyType":"AVMString","valueType":"AVMUint64","key":"aXNfcGF1c2Vk"},"total_liquidity":{"keyType":"AVMString","valueType":"AVMUint64","key":"dG90YWxfbGlxdWlkaXR5"},"fee_denominator":{"keyType":"AVMString","valueType":"AVMUint64","key":"ZmVlX2Rlbm9taW5hdG9y"}},"local":{"liquidity_balance":{"keyType":"AVMString","valueType":"AVMUint64","key":"bGlxdWlkaXR5X2JhbGFuY2U="},"token_a_deposited":{"keyType":"AVMString","valueType":"AVMUint64","key":"dG9rZW5fYV9kZXBvc2l0ZWQ="},"token_b_deposited":{"keyType":"AVMString","valueType":"AVMUint64","key":"dG9rZW5fYl9kZXBvc2l0ZWQ="}},"box":{}},"maps":{"global":{},"local":{},"box":{}}},"bareActions":{"create":["NoOp"],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"pc":[718,1079,1193,1394],"errorMessage":"AMM is paused"},{"pc":[1082,1196,1397,1754],"errorMessage":"Amount must be positive"},{"pc":[730],"errorMessage":"Amounts must be positive"},{"pc":[1630],"errorMessage":"Fee too high"},{"pc":[1107,1129,1221,1243,1766],"errorMessage":"Insufficient liquidity"},{"pc":[1409],"errorMessage":"Insufficient liquidity balance"},{"pc":[1124,1238],"errorMessage":"Insufficient output amount"},{"pc":[320,344,368,396,424,440,456,485,501,529,557,589],"errorMessage":"OnCompletion is not NoOp"},{"pc":[1719],"errorMessage":"Only admin can pause"},{"pc":[1621],"errorMessage":"Only admin can set fee"},{"pc":[1738],"errorMessage":"Only admin can unpause"},{"pc":[626],"errorMessage":"Only creator can initialize"},{"pc":[618],"errorMessage":"can only call when creating"},{"pc":[323,347,371,399,427,443,459,488,504,532,560,592],"errorMessage":"can only call when not creating"},{"pc":[1619,1717,1736],"errorMessage":"check self.admin exists"},{"pc":[1626,1771],"errorMessage":"check self.fee_denominator exists"},{"pc":[1372,1635,1776],"errorMessage":"check self.fee_rate exists"},{"pc":[716,1077,1191,1392],"errorMessage":"check self.is_paused exists"},{"pc":[1015,1329,1404],"errorMessage":"check self.liquidity_balance exists for account"},{"pc":[740,1090,1204,1301,1356,1413],"errorMessage":"check self.reserve_a exists"},{"pc":[747,1097,1211,1306,1361,1417],"errorMessage":"check self.reserve_b exists"},{"pc":[792,1337,1485,1496],"errorMessage":"check self.token_a_deposited exists for account"},{"pc":[809,1345,1513,1526],"errorMessage":"check self.token_b_deposited exists for account"},{"pc":[1003,1029,1057,1366,1421],"errorMessage":"check self.total_liquidity exists"}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"},"byteCode":{"approval":"CiADAAECJhAJcmVzZXJ2ZV9hCXJlc2VydmVfYgQVH3x1D3RvdGFsX2xpcXVpZGl0eQlpc19wYXVzZWQRbGlxdWlkaXR5X2JhbGFuY2URdG9rZW5fYV9kZXBvc2l0ZWQRdG9rZW5fYl9kZXBvc2l0ZWQIZmVlX3JhdGUFYWRtaW4PZmVlX2Rlbm9taW5hdG9yBCBCOiAGIE91dDogG1N3YXAgY29tcGxldGVkIHN1Y2Nlc3NmdWxseQpBTU0gcGF1c2VkDEFNTSB1bnBhdXNlZDEYQAAGJwqB6AdnMRtBAYKCDASJetGnBGjV5U8EbF5rywTFUwyaBLWkPusEuZrAqgT75Zl3BEv1XbYEuRYIOgSR8SVDBLin9oAEOGCcmzYaAI4MAQ8A7wDTALcApwCKAHoAagBOADIAGgACIkMxGRREMRhEiAV7SRUWVwYCTFAqTFCwI0MxGRREMRhEiAVQSRUWVwYCTFAqTFCwI0MxGRREMRhENhoBF4gEz0kVFlcGAkxQKkxQsCNDMRkURDEYRDYaAReIA9JJFRZXBgJMUCpMULAjQzEZFEQxGESIA5oqTFCwI0MxGRREMRhEiANsKkxQsCNDMRkURDEYRDYaARc2GgIXNhoDF4gDQxYqTFCwI0MxGRREMRhEiAMmKkxQsCNDMRkURDEYRDYaAReIAqBJFRZXBgJMUCpMULAjQzEZFEQxGEQ2GgEXiAISSRUWVwYCTFAqTFCwI0MxGRREMRhENhoBFzYaAheIAIVJFRZXBgJMUCpMULAjQzEZFEQxGESIABlJFRZXBgJMUCpMULAjQzEZQP7UMRgURCNDMQAyCRJEJwkxAGcoImcpImcnCIEDZycEImcrImeAFVNpbXBsZUFNTSBpbml0aWFsaXplZLCAHEFNTSBpbml0aWFsaXplZCBzdWNjZXNzZnVsbHmJigIBgABHByInBGVEFESL/kEBVov/QQFRI0QiKGVMSU4CjAFEIillTIwCREAAx4sCQADCKIv+ZymL/2eL/ov/C0mMBUAAciIxACcFSwJmK0xnMQAiJwZjRIv+CDEAJwZPAmYxACInB2NEi/8IMQAnB08CZov+FoAVTGlxdWlkaXR5IGFkZGVkIC0gQTogTFAnC1CL/xZQsIAcTGlxdWlkaXR5IGFkZGVkIHN1Y2Nlc3NmdWxseYwAiYsFSSMIJAqMBiKMAIwHiwaLBwxBACKLAIEKDEEAGosFiwZJTgIKSwEIJAqLACMIjACMBowHQv/WiwdC/1KL/osCSU4CC4sBSU4CCklOAowEi/8LTwIKjAOL/w5BADaLAUmL/ggoTGeLAosECClMZyIrZUSL/gtMCjEAIicFY0RLAQgxACcFTwJmIitlRAgrTGdC/wWLAYsDCChMZ4sCSYv/CClMZyIrZUSL/wtMCkL/xyJC/qyKAQEiJwRlRBREi/9EIihlTElPAkQiKWVMTgJEQQBPiwFBAEojRIv/iwBJTgKLAUlOA4gCcklESUsCDkRPAov/CChMZ0xLAQkpTGeL/xaAEFN3YXAgQS0+QiAtIEluOiBMUCcMUEwWULAnDYwAiSJC/7OKAQEiJwRlRBREi/9EIihlTElPAkQiKWVMTgJEQQBPiwFBAEojRIv/iwFJTgKLAElOA4gCAElESUsCDkRPAov/CClMZ0xLAQkoTGeL/xaAEFN3YXAgQi0+QSAtIEluOiBMUCcMUEwWULAnDYwAiSJC/7MiKGVEFiIpZUQWUImKAwGL/Yv+i/+IAauJMQAiJwVjRBYxACInBmNEFjEAIicHY0QWTgJQTFCJIihlRBYiKWVEFiIrZUQWIicIZUQWTwNPA1BPAlBMUImKAQEiJwRlRBREi/9EMQAiJwVjREmL/w9EIihlRCIpZUQiK2VEi/9LAwtLAQpJTgJOBYv/SwMLSwEKSU4GTwRLAwkoTGdPA0wJKUxnTwKL/wkxACcFTwJmi/8JK0xnMQAiJwZjRA5BABExACInBmNEiwAJMQAnBk8CZjEAIicHY0SLAQ9BABExACInB2NEiwEJMQAnB08CZosAFoAXTGlxdWlkaXR5IHJlbW92ZWQgLSBBOiBMUCcLUIsBFlCwgB5MaXF1aWRpdHkgcmVtb3ZlZCBzdWNjZXNzZnVsbHmMAImKAQExACInCWVEEkQiJwplRIv/DUQiJwhlRCcIi/9nFoATRmVlIHVwZGF0ZWQgLSBPbGQ6IExQgAYgTmV3OiBQi/8WULCAHUZlZSByYXRlIHVwZGF0ZWQgc3VjY2Vzc2Z1bGx5iTEAIicJZUQSRCcEI2cnDrAnDokxACInCWVEEkQnBCJnJw+wJw+JigMBi/1Ei/5BACaL/0EAISNEIicKZUQiJwhlREsBTAmL/QtJi/8Li/5PAwtPAggKiSJC/9w=","clear":"CoEBQw=="},"compilerInfo":{"compiler":"puya","compilerVersion":{"major":4,"minor":10,"patch":0}},"events":[],"templateVariables":{}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


/**
 * The argument types for the SimpleAmm contract
 */
export type SimpleAmmArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'initialize()string': Record<string, never>
    'add_liquidity(uint64,uint64)string': {
      amountA: bigint | number
      amountB: bigint | number
    }
    'swap_a_for_b(uint64)string': {
      amountIn: bigint | number
    }
    'swap_b_for_a(uint64)string': {
      amountIn: bigint | number
    }
    'get_reserves()(uint64,uint64)': Record<string, never>
    'get_amount_out(uint64,uint64,uint64)uint64': {
      amountIn: bigint | number
      reserveIn: bigint | number
      reserveOut: bigint | number
    }
    'get_user_liquidity()(uint64,uint64,uint64)': Record<string, never>
    'get_pool_info()(uint64,uint64,uint64,uint64)': Record<string, never>
    'remove_liquidity(uint64)string': {
      liquidityAmount: bigint | number
    }
    'set_fee_rate(uint64)string': {
      newFee: bigint | number
    }
    'pause_amm()string': Record<string, never>
    'unpause_amm()string': Record<string, never>
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'initialize()string': []
    'add_liquidity(uint64,uint64)string': [amountA: bigint | number, amountB: bigint | number]
    'swap_a_for_b(uint64)string': [amountIn: bigint | number]
    'swap_b_for_a(uint64)string': [amountIn: bigint | number]
    'get_reserves()(uint64,uint64)': []
    'get_amount_out(uint64,uint64,uint64)uint64': [amountIn: bigint | number, reserveIn: bigint | number, reserveOut: bigint | number]
    'get_user_liquidity()(uint64,uint64,uint64)': []
    'get_pool_info()(uint64,uint64,uint64,uint64)': []
    'remove_liquidity(uint64)string': [liquidityAmount: bigint | number]
    'set_fee_rate(uint64)string': [newFee: bigint | number]
    'pause_amm()string': []
    'unpause_amm()string': []
  }
}

/**
 * The return type for each method
 */
export type SimpleAmmReturns = {
  'initialize()string': string
  'add_liquidity(uint64,uint64)string': string
  'swap_a_for_b(uint64)string': string
  'swap_b_for_a(uint64)string': string
  'get_reserves()(uint64,uint64)': [bigint, bigint]
  'get_amount_out(uint64,uint64,uint64)uint64': bigint
  'get_user_liquidity()(uint64,uint64,uint64)': [bigint, bigint, bigint]
  'get_pool_info()(uint64,uint64,uint64,uint64)': [bigint, bigint, bigint, bigint]
  'remove_liquidity(uint64)string': string
  'set_fee_rate(uint64)string': string
  'pause_amm()string': string
  'unpause_amm()string': string
}

/**
 * Defines the types of available calls and state of the SimpleAmm smart contract.
 */
export type SimpleAmmTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'initialize()string' | 'initialize', {
      argsObj: SimpleAmmArgs['obj']['initialize()string']
      argsTuple: SimpleAmmArgs['tuple']['initialize()string']
      returns: SimpleAmmReturns['initialize()string']
    }>
    & Record<'add_liquidity(uint64,uint64)string' | 'add_liquidity', {
      argsObj: SimpleAmmArgs['obj']['add_liquidity(uint64,uint64)string']
      argsTuple: SimpleAmmArgs['tuple']['add_liquidity(uint64,uint64)string']
      returns: SimpleAmmReturns['add_liquidity(uint64,uint64)string']
    }>
    & Record<'swap_a_for_b(uint64)string' | 'swap_a_for_b', {
      argsObj: SimpleAmmArgs['obj']['swap_a_for_b(uint64)string']
      argsTuple: SimpleAmmArgs['tuple']['swap_a_for_b(uint64)string']
      returns: SimpleAmmReturns['swap_a_for_b(uint64)string']
    }>
    & Record<'swap_b_for_a(uint64)string' | 'swap_b_for_a', {
      argsObj: SimpleAmmArgs['obj']['swap_b_for_a(uint64)string']
      argsTuple: SimpleAmmArgs['tuple']['swap_b_for_a(uint64)string']
      returns: SimpleAmmReturns['swap_b_for_a(uint64)string']
    }>
    & Record<'get_reserves()(uint64,uint64)' | 'get_reserves', {
      argsObj: SimpleAmmArgs['obj']['get_reserves()(uint64,uint64)']
      argsTuple: SimpleAmmArgs['tuple']['get_reserves()(uint64,uint64)']
      returns: SimpleAmmReturns['get_reserves()(uint64,uint64)']
    }>
    & Record<'get_amount_out(uint64,uint64,uint64)uint64' | 'get_amount_out', {
      argsObj: SimpleAmmArgs['obj']['get_amount_out(uint64,uint64,uint64)uint64']
      argsTuple: SimpleAmmArgs['tuple']['get_amount_out(uint64,uint64,uint64)uint64']
      returns: SimpleAmmReturns['get_amount_out(uint64,uint64,uint64)uint64']
    }>
    & Record<'get_user_liquidity()(uint64,uint64,uint64)' | 'get_user_liquidity', {
      argsObj: SimpleAmmArgs['obj']['get_user_liquidity()(uint64,uint64,uint64)']
      argsTuple: SimpleAmmArgs['tuple']['get_user_liquidity()(uint64,uint64,uint64)']
      returns: SimpleAmmReturns['get_user_liquidity()(uint64,uint64,uint64)']
    }>
    & Record<'get_pool_info()(uint64,uint64,uint64,uint64)' | 'get_pool_info', {
      argsObj: SimpleAmmArgs['obj']['get_pool_info()(uint64,uint64,uint64,uint64)']
      argsTuple: SimpleAmmArgs['tuple']['get_pool_info()(uint64,uint64,uint64,uint64)']
      returns: SimpleAmmReturns['get_pool_info()(uint64,uint64,uint64,uint64)']
    }>
    & Record<'remove_liquidity(uint64)string' | 'remove_liquidity', {
      argsObj: SimpleAmmArgs['obj']['remove_liquidity(uint64)string']
      argsTuple: SimpleAmmArgs['tuple']['remove_liquidity(uint64)string']
      returns: SimpleAmmReturns['remove_liquidity(uint64)string']
    }>
    & Record<'set_fee_rate(uint64)string' | 'set_fee_rate', {
      argsObj: SimpleAmmArgs['obj']['set_fee_rate(uint64)string']
      argsTuple: SimpleAmmArgs['tuple']['set_fee_rate(uint64)string']
      returns: SimpleAmmReturns['set_fee_rate(uint64)string']
    }>
    & Record<'pause_amm()string' | 'pause_amm', {
      argsObj: SimpleAmmArgs['obj']['pause_amm()string']
      argsTuple: SimpleAmmArgs['tuple']['pause_amm()string']
      returns: SimpleAmmReturns['pause_amm()string']
    }>
    & Record<'unpause_amm()string' | 'unpause_amm', {
      argsObj: SimpleAmmArgs['obj']['unpause_amm()string']
      argsTuple: SimpleAmmArgs['tuple']['unpause_amm()string']
      returns: SimpleAmmReturns['unpause_amm()string']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        admin: BinaryState
        reserveA: bigint
        reserveB: bigint
        feeRate: bigint
        isPaused: bigint
        totalLiquidity: bigint
        feeDenominator: bigint
      }
      maps: {}
    }
    local: {
      keys: {
        liquidityBalance: bigint
        tokenADeposited: bigint
        tokenBDeposited: bigint
      }
      maps: {}
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type SimpleAmmSignatures = keyof SimpleAmmTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type SimpleAmmNonVoidMethodSignatures = keyof SimpleAmmTypes['methods'] extends infer T ? T extends keyof SimpleAmmTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the SimpleAmm smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends SimpleAmmSignatures> = SimpleAmmTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the SimpleAmm smart contract to the method's return type
 */
export type MethodReturn<TSignature extends SimpleAmmSignatures> = SimpleAmmTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = SimpleAmmTypes['state']['global']['keys']

/**
 * Defines the shape of the keyed local state of the application.
 */
export type LocalKeysState = SimpleAmmTypes['state']['local']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type SimpleAmmCreateCallParams =
  | Expand<AppClientBareCallParams & {method?: never} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type SimpleAmmDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: SimpleAmmCreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the SimpleAmm smart contract
 */
export abstract class SimpleAmmParamsFactory {
  /**
   * Constructs a no op call for the initialize()string ABI method
   *
   * Initialize the AMM
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static initialize(params: CallParams<SimpleAmmArgs['obj']['initialize()string'] | SimpleAmmArgs['tuple']['initialize()string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'initialize()string' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the add_liquidity(uint64,uint64)string ABI method
   *
   * Add liquidity to the pool
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static addLiquidity(params: CallParams<SimpleAmmArgs['obj']['add_liquidity(uint64,uint64)string'] | SimpleAmmArgs['tuple']['add_liquidity(uint64,uint64)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'add_liquidity(uint64,uint64)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.amountA, params.args.amountB],
    }
  }
  /**
   * Constructs a no op call for the swap_a_for_b(uint64)string ABI method
   *
   * Swap token A for token B
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static swapAForB(params: CallParams<SimpleAmmArgs['obj']['swap_a_for_b(uint64)string'] | SimpleAmmArgs['tuple']['swap_a_for_b(uint64)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'swap_a_for_b(uint64)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.amountIn],
    }
  }
  /**
   * Constructs a no op call for the swap_b_for_a(uint64)string ABI method
   *
   * Swap token B for token A
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static swapBForA(params: CallParams<SimpleAmmArgs['obj']['swap_b_for_a(uint64)string'] | SimpleAmmArgs['tuple']['swap_b_for_a(uint64)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'swap_b_for_a(uint64)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.amountIn],
    }
  }
  /**
   * Constructs a no op call for the get_reserves()(uint64,uint64) ABI method
   *
   * Get current reserves
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getReserves(params: CallParams<SimpleAmmArgs['obj']['get_reserves()(uint64,uint64)'] | SimpleAmmArgs['tuple']['get_reserves()(uint64,uint64)']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'get_reserves()(uint64,uint64)' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the get_amount_out(uint64,uint64,uint64)uint64 ABI method
   *
   * Calculate output amount for a given input
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getAmountOut(params: CallParams<SimpleAmmArgs['obj']['get_amount_out(uint64,uint64,uint64)uint64'] | SimpleAmmArgs['tuple']['get_amount_out(uint64,uint64,uint64)uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'get_amount_out(uint64,uint64,uint64)uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.amountIn, params.args.reserveIn, params.args.reserveOut],
    }
  }
  /**
   * Constructs a no op call for the get_user_liquidity()(uint64,uint64,uint64) ABI method
   *
   * Get user's liquidity position
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getUserLiquidity(params: CallParams<SimpleAmmArgs['obj']['get_user_liquidity()(uint64,uint64,uint64)'] | SimpleAmmArgs['tuple']['get_user_liquidity()(uint64,uint64,uint64)']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'get_user_liquidity()(uint64,uint64,uint64)' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the get_pool_info()(uint64,uint64,uint64,uint64) ABI method
   *
   * Get pool information
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getPoolInfo(params: CallParams<SimpleAmmArgs['obj']['get_pool_info()(uint64,uint64,uint64,uint64)'] | SimpleAmmArgs['tuple']['get_pool_info()(uint64,uint64,uint64,uint64)']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'get_pool_info()(uint64,uint64,uint64,uint64)' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the remove_liquidity(uint64)string ABI method
   *
   * Remove liquidity from the pool
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static removeLiquidity(params: CallParams<SimpleAmmArgs['obj']['remove_liquidity(uint64)string'] | SimpleAmmArgs['tuple']['remove_liquidity(uint64)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'remove_liquidity(uint64)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.liquidityAmount],
    }
  }
  /**
   * Constructs a no op call for the set_fee_rate(uint64)string ABI method
   *
   * Set swap fee rate (admin only)
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static setFeeRate(params: CallParams<SimpleAmmArgs['obj']['set_fee_rate(uint64)string'] | SimpleAmmArgs['tuple']['set_fee_rate(uint64)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'set_fee_rate(uint64)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.newFee],
    }
  }
  /**
   * Constructs a no op call for the pause_amm()string ABI method
   *
   * Pause the AMM (admin only)
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static pauseAmm(params: CallParams<SimpleAmmArgs['obj']['pause_amm()string'] | SimpleAmmArgs['tuple']['pause_amm()string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'pause_amm()string' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the unpause_amm()string ABI method
   *
   * Unpause the AMM (admin only)
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static unpauseAmm(params: CallParams<SimpleAmmArgs['obj']['unpause_amm()string'] | SimpleAmmArgs['tuple']['unpause_amm()string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'unpause_amm()string' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the SimpleAMM smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class SimpleAmmFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `SimpleAmmFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClient {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new SimpleAmmClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new SimpleAmmClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the SimpleAMM smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: SimpleAmmDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
    })
    return { result: result.result, appClient: new SimpleAmmClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the SimpleAMM smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The params for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.params.bare.create(params)
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the SimpleAMM smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The transaction for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.createTransaction.bare.create(params)
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the SimpleAMM smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The create result
       */
      bare: async (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        const result = await this.appFactory.send.bare.create(params)
        return { result: result.result, appClient: new SimpleAmmClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the SimpleAMM smart contract
 */
export class SimpleAmmClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `SimpleAmmClient`
   *
   * @param appClient An `AppClient` instance which has been created with the SimpleAmm app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `SimpleAmmClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends SimpleAmmNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `SimpleAmmClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<SimpleAmmClient> {
    return new SimpleAmmClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `SimpleAmmClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<SimpleAmmClient> {
    return new SimpleAmmClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClient {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the SimpleAMM smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the SimpleAMM smart contract using the `initialize()string` ABI method.
     *
     * Initialize the AMM
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    initialize: (params: CallParams<SimpleAmmArgs['obj']['initialize()string'] | SimpleAmmArgs['tuple']['initialize()string']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(SimpleAmmParamsFactory.initialize(params))
    },

    /**
     * Makes a call to the SimpleAMM smart contract using the `add_liquidity(uint64,uint64)string` ABI method.
     *
     * Add liquidity to the pool
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    addLiquidity: (params: CallParams<SimpleAmmArgs['obj']['add_liquidity(uint64,uint64)string'] | SimpleAmmArgs['tuple']['add_liquidity(uint64,uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(SimpleAmmParamsFactory.addLiquidity(params))
    },

    /**
     * Makes a call to the SimpleAMM smart contract using the `swap_a_for_b(uint64)string` ABI method.
     *
     * Swap token A for token B
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    swapAForB: (params: CallParams<SimpleAmmArgs['obj']['swap_a_for_b(uint64)string'] | SimpleAmmArgs['tuple']['swap_a_for_b(uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(SimpleAmmParamsFactory.swapAForB(params))
    },

    /**
     * Makes a call to the SimpleAMM smart contract using the `swap_b_for_a(uint64)string` ABI method.
     *
     * Swap token B for token A
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    swapBForA: (params: CallParams<SimpleAmmArgs['obj']['swap_b_for_a(uint64)string'] | SimpleAmmArgs['tuple']['swap_b_for_a(uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(SimpleAmmParamsFactory.swapBForA(params))
    },

    /**
     * Makes a call to the SimpleAMM smart contract using the `get_reserves()(uint64,uint64)` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Get current reserves
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getReserves: (params: CallParams<SimpleAmmArgs['obj']['get_reserves()(uint64,uint64)'] | SimpleAmmArgs['tuple']['get_reserves()(uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(SimpleAmmParamsFactory.getReserves(params))
    },

    /**
     * Makes a call to the SimpleAMM smart contract using the `get_amount_out(uint64,uint64,uint64)uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Calculate output amount for a given input
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getAmountOut: (params: CallParams<SimpleAmmArgs['obj']['get_amount_out(uint64,uint64,uint64)uint64'] | SimpleAmmArgs['tuple']['get_amount_out(uint64,uint64,uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(SimpleAmmParamsFactory.getAmountOut(params))
    },

    /**
     * Makes a call to the SimpleAMM smart contract using the `get_user_liquidity()(uint64,uint64,uint64)` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Get user's liquidity position
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getUserLiquidity: (params: CallParams<SimpleAmmArgs['obj']['get_user_liquidity()(uint64,uint64,uint64)'] | SimpleAmmArgs['tuple']['get_user_liquidity()(uint64,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(SimpleAmmParamsFactory.getUserLiquidity(params))
    },

    /**
     * Makes a call to the SimpleAMM smart contract using the `get_pool_info()(uint64,uint64,uint64,uint64)` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Get pool information
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getPoolInfo: (params: CallParams<SimpleAmmArgs['obj']['get_pool_info()(uint64,uint64,uint64,uint64)'] | SimpleAmmArgs['tuple']['get_pool_info()(uint64,uint64,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(SimpleAmmParamsFactory.getPoolInfo(params))
    },

    /**
     * Makes a call to the SimpleAMM smart contract using the `remove_liquidity(uint64)string` ABI method.
     *
     * Remove liquidity from the pool
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    removeLiquidity: (params: CallParams<SimpleAmmArgs['obj']['remove_liquidity(uint64)string'] | SimpleAmmArgs['tuple']['remove_liquidity(uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(SimpleAmmParamsFactory.removeLiquidity(params))
    },

    /**
     * Makes a call to the SimpleAMM smart contract using the `set_fee_rate(uint64)string` ABI method.
     *
     * Set swap fee rate (admin only)
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    setFeeRate: (params: CallParams<SimpleAmmArgs['obj']['set_fee_rate(uint64)string'] | SimpleAmmArgs['tuple']['set_fee_rate(uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(SimpleAmmParamsFactory.setFeeRate(params))
    },

    /**
     * Makes a call to the SimpleAMM smart contract using the `pause_amm()string` ABI method.
     *
     * Pause the AMM (admin only)
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    pauseAmm: (params: CallParams<SimpleAmmArgs['obj']['pause_amm()string'] | SimpleAmmArgs['tuple']['pause_amm()string']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(SimpleAmmParamsFactory.pauseAmm(params))
    },

    /**
     * Makes a call to the SimpleAMM smart contract using the `unpause_amm()string` ABI method.
     *
     * Unpause the AMM (admin only)
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    unpauseAmm: (params: CallParams<SimpleAmmArgs['obj']['unpause_amm()string'] | SimpleAmmArgs['tuple']['unpause_amm()string']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(SimpleAmmParamsFactory.unpauseAmm(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the SimpleAMM smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the SimpleAMM smart contract using the `initialize()string` ABI method.
     *
     * Initialize the AMM
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    initialize: (params: CallParams<SimpleAmmArgs['obj']['initialize()string'] | SimpleAmmArgs['tuple']['initialize()string']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(SimpleAmmParamsFactory.initialize(params))
    },

    /**
     * Makes a call to the SimpleAMM smart contract using the `add_liquidity(uint64,uint64)string` ABI method.
     *
     * Add liquidity to the pool
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    addLiquidity: (params: CallParams<SimpleAmmArgs['obj']['add_liquidity(uint64,uint64)string'] | SimpleAmmArgs['tuple']['add_liquidity(uint64,uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(SimpleAmmParamsFactory.addLiquidity(params))
    },

    /**
     * Makes a call to the SimpleAMM smart contract using the `swap_a_for_b(uint64)string` ABI method.
     *
     * Swap token A for token B
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    swapAForB: (params: CallParams<SimpleAmmArgs['obj']['swap_a_for_b(uint64)string'] | SimpleAmmArgs['tuple']['swap_a_for_b(uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(SimpleAmmParamsFactory.swapAForB(params))
    },

    /**
     * Makes a call to the SimpleAMM smart contract using the `swap_b_for_a(uint64)string` ABI method.
     *
     * Swap token B for token A
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    swapBForA: (params: CallParams<SimpleAmmArgs['obj']['swap_b_for_a(uint64)string'] | SimpleAmmArgs['tuple']['swap_b_for_a(uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(SimpleAmmParamsFactory.swapBForA(params))
    },

    /**
     * Makes a call to the SimpleAMM smart contract using the `get_reserves()(uint64,uint64)` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Get current reserves
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getReserves: (params: CallParams<SimpleAmmArgs['obj']['get_reserves()(uint64,uint64)'] | SimpleAmmArgs['tuple']['get_reserves()(uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(SimpleAmmParamsFactory.getReserves(params))
    },

    /**
     * Makes a call to the SimpleAMM smart contract using the `get_amount_out(uint64,uint64,uint64)uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Calculate output amount for a given input
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getAmountOut: (params: CallParams<SimpleAmmArgs['obj']['get_amount_out(uint64,uint64,uint64)uint64'] | SimpleAmmArgs['tuple']['get_amount_out(uint64,uint64,uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(SimpleAmmParamsFactory.getAmountOut(params))
    },

    /**
     * Makes a call to the SimpleAMM smart contract using the `get_user_liquidity()(uint64,uint64,uint64)` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Get user's liquidity position
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getUserLiquidity: (params: CallParams<SimpleAmmArgs['obj']['get_user_liquidity()(uint64,uint64,uint64)'] | SimpleAmmArgs['tuple']['get_user_liquidity()(uint64,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(SimpleAmmParamsFactory.getUserLiquidity(params))
    },

    /**
     * Makes a call to the SimpleAMM smart contract using the `get_pool_info()(uint64,uint64,uint64,uint64)` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Get pool information
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getPoolInfo: (params: CallParams<SimpleAmmArgs['obj']['get_pool_info()(uint64,uint64,uint64,uint64)'] | SimpleAmmArgs['tuple']['get_pool_info()(uint64,uint64,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(SimpleAmmParamsFactory.getPoolInfo(params))
    },

    /**
     * Makes a call to the SimpleAMM smart contract using the `remove_liquidity(uint64)string` ABI method.
     *
     * Remove liquidity from the pool
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    removeLiquidity: (params: CallParams<SimpleAmmArgs['obj']['remove_liquidity(uint64)string'] | SimpleAmmArgs['tuple']['remove_liquidity(uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(SimpleAmmParamsFactory.removeLiquidity(params))
    },

    /**
     * Makes a call to the SimpleAMM smart contract using the `set_fee_rate(uint64)string` ABI method.
     *
     * Set swap fee rate (admin only)
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    setFeeRate: (params: CallParams<SimpleAmmArgs['obj']['set_fee_rate(uint64)string'] | SimpleAmmArgs['tuple']['set_fee_rate(uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(SimpleAmmParamsFactory.setFeeRate(params))
    },

    /**
     * Makes a call to the SimpleAMM smart contract using the `pause_amm()string` ABI method.
     *
     * Pause the AMM (admin only)
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    pauseAmm: (params: CallParams<SimpleAmmArgs['obj']['pause_amm()string'] | SimpleAmmArgs['tuple']['pause_amm()string']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(SimpleAmmParamsFactory.pauseAmm(params))
    },

    /**
     * Makes a call to the SimpleAMM smart contract using the `unpause_amm()string` ABI method.
     *
     * Unpause the AMM (admin only)
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    unpauseAmm: (params: CallParams<SimpleAmmArgs['obj']['unpause_amm()string'] | SimpleAmmArgs['tuple']['unpause_amm()string']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(SimpleAmmParamsFactory.unpauseAmm(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the SimpleAMM smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the SimpleAMM smart contract using the `initialize()string` ABI method.
     *
     * Initialize the AMM
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    initialize: async (params: CallParams<SimpleAmmArgs['obj']['initialize()string'] | SimpleAmmArgs['tuple']['initialize()string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(SimpleAmmParamsFactory.initialize(params))
      return {...result, return: result.return as unknown as (undefined | SimpleAmmReturns['initialize()string'])}
    },

    /**
     * Makes a call to the SimpleAMM smart contract using the `add_liquidity(uint64,uint64)string` ABI method.
     *
     * Add liquidity to the pool
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    addLiquidity: async (params: CallParams<SimpleAmmArgs['obj']['add_liquidity(uint64,uint64)string'] | SimpleAmmArgs['tuple']['add_liquidity(uint64,uint64)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(SimpleAmmParamsFactory.addLiquidity(params))
      return {...result, return: result.return as unknown as (undefined | SimpleAmmReturns['add_liquidity(uint64,uint64)string'])}
    },

    /**
     * Makes a call to the SimpleAMM smart contract using the `swap_a_for_b(uint64)string` ABI method.
     *
     * Swap token A for token B
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    swapAForB: async (params: CallParams<SimpleAmmArgs['obj']['swap_a_for_b(uint64)string'] | SimpleAmmArgs['tuple']['swap_a_for_b(uint64)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(SimpleAmmParamsFactory.swapAForB(params))
      return {...result, return: result.return as unknown as (undefined | SimpleAmmReturns['swap_a_for_b(uint64)string'])}
    },

    /**
     * Makes a call to the SimpleAMM smart contract using the `swap_b_for_a(uint64)string` ABI method.
     *
     * Swap token B for token A
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    swapBForA: async (params: CallParams<SimpleAmmArgs['obj']['swap_b_for_a(uint64)string'] | SimpleAmmArgs['tuple']['swap_b_for_a(uint64)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(SimpleAmmParamsFactory.swapBForA(params))
      return {...result, return: result.return as unknown as (undefined | SimpleAmmReturns['swap_b_for_a(uint64)string'])}
    },

    /**
     * Makes a call to the SimpleAMM smart contract using the `get_reserves()(uint64,uint64)` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Get current reserves
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getReserves: async (params: CallParams<SimpleAmmArgs['obj']['get_reserves()(uint64,uint64)'] | SimpleAmmArgs['tuple']['get_reserves()(uint64,uint64)']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(SimpleAmmParamsFactory.getReserves(params))
      return {...result, return: result.return as unknown as (undefined | SimpleAmmReturns['get_reserves()(uint64,uint64)'])}
    },

    /**
     * Makes a call to the SimpleAMM smart contract using the `get_amount_out(uint64,uint64,uint64)uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Calculate output amount for a given input
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getAmountOut: async (params: CallParams<SimpleAmmArgs['obj']['get_amount_out(uint64,uint64,uint64)uint64'] | SimpleAmmArgs['tuple']['get_amount_out(uint64,uint64,uint64)uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(SimpleAmmParamsFactory.getAmountOut(params))
      return {...result, return: result.return as unknown as (undefined | SimpleAmmReturns['get_amount_out(uint64,uint64,uint64)uint64'])}
    },

    /**
     * Makes a call to the SimpleAMM smart contract using the `get_user_liquidity()(uint64,uint64,uint64)` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Get user's liquidity position
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getUserLiquidity: async (params: CallParams<SimpleAmmArgs['obj']['get_user_liquidity()(uint64,uint64,uint64)'] | SimpleAmmArgs['tuple']['get_user_liquidity()(uint64,uint64,uint64)']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(SimpleAmmParamsFactory.getUserLiquidity(params))
      return {...result, return: result.return as unknown as (undefined | SimpleAmmReturns['get_user_liquidity()(uint64,uint64,uint64)'])}
    },

    /**
     * Makes a call to the SimpleAMM smart contract using the `get_pool_info()(uint64,uint64,uint64,uint64)` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Get pool information
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getPoolInfo: async (params: CallParams<SimpleAmmArgs['obj']['get_pool_info()(uint64,uint64,uint64,uint64)'] | SimpleAmmArgs['tuple']['get_pool_info()(uint64,uint64,uint64,uint64)']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(SimpleAmmParamsFactory.getPoolInfo(params))
      return {...result, return: result.return as unknown as (undefined | SimpleAmmReturns['get_pool_info()(uint64,uint64,uint64,uint64)'])}
    },

    /**
     * Makes a call to the SimpleAMM smart contract using the `remove_liquidity(uint64)string` ABI method.
     *
     * Remove liquidity from the pool
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    removeLiquidity: async (params: CallParams<SimpleAmmArgs['obj']['remove_liquidity(uint64)string'] | SimpleAmmArgs['tuple']['remove_liquidity(uint64)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(SimpleAmmParamsFactory.removeLiquidity(params))
      return {...result, return: result.return as unknown as (undefined | SimpleAmmReturns['remove_liquidity(uint64)string'])}
    },

    /**
     * Makes a call to the SimpleAMM smart contract using the `set_fee_rate(uint64)string` ABI method.
     *
     * Set swap fee rate (admin only)
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    setFeeRate: async (params: CallParams<SimpleAmmArgs['obj']['set_fee_rate(uint64)string'] | SimpleAmmArgs['tuple']['set_fee_rate(uint64)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(SimpleAmmParamsFactory.setFeeRate(params))
      return {...result, return: result.return as unknown as (undefined | SimpleAmmReturns['set_fee_rate(uint64)string'])}
    },

    /**
     * Makes a call to the SimpleAMM smart contract using the `pause_amm()string` ABI method.
     *
     * Pause the AMM (admin only)
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    pauseAmm: async (params: CallParams<SimpleAmmArgs['obj']['pause_amm()string'] | SimpleAmmArgs['tuple']['pause_amm()string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(SimpleAmmParamsFactory.pauseAmm(params))
      return {...result, return: result.return as unknown as (undefined | SimpleAmmReturns['pause_amm()string'])}
    },

    /**
     * Makes a call to the SimpleAMM smart contract using the `unpause_amm()string` ABI method.
     *
     * Unpause the AMM (admin only)
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    unpauseAmm: async (params: CallParams<SimpleAmmArgs['obj']['unpause_amm()string'] | SimpleAmmArgs['tuple']['unpause_amm()string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(SimpleAmmParamsFactory.unpauseAmm(params))
      return {...result, return: result.return as unknown as (undefined | SimpleAmmReturns['unpause_amm()string'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new SimpleAmmClient(this.appClient.clone(params))
  }

  /**
   * Makes a readonly (simulated) call to the SimpleAMM smart contract using the `get_reserves()(uint64,uint64)` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * Get current reserves
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async getReserves(params: CallParams<SimpleAmmArgs['obj']['get_reserves()(uint64,uint64)'] | SimpleAmmArgs['tuple']['get_reserves()(uint64,uint64)']> = {args: []}) {
    const result = await this.appClient.send.call(SimpleAmmParamsFactory.getReserves(params))
    return result.return as unknown as SimpleAmmReturns['get_reserves()(uint64,uint64)']
  }

  /**
   * Makes a readonly (simulated) call to the SimpleAMM smart contract using the `get_amount_out(uint64,uint64,uint64)uint64` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * Calculate output amount for a given input
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async getAmountOut(params: CallParams<SimpleAmmArgs['obj']['get_amount_out(uint64,uint64,uint64)uint64'] | SimpleAmmArgs['tuple']['get_amount_out(uint64,uint64,uint64)uint64']>) {
    const result = await this.appClient.send.call(SimpleAmmParamsFactory.getAmountOut(params))
    return result.return as unknown as SimpleAmmReturns['get_amount_out(uint64,uint64,uint64)uint64']
  }

  /**
   * Makes a readonly (simulated) call to the SimpleAMM smart contract using the `get_user_liquidity()(uint64,uint64,uint64)` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * Get user's liquidity position
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async getUserLiquidity(params: CallParams<SimpleAmmArgs['obj']['get_user_liquidity()(uint64,uint64,uint64)'] | SimpleAmmArgs['tuple']['get_user_liquidity()(uint64,uint64,uint64)']> = {args: []}) {
    const result = await this.appClient.send.call(SimpleAmmParamsFactory.getUserLiquidity(params))
    return result.return as unknown as SimpleAmmReturns['get_user_liquidity()(uint64,uint64,uint64)']
  }

  /**
   * Makes a readonly (simulated) call to the SimpleAMM smart contract using the `get_pool_info()(uint64,uint64,uint64,uint64)` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * Get pool information
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async getPoolInfo(params: CallParams<SimpleAmmArgs['obj']['get_pool_info()(uint64,uint64,uint64,uint64)'] | SimpleAmmArgs['tuple']['get_pool_info()(uint64,uint64,uint64,uint64)']> = {args: []}) {
    const result = await this.appClient.send.call(SimpleAmmParamsFactory.getPoolInfo(params))
    return result.return as unknown as SimpleAmmReturns['get_pool_info()(uint64,uint64,uint64,uint64)']
  }

  /**
   * Methods to access state for the current SimpleAMM app
   */
  state = {
    /**
     * Methods to access global state for the current SimpleAMM app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          admin: new BinaryStateValue(result.admin),
          reserveA: result.reserve_a,
          reserveB: result.reserve_b,
          feeRate: result.fee_rate,
          isPaused: result.is_paused,
          totalLiquidity: result.total_liquidity,
          feeDenominator: result.fee_denominator,
        }
      },
      /**
       * Get the current value of the admin key in global state
       */
      admin: async (): Promise<BinaryState> => { return new BinaryStateValue((await this.appClient.state.global.getValue("admin")) as Uint8Array | undefined) },
      /**
       * Get the current value of the reserve_a key in global state
       */
      reserveA: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("reserve_a")) as bigint | undefined },
      /**
       * Get the current value of the reserve_b key in global state
       */
      reserveB: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("reserve_b")) as bigint | undefined },
      /**
       * Get the current value of the fee_rate key in global state
       */
      feeRate: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("fee_rate")) as bigint | undefined },
      /**
       * Get the current value of the is_paused key in global state
       */
      isPaused: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("is_paused")) as bigint | undefined },
      /**
       * Get the current value of the total_liquidity key in global state
       */
      totalLiquidity: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("total_liquidity")) as bigint | undefined },
      /**
       * Get the current value of the fee_denominator key in global state
       */
      feeDenominator: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("fee_denominator")) as bigint | undefined },
    },
    /**
     * Methods to access local state for the current SimpleAMM app
     */
    local: (address: string | Address) => {
      const encodedAddress = typeof address === 'string' ? address : encodeAddress(address.publicKey)
      return {
        /**
         * Get all current keyed values from local state
         */
        getAll: async (): Promise<Partial<Expand<LocalKeysState>>> => {
          const result = await this.appClient.state.local(encodedAddress).getAll()
          return {
            liquidityBalance: result.liquidity_balance,
            tokenADeposited: result.token_a_deposited,
            tokenBDeposited: result.token_b_deposited,
          }
        },
        /**
         * Get the current value of the liquidity_balance key in local state
         */
        liquidityBalance: async (): Promise<bigint | undefined> => { return (await this.appClient.state.local(encodedAddress).getValue("liquidity_balance")) as bigint | undefined },
        /**
         * Get the current value of the token_a_deposited key in local state
         */
        tokenADeposited: async (): Promise<bigint | undefined> => { return (await this.appClient.state.local(encodedAddress).getValue("token_a_deposited")) as bigint | undefined },
        /**
         * Get the current value of the token_b_deposited key in local state
         */
        tokenBDeposited: async (): Promise<bigint | undefined> => { return (await this.appClient.state.local(encodedAddress).getValue("token_b_deposited")) as bigint | undefined },
      }
    },
  }

  public newGroup(): SimpleAmmComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a initialize()string method call against the SimpleAMM contract
       */
      initialize(params: CallParams<SimpleAmmArgs['obj']['initialize()string'] | SimpleAmmArgs['tuple']['initialize()string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.initialize(params)))
        resultMappers.push((v) => client.decodeReturnValue('initialize()string', v))
        return this
      },
      /**
       * Add a add_liquidity(uint64,uint64)string method call against the SimpleAMM contract
       */
      addLiquidity(params: CallParams<SimpleAmmArgs['obj']['add_liquidity(uint64,uint64)string'] | SimpleAmmArgs['tuple']['add_liquidity(uint64,uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.addLiquidity(params)))
        resultMappers.push((v) => client.decodeReturnValue('add_liquidity(uint64,uint64)string', v))
        return this
      },
      /**
       * Add a swap_a_for_b(uint64)string method call against the SimpleAMM contract
       */
      swapAForB(params: CallParams<SimpleAmmArgs['obj']['swap_a_for_b(uint64)string'] | SimpleAmmArgs['tuple']['swap_a_for_b(uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.swapAForB(params)))
        resultMappers.push((v) => client.decodeReturnValue('swap_a_for_b(uint64)string', v))
        return this
      },
      /**
       * Add a swap_b_for_a(uint64)string method call against the SimpleAMM contract
       */
      swapBForA(params: CallParams<SimpleAmmArgs['obj']['swap_b_for_a(uint64)string'] | SimpleAmmArgs['tuple']['swap_b_for_a(uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.swapBForA(params)))
        resultMappers.push((v) => client.decodeReturnValue('swap_b_for_a(uint64)string', v))
        return this
      },
      /**
       * Add a get_reserves()(uint64,uint64) method call against the SimpleAMM contract
       */
      getReserves(params: CallParams<SimpleAmmArgs['obj']['get_reserves()(uint64,uint64)'] | SimpleAmmArgs['tuple']['get_reserves()(uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getReserves(params)))
        resultMappers.push((v) => client.decodeReturnValue('get_reserves()(uint64,uint64)', v))
        return this
      },
      /**
       * Add a get_amount_out(uint64,uint64,uint64)uint64 method call against the SimpleAMM contract
       */
      getAmountOut(params: CallParams<SimpleAmmArgs['obj']['get_amount_out(uint64,uint64,uint64)uint64'] | SimpleAmmArgs['tuple']['get_amount_out(uint64,uint64,uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getAmountOut(params)))
        resultMappers.push((v) => client.decodeReturnValue('get_amount_out(uint64,uint64,uint64)uint64', v))
        return this
      },
      /**
       * Add a get_user_liquidity()(uint64,uint64,uint64) method call against the SimpleAMM contract
       */
      getUserLiquidity(params: CallParams<SimpleAmmArgs['obj']['get_user_liquidity()(uint64,uint64,uint64)'] | SimpleAmmArgs['tuple']['get_user_liquidity()(uint64,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getUserLiquidity(params)))
        resultMappers.push((v) => client.decodeReturnValue('get_user_liquidity()(uint64,uint64,uint64)', v))
        return this
      },
      /**
       * Add a get_pool_info()(uint64,uint64,uint64,uint64) method call against the SimpleAMM contract
       */
      getPoolInfo(params: CallParams<SimpleAmmArgs['obj']['get_pool_info()(uint64,uint64,uint64,uint64)'] | SimpleAmmArgs['tuple']['get_pool_info()(uint64,uint64,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getPoolInfo(params)))
        resultMappers.push((v) => client.decodeReturnValue('get_pool_info()(uint64,uint64,uint64,uint64)', v))
        return this
      },
      /**
       * Add a remove_liquidity(uint64)string method call against the SimpleAMM contract
       */
      removeLiquidity(params: CallParams<SimpleAmmArgs['obj']['remove_liquidity(uint64)string'] | SimpleAmmArgs['tuple']['remove_liquidity(uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.removeLiquidity(params)))
        resultMappers.push((v) => client.decodeReturnValue('remove_liquidity(uint64)string', v))
        return this
      },
      /**
       * Add a set_fee_rate(uint64)string method call against the SimpleAMM contract
       */
      setFeeRate(params: CallParams<SimpleAmmArgs['obj']['set_fee_rate(uint64)string'] | SimpleAmmArgs['tuple']['set_fee_rate(uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.setFeeRate(params)))
        resultMappers.push((v) => client.decodeReturnValue('set_fee_rate(uint64)string', v))
        return this
      },
      /**
       * Add a pause_amm()string method call against the SimpleAMM contract
       */
      pauseAmm(params: CallParams<SimpleAmmArgs['obj']['pause_amm()string'] | SimpleAmmArgs['tuple']['pause_amm()string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.pauseAmm(params)))
        resultMappers.push((v) => client.decodeReturnValue('pause_amm()string', v))
        return this
      },
      /**
       * Add a unpause_amm()string method call against the SimpleAMM contract
       */
      unpauseAmm(params: CallParams<SimpleAmmArgs['obj']['unpause_amm()string'] | SimpleAmmArgs['tuple']['unpause_amm()string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.unpauseAmm(params)))
        resultMappers.push((v) => client.decodeReturnValue('unpause_amm()string', v))
        return this
      },
      /**
       * Add a clear state call to the SimpleAMM contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as SimpleAmmComposer
  }
}
export type SimpleAmmComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the initialize()string ABI method.
   *
   * Initialize the AMM
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  initialize(params?: CallParams<SimpleAmmArgs['obj']['initialize()string'] | SimpleAmmArgs['tuple']['initialize()string']>): SimpleAmmComposer<[...TReturns, SimpleAmmReturns['initialize()string'] | undefined]>

  /**
   * Calls the add_liquidity(uint64,uint64)string ABI method.
   *
   * Add liquidity to the pool
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  addLiquidity(params?: CallParams<SimpleAmmArgs['obj']['add_liquidity(uint64,uint64)string'] | SimpleAmmArgs['tuple']['add_liquidity(uint64,uint64)string']>): SimpleAmmComposer<[...TReturns, SimpleAmmReturns['add_liquidity(uint64,uint64)string'] | undefined]>

  /**
   * Calls the swap_a_for_b(uint64)string ABI method.
   *
   * Swap token A for token B
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  swapAForB(params?: CallParams<SimpleAmmArgs['obj']['swap_a_for_b(uint64)string'] | SimpleAmmArgs['tuple']['swap_a_for_b(uint64)string']>): SimpleAmmComposer<[...TReturns, SimpleAmmReturns['swap_a_for_b(uint64)string'] | undefined]>

  /**
   * Calls the swap_b_for_a(uint64)string ABI method.
   *
   * Swap token B for token A
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  swapBForA(params?: CallParams<SimpleAmmArgs['obj']['swap_b_for_a(uint64)string'] | SimpleAmmArgs['tuple']['swap_b_for_a(uint64)string']>): SimpleAmmComposer<[...TReturns, SimpleAmmReturns['swap_b_for_a(uint64)string'] | undefined]>

  /**
   * Calls the get_reserves()(uint64,uint64) ABI method.
   *
   * Get current reserves
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getReserves(params?: CallParams<SimpleAmmArgs['obj']['get_reserves()(uint64,uint64)'] | SimpleAmmArgs['tuple']['get_reserves()(uint64,uint64)']>): SimpleAmmComposer<[...TReturns, SimpleAmmReturns['get_reserves()(uint64,uint64)'] | undefined]>

  /**
   * Calls the get_amount_out(uint64,uint64,uint64)uint64 ABI method.
   *
   * Calculate output amount for a given input
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getAmountOut(params?: CallParams<SimpleAmmArgs['obj']['get_amount_out(uint64,uint64,uint64)uint64'] | SimpleAmmArgs['tuple']['get_amount_out(uint64,uint64,uint64)uint64']>): SimpleAmmComposer<[...TReturns, SimpleAmmReturns['get_amount_out(uint64,uint64,uint64)uint64'] | undefined]>

  /**
   * Calls the get_user_liquidity()(uint64,uint64,uint64) ABI method.
   *
   * Get user's liquidity position
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getUserLiquidity(params?: CallParams<SimpleAmmArgs['obj']['get_user_liquidity()(uint64,uint64,uint64)'] | SimpleAmmArgs['tuple']['get_user_liquidity()(uint64,uint64,uint64)']>): SimpleAmmComposer<[...TReturns, SimpleAmmReturns['get_user_liquidity()(uint64,uint64,uint64)'] | undefined]>

  /**
   * Calls the get_pool_info()(uint64,uint64,uint64,uint64) ABI method.
   *
   * Get pool information
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getPoolInfo(params?: CallParams<SimpleAmmArgs['obj']['get_pool_info()(uint64,uint64,uint64,uint64)'] | SimpleAmmArgs['tuple']['get_pool_info()(uint64,uint64,uint64,uint64)']>): SimpleAmmComposer<[...TReturns, SimpleAmmReturns['get_pool_info()(uint64,uint64,uint64,uint64)'] | undefined]>

  /**
   * Calls the remove_liquidity(uint64)string ABI method.
   *
   * Remove liquidity from the pool
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  removeLiquidity(params?: CallParams<SimpleAmmArgs['obj']['remove_liquidity(uint64)string'] | SimpleAmmArgs['tuple']['remove_liquidity(uint64)string']>): SimpleAmmComposer<[...TReturns, SimpleAmmReturns['remove_liquidity(uint64)string'] | undefined]>

  /**
   * Calls the set_fee_rate(uint64)string ABI method.
   *
   * Set swap fee rate (admin only)
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setFeeRate(params?: CallParams<SimpleAmmArgs['obj']['set_fee_rate(uint64)string'] | SimpleAmmArgs['tuple']['set_fee_rate(uint64)string']>): SimpleAmmComposer<[...TReturns, SimpleAmmReturns['set_fee_rate(uint64)string'] | undefined]>

  /**
   * Calls the pause_amm()string ABI method.
   *
   * Pause the AMM (admin only)
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  pauseAmm(params?: CallParams<SimpleAmmArgs['obj']['pause_amm()string'] | SimpleAmmArgs['tuple']['pause_amm()string']>): SimpleAmmComposer<[...TReturns, SimpleAmmReturns['pause_amm()string'] | undefined]>

  /**
   * Calls the unpause_amm()string ABI method.
   *
   * Unpause the AMM (admin only)
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  unpauseAmm(params?: CallParams<SimpleAmmArgs['obj']['unpause_amm()string'] | SimpleAmmArgs['tuple']['unpause_amm()string']>): SimpleAmmComposer<[...TReturns, SimpleAmmReturns['unpause_amm()string'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the SimpleAMM smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): SimpleAmmComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): SimpleAmmComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<SimpleAmmComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<SimpleAmmComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<SimpleAmmComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<SimpleAmmComposerResults<TReturns>>
}
export type SimpleAmmComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

