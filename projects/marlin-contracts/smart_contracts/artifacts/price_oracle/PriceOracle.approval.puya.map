{
  "version": 3,
  "sources": [
    "../../price_oracle/contract.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyCQ;;AAA2B;;;AAA3B;AACA;;AAA2B;;;AAA3B;AACA;;AAA2B;;;AAA3B;AAbR;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AA0QK;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAhCA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AATA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AATA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AATA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAVA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAVA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AARA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AArBA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAbA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AATA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAbA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAfA;;AAAA;AAAA;AAAA;;AAAA;AA5GL;;;AAAA;AA4GK;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AA7CA;;AAAA;AAAA;AAAA;;AAAA;AA/DL;;;AAAA;AAAA;;;AAAA;AA+DK;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAZA;;AAAA;AAAA;AAAA;;AAAA;AAnDL;;;AAAA;;;AAmDK;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAtBA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AA7BL;;AAAA;;;;;;;;;AAgCe;;AAAc;;AAAd;AAAP;AAEA;AAAmB;;AAAnB;AACA;;AAAoC;AAApC;AACA;;AAAuB;AAAvB;AACA;;AAA2B;AAA3B;AACA;AAAyB;AAAzB;AACA;AAA6B;AAA7B;AACA;;AAA8B;AAA9B;AACA;;AAA6B;AAA7B;AACA;;AAA8B;AAA9B;AAGgB;;AAAhB;;AAA8B;AAA9B;AACA;;AAA2B;AAA3B;AAEI;;;;;;;;;;;;;;;;;;;;;;;;;AAAJ;AACO;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAP;AAER;;;AAGe;;AAAoB;AAAA;AAAA;AAAA;AAApB;AAAP;AAI2B;AAAA;;AAAA;AAAA;AAA2B;AAA3B;AAA3B;;AAAA;AAAA;AAEI;;;;;;;;;;;;;;;;;;;;;AAAJ;AACO;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAP;AAER;;;;;;;AAOe;AAAA;;AAAA;AAAA;AAAA;AAAP;AACO;AAAA;;AAAA;AAAA;AAAA;AAAP;AACA;;AAAA;AACO;;AAAc;AAAd;AAAP;AAKI;;AAAoB;AAAA;AAAA;AAAA;AAApB;AAAA;;;AAAwD;;AAAhB;AAAA;;AAAA;AAAA;AAA+B;AAA/B;AAAxC;;;;AADJ;AAIgB;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AACI;AAAA;AAAA;AAAA;AAAA;;AAAA;AAG5B;;;AAEgB;;AAA+C;AAAA;;AAAA;AAAA;AAApB;;AAAA;AAA3B;AADJ;AAkKZ;;AAAA;;;AACmB;AA7Ja;AAAA;;AAAA;AAAA;AAAb;AAAP;AAKJ;AAAA;;AAAA;AACA;AAA6B;;AAA7B;AACA;;AAAA;;AAAA;AACA;;;;;;;;;;;;;;;AAA2B;;AAA3B;AAiKG;AAAA;;AAAA;AAAA;AAA+B;AAA/B;AAAX;;;AACwB;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AACT;;AAAA;AAAf;;;AACqD;;AAAA;AAAjC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAA0D;;;;;;;;;;;;;;AAA1D;AAA4E;;AAAA;AAA5E;AAAJ;AA/JuB;;AAAA;AAA3B;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAgD;;;;;;;;AAAhD;AAA4D;;AAAA;AAA5D;AAAJ;AACO;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAP;;AAAA;AAiJG;;AAAA;;AAAA;AAAX;;;AAC0B;;AAAA;AAAA;;AAAA;AAAyB;AAA1B;AAAb;AAAY;;;;AAEE;;AAAA;;AAAA;AAAA;;AAAA;AAAyB;AAA1B;AAAb;AAAY;;;;;;;;AAlJxB;;;AAGQ;;AAAA;AAEI;;AAAoB;AAAA;AAAA;AAAA;AAApB;AAAA;;;AAAwD;;AAAhB;AAAA;;AAAA;AAAA;AAA+B;AAA/B;AAAxC;;;;AADJ;AAIA;;AAAA;;AAAA;AACA;;AAA8B;AAA9B;AACA;;;;;;;;;;;;;;;;;;AAA8B;;AAA9B;AAEiC;;AAAA;AAA7B;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAJ;AACO;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAP;;;;;AAKgB;AAAA;AAAA;AAAA;AACE;AAAA;AAAA;AAAA;AAElB;;AAAA;AAEI;;AAA6C;AAAA;;AAAA;AAAA;AAAlB;;AAAA;AAA3B;AADJ;AAIA;AAMgB;AAAA;AAAA;AAAA;AAAZ;AACY;AAAA;AAAA;AAAA;AAAZ;AACY;AAAA;;AAAA;AAAA;AAAZ;AAHG;;AAAA;AAAA;AAAA;AAAP;AAMR;;;AAG0B;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAE1B;;;AACmB;AAAP;AAAA;AAED;;AAA4C;AAAA;;AAAA;AAAA;AAAlB;;AAAA;AAA1B;AAAX;;;AACmB;AAAP;AAAA;AAEO;AAAP;AAAA;AAEZ;;;;;;AAGW;AAAA;;AAAA;AAAA;AAAX;;;AACmB;AAAP;;AAAA;AAEY;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AACJ;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAEpB;;;AACmB;AAAP;;AAAA;AAGD;;;AAAyB;AAAzB;AAAX;;;AACmB;AAAP;;AAAA;AAED;;AAAA;;AAAA;AAAX;;;AACmB;AAAP;;AAAA;AAEO;AAAP;;AAAA;AAMY;AAAA;;AAAA;AAAA;AAAZ;AACY;AAAA;;AAAA;AAAA;AAAZ;AAFG;AAAP;AAQO;;AAAoB;AAAA;AAAA;AAAA;AAApB;AAAP;AAEA;;AAAoC;AAApC;AAEI;;AAAJ;AACO;;AAAP;AAKO;;AAAoB;AAAA;AAAA;AAAA;AAApB;AAAP;AAEA;;AAAoC;AAApC;AAEI;;AAAJ;AACO;;AAAP;AAKO;;AAAoB;AAAA;AAAA;AAAA;AAApB;AAAP;AACA;;AAAuB;AAAvB;AAEI;;AAAJ;AACO;;AAAP;AAKO;;AAAoB;AAAA;AAAA;AAAA;AAApB;AAAP;AACA;;AAAuB;AAAvB;AAEI;;AAAJ;AACO;;AAAP;AAMgB;AAAA;;AAAA;AAAA;AAAZ;AACY;AAAA;;AAAA;AAAA;AAAZ;AACY;AAAA;;AAAA;AAAA;AAAZ;AAHG;;AAAA;AAAA;AAAA;AAAP;AASO;;AAAoB;AAAA;AAAA;AAAA;AAApB;AAAP;AAEA;;AAA8B;AAA9B;AACA;;AAA6B;AAA7B;AAEI;;;;;;;;;;;;;;;;;;;AAAJ;AACO;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAP;AA6BgB;AAAA;AAAA;AAAA;AAAZ;AADG;AAAA;;AAAA;AAAA;AAAA;AAAP",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "smart_contracts.price_oracle.contract.PriceOracle.__algopy_entrypoint_with_init",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1 10000"
    },
    "7": {
      "op": "bytecblock 0x151f7c75 \"admin\" \"token_price\" \"price_timestamp\" \"threshold_price\" \"threshold_active\" \"circuit_breaker\" \"is_paused\" \"updater_count\" \"staleness_threshold\" \"price_confidence\" \"is_updater\" \"max_price_deviation\" \"min_update_interval\" 0x4369726375697420627265616b657220616374697661746564 0x4369726375697420627265616b6572207265736574 0x4f7261636c6520706175736564 0x4f7261636c6520756e706175736564"
    },
    "287": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "289": {
      "op": "bnz main_after_if_else@2",
      "stack_out": []
    },
    "292": {
      "op": "bytec 12 // \"max_price_deviation\"",
      "defined_out": [
        "\"max_price_deviation\""
      ],
      "stack_out": [
        "\"max_price_deviation\""
      ]
    },
    "294": {
      "op": "pushint 1000 // 1000",
      "defined_out": [
        "\"max_price_deviation\"",
        "1000"
      ],
      "stack_out": [
        "\"max_price_deviation\"",
        "1000"
      ]
    },
    "297": {
      "op": "app_global_put",
      "stack_out": []
    },
    "298": {
      "op": "bytec 13 // \"min_update_interval\"",
      "defined_out": [
        "\"min_update_interval\""
      ],
      "stack_out": [
        "\"min_update_interval\""
      ]
    },
    "300": {
      "op": "pushint 300 // 300",
      "defined_out": [
        "\"min_update_interval\"",
        "300"
      ],
      "stack_out": [
        "\"min_update_interval\"",
        "300"
      ]
    },
    "303": {
      "op": "app_global_put",
      "stack_out": []
    },
    "304": {
      "op": "bytec 9 // \"staleness_threshold\"",
      "defined_out": [
        "\"staleness_threshold\""
      ],
      "stack_out": [
        "\"staleness_threshold\""
      ]
    },
    "306": {
      "op": "pushint 3600 // 3600",
      "defined_out": [
        "\"staleness_threshold\"",
        "3600"
      ],
      "stack_out": [
        "\"staleness_threshold\"",
        "3600"
      ]
    },
    "309": {
      "op": "app_global_put",
      "stack_out": []
    },
    "310": {
      "block": "main_after_if_else@2",
      "stack_in": [],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#2"
      ],
      "stack_out": [
        "tmp%0#2"
      ]
    },
    "312": {
      "op": "bz main_bare_routing@21",
      "stack_out": []
    },
    "315": {
      "op": "pushbytess 0x897ad1a7 0xdd99d59a 0x12c1126f 0x7dc6483c 0x5d3878d0 0x144fe4f9 0x6a76def2 0xfa8cff2d 0xfd9c53e0 0x45a05b30 0x7a451eaa 0x6fe40fe1 0x8dac55d3 0x74b65876 0x25376950 0x4cf3645a // method \"initialize()string\", method \"add_price_updater(byte[])string\", method \"update_price(uint64,uint64)string\", method \"set_threshold(uint64)string\", method \"get_price()uint64\", method \"get_price_info()(uint64,uint64,uint64)\", method \"is_price_stale()uint64\", method \"threshold_reached()uint64\", method \"get_threshold_info()(uint64,uint64)\", method \"activate_circuit_breaker()string\", method \"reset_circuit_breaker()string\", method \"pause_oracle()string\", method \"unpause_oracle()string\", method \"get_oracle_status()(uint64,uint64,uint64)\", method \"remove_threshold()string\", method \"get_price_history_summary()(uint64,uint64,uint64)\"",
      "defined_out": [
        "Method(activate_circuit_breaker()string)",
        "Method(add_price_updater(byte[])string)",
        "Method(get_oracle_status()(uint64,uint64,uint64))",
        "Method(get_price()uint64)",
        "Method(get_price_history_summary()(uint64,uint64,uint64))",
        "Method(get_price_info()(uint64,uint64,uint64))",
        "Method(get_threshold_info()(uint64,uint64))",
        "Method(initialize()string)",
        "Method(is_price_stale()uint64)",
        "Method(pause_oracle()string)",
        "Method(remove_threshold()string)",
        "Method(reset_circuit_breaker()string)",
        "Method(set_threshold(uint64)string)",
        "Method(threshold_reached()uint64)",
        "Method(unpause_oracle()string)",
        "Method(update_price(uint64,uint64)string)"
      ],
      "stack_out": [
        "Method(initialize()string)",
        "Method(add_price_updater(byte[])string)",
        "Method(update_price(uint64,uint64)string)",
        "Method(set_threshold(uint64)string)",
        "Method(get_price()uint64)",
        "Method(get_price_info()(uint64,uint64,uint64))",
        "Method(is_price_stale()uint64)",
        "Method(threshold_reached()uint64)",
        "Method(get_threshold_info()(uint64,uint64))",
        "Method(activate_circuit_breaker()string)",
        "Method(reset_circuit_breaker()string)",
        "Method(pause_oracle()string)",
        "Method(unpause_oracle()string)",
        "Method(get_oracle_status()(uint64,uint64,uint64))",
        "Method(remove_threshold()string)",
        "Method(get_price_history_summary()(uint64,uint64,uint64))"
      ]
    },
    "397": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(activate_circuit_breaker()string)",
        "Method(add_price_updater(byte[])string)",
        "Method(get_oracle_status()(uint64,uint64,uint64))",
        "Method(get_price()uint64)",
        "Method(get_price_history_summary()(uint64,uint64,uint64))",
        "Method(get_price_info()(uint64,uint64,uint64))",
        "Method(get_threshold_info()(uint64,uint64))",
        "Method(initialize()string)",
        "Method(is_price_stale()uint64)",
        "Method(pause_oracle()string)",
        "Method(remove_threshold()string)",
        "Method(reset_circuit_breaker()string)",
        "Method(set_threshold(uint64)string)",
        "Method(threshold_reached()uint64)",
        "Method(unpause_oracle()string)",
        "Method(update_price(uint64,uint64)string)",
        "tmp%2#0"
      ],
      "stack_out": [
        "Method(initialize()string)",
        "Method(add_price_updater(byte[])string)",
        "Method(update_price(uint64,uint64)string)",
        "Method(set_threshold(uint64)string)",
        "Method(get_price()uint64)",
        "Method(get_price_info()(uint64,uint64,uint64))",
        "Method(is_price_stale()uint64)",
        "Method(threshold_reached()uint64)",
        "Method(get_threshold_info()(uint64,uint64))",
        "Method(activate_circuit_breaker()string)",
        "Method(reset_circuit_breaker()string)",
        "Method(pause_oracle()string)",
        "Method(unpause_oracle()string)",
        "Method(get_oracle_status()(uint64,uint64,uint64))",
        "Method(remove_threshold()string)",
        "Method(get_price_history_summary()(uint64,uint64,uint64))",
        "tmp%2#0"
      ]
    },
    "400": {
      "op": "match main_initialize_route@5 main_add_price_updater_route@6 main_update_price_route@7 main_set_threshold_route@8 main_get_price_route@9 main_get_price_info_route@10 main_is_price_stale_route@11 main_threshold_reached_route@12 main_get_threshold_info_route@13 main_activate_circuit_breaker_route@14 main_reset_circuit_breaker_route@15 main_pause_oracle_route@16 main_unpause_oracle_route@17 main_get_oracle_status_route@18 main_remove_threshold_route@19 main_get_price_history_summary_route@20",
      "stack_out": []
    },
    "434": {
      "block": "main_after_if_else@23",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "435": {
      "op": "return",
      "stack_out": []
    },
    "436": {
      "block": "main_get_price_history_summary_route@20",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%86#0"
      ],
      "stack_out": [
        "tmp%86#0"
      ]
    },
    "438": {
      "op": "!",
      "defined_out": [
        "tmp%87#0"
      ],
      "stack_out": [
        "tmp%87#0"
      ]
    },
    "439": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "440": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%88#0"
      ],
      "stack_out": [
        "tmp%88#0"
      ]
    },
    "442": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "443": {
      "callsub": "smart_contracts.price_oracle.contract.PriceOracle.get_price_history_summary",
      "op": "callsub get_price_history_summary",
      "defined_out": [
        "tmp%90#0"
      ],
      "stack_out": [
        "tmp%90#0"
      ]
    },
    "446": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%90#0"
      ],
      "stack_out": [
        "tmp%90#0",
        "0x151f7c75"
      ]
    },
    "447": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%90#0"
      ]
    },
    "448": {
      "op": "concat",
      "defined_out": [
        "tmp%91#0"
      ],
      "stack_out": [
        "tmp%91#0"
      ]
    },
    "449": {
      "op": "log",
      "stack_out": []
    },
    "450": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "451": {
      "op": "return",
      "stack_out": []
    },
    "452": {
      "block": "main_remove_threshold_route@19",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%81#0"
      ],
      "stack_out": [
        "tmp%81#0"
      ]
    },
    "454": {
      "op": "!",
      "defined_out": [
        "tmp%82#0"
      ],
      "stack_out": [
        "tmp%82#0"
      ]
    },
    "455": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "456": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%83#0"
      ],
      "stack_out": [
        "tmp%83#0"
      ]
    },
    "458": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "459": {
      "callsub": "smart_contracts.price_oracle.contract.PriceOracle.remove_threshold",
      "op": "callsub remove_threshold",
      "defined_out": [
        "to_encode%11#0"
      ],
      "stack_out": [
        "to_encode%11#0"
      ]
    },
    "462": {
      "op": "dup",
      "defined_out": [
        "to_encode%11#0",
        "to_encode%11#0 (copy)"
      ],
      "stack_out": [
        "to_encode%11#0",
        "to_encode%11#0 (copy)"
      ]
    },
    "463": {
      "op": "len",
      "defined_out": [
        "length%8#0",
        "to_encode%11#0"
      ],
      "stack_out": [
        "to_encode%11#0",
        "length%8#0"
      ]
    },
    "464": {
      "op": "itob",
      "defined_out": [
        "as_bytes%8#0",
        "to_encode%11#0"
      ],
      "stack_out": [
        "to_encode%11#0",
        "as_bytes%8#0"
      ]
    },
    "465": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%8#0",
        "to_encode%11#0"
      ],
      "stack_out": [
        "to_encode%11#0",
        "length_uint16%8#0"
      ]
    },
    "468": {
      "op": "swap",
      "stack_out": [
        "length_uint16%8#0",
        "to_encode%11#0"
      ]
    },
    "469": {
      "op": "concat",
      "defined_out": [
        "encoded_value%8#0"
      ],
      "stack_out": [
        "encoded_value%8#0"
      ]
    },
    "470": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_value%8#0"
      ],
      "stack_out": [
        "encoded_value%8#0",
        "0x151f7c75"
      ]
    },
    "471": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_value%8#0"
      ]
    },
    "472": {
      "op": "concat",
      "defined_out": [
        "tmp%85#0"
      ],
      "stack_out": [
        "tmp%85#0"
      ]
    },
    "473": {
      "op": "log",
      "stack_out": []
    },
    "474": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "475": {
      "op": "return",
      "stack_out": []
    },
    "476": {
      "block": "main_get_oracle_status_route@18",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%75#0"
      ],
      "stack_out": [
        "tmp%75#0"
      ]
    },
    "478": {
      "op": "!",
      "defined_out": [
        "tmp%76#0"
      ],
      "stack_out": [
        "tmp%76#0"
      ]
    },
    "479": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "480": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%77#0"
      ],
      "stack_out": [
        "tmp%77#0"
      ]
    },
    "482": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "483": {
      "callsub": "smart_contracts.price_oracle.contract.PriceOracle.get_oracle_status",
      "op": "callsub get_oracle_status",
      "defined_out": [
        "tmp%79#0"
      ],
      "stack_out": [
        "tmp%79#0"
      ]
    },
    "486": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%79#0"
      ],
      "stack_out": [
        "tmp%79#0",
        "0x151f7c75"
      ]
    },
    "487": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%79#0"
      ]
    },
    "488": {
      "op": "concat",
      "defined_out": [
        "tmp%80#0"
      ],
      "stack_out": [
        "tmp%80#0"
      ]
    },
    "489": {
      "op": "log",
      "stack_out": []
    },
    "490": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "491": {
      "op": "return",
      "stack_out": []
    },
    "492": {
      "block": "main_unpause_oracle_route@17",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%70#0"
      ],
      "stack_out": [
        "tmp%70#0"
      ]
    },
    "494": {
      "op": "!",
      "defined_out": [
        "tmp%71#0"
      ],
      "stack_out": [
        "tmp%71#0"
      ]
    },
    "495": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "496": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%72#0"
      ],
      "stack_out": [
        "tmp%72#0"
      ]
    },
    "498": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "499": {
      "callsub": "smart_contracts.price_oracle.contract.PriceOracle.unpause_oracle",
      "op": "callsub unpause_oracle",
      "defined_out": [
        "to_encode%10#0"
      ],
      "stack_out": [
        "to_encode%10#0"
      ]
    },
    "502": {
      "op": "dup",
      "defined_out": [
        "to_encode%10#0",
        "to_encode%10#0 (copy)"
      ],
      "stack_out": [
        "to_encode%10#0",
        "to_encode%10#0 (copy)"
      ]
    },
    "503": {
      "op": "len",
      "defined_out": [
        "length%7#0",
        "to_encode%10#0"
      ],
      "stack_out": [
        "to_encode%10#0",
        "length%7#0"
      ]
    },
    "504": {
      "op": "itob",
      "defined_out": [
        "as_bytes%7#0",
        "to_encode%10#0"
      ],
      "stack_out": [
        "to_encode%10#0",
        "as_bytes%7#0"
      ]
    },
    "505": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%7#0",
        "to_encode%10#0"
      ],
      "stack_out": [
        "to_encode%10#0",
        "length_uint16%7#0"
      ]
    },
    "508": {
      "op": "swap",
      "stack_out": [
        "length_uint16%7#0",
        "to_encode%10#0"
      ]
    },
    "509": {
      "op": "concat",
      "defined_out": [
        "encoded_value%7#0"
      ],
      "stack_out": [
        "encoded_value%7#0"
      ]
    },
    "510": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_value%7#0"
      ],
      "stack_out": [
        "encoded_value%7#0",
        "0x151f7c75"
      ]
    },
    "511": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_value%7#0"
      ]
    },
    "512": {
      "op": "concat",
      "defined_out": [
        "tmp%74#0"
      ],
      "stack_out": [
        "tmp%74#0"
      ]
    },
    "513": {
      "op": "log",
      "stack_out": []
    },
    "514": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "515": {
      "op": "return",
      "stack_out": []
    },
    "516": {
      "block": "main_pause_oracle_route@16",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%65#0"
      ],
      "stack_out": [
        "tmp%65#0"
      ]
    },
    "518": {
      "op": "!",
      "defined_out": [
        "tmp%66#0"
      ],
      "stack_out": [
        "tmp%66#0"
      ]
    },
    "519": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "520": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%67#0"
      ],
      "stack_out": [
        "tmp%67#0"
      ]
    },
    "522": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "523": {
      "callsub": "smart_contracts.price_oracle.contract.PriceOracle.pause_oracle",
      "op": "callsub pause_oracle",
      "defined_out": [
        "to_encode%9#0"
      ],
      "stack_out": [
        "to_encode%9#0"
      ]
    },
    "526": {
      "op": "dup",
      "defined_out": [
        "to_encode%9#0",
        "to_encode%9#0 (copy)"
      ],
      "stack_out": [
        "to_encode%9#0",
        "to_encode%9#0 (copy)"
      ]
    },
    "527": {
      "op": "len",
      "defined_out": [
        "length%6#0",
        "to_encode%9#0"
      ],
      "stack_out": [
        "to_encode%9#0",
        "length%6#0"
      ]
    },
    "528": {
      "op": "itob",
      "defined_out": [
        "as_bytes%6#0",
        "to_encode%9#0"
      ],
      "stack_out": [
        "to_encode%9#0",
        "as_bytes%6#0"
      ]
    },
    "529": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%6#0",
        "to_encode%9#0"
      ],
      "stack_out": [
        "to_encode%9#0",
        "length_uint16%6#0"
      ]
    },
    "532": {
      "op": "swap",
      "stack_out": [
        "length_uint16%6#0",
        "to_encode%9#0"
      ]
    },
    "533": {
      "op": "concat",
      "defined_out": [
        "encoded_value%6#0"
      ],
      "stack_out": [
        "encoded_value%6#0"
      ]
    },
    "534": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_value%6#0"
      ],
      "stack_out": [
        "encoded_value%6#0",
        "0x151f7c75"
      ]
    },
    "535": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_value%6#0"
      ]
    },
    "536": {
      "op": "concat",
      "defined_out": [
        "tmp%69#0"
      ],
      "stack_out": [
        "tmp%69#0"
      ]
    },
    "537": {
      "op": "log",
      "stack_out": []
    },
    "538": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "539": {
      "op": "return",
      "stack_out": []
    },
    "540": {
      "block": "main_reset_circuit_breaker_route@15",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%60#0"
      ],
      "stack_out": [
        "tmp%60#0"
      ]
    },
    "542": {
      "op": "!",
      "defined_out": [
        "tmp%61#0"
      ],
      "stack_out": [
        "tmp%61#0"
      ]
    },
    "543": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "544": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%62#0"
      ],
      "stack_out": [
        "tmp%62#0"
      ]
    },
    "546": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "547": {
      "callsub": "smart_contracts.price_oracle.contract.PriceOracle.reset_circuit_breaker",
      "op": "callsub reset_circuit_breaker",
      "defined_out": [
        "to_encode%8#0"
      ],
      "stack_out": [
        "to_encode%8#0"
      ]
    },
    "550": {
      "op": "dup",
      "defined_out": [
        "to_encode%8#0",
        "to_encode%8#0 (copy)"
      ],
      "stack_out": [
        "to_encode%8#0",
        "to_encode%8#0 (copy)"
      ]
    },
    "551": {
      "op": "len",
      "defined_out": [
        "length%5#0",
        "to_encode%8#0"
      ],
      "stack_out": [
        "to_encode%8#0",
        "length%5#0"
      ]
    },
    "552": {
      "op": "itob",
      "defined_out": [
        "as_bytes%5#0",
        "to_encode%8#0"
      ],
      "stack_out": [
        "to_encode%8#0",
        "as_bytes%5#0"
      ]
    },
    "553": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%5#0",
        "to_encode%8#0"
      ],
      "stack_out": [
        "to_encode%8#0",
        "length_uint16%5#0"
      ]
    },
    "556": {
      "op": "swap",
      "stack_out": [
        "length_uint16%5#0",
        "to_encode%8#0"
      ]
    },
    "557": {
      "op": "concat",
      "defined_out": [
        "encoded_value%5#0"
      ],
      "stack_out": [
        "encoded_value%5#0"
      ]
    },
    "558": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_value%5#0"
      ],
      "stack_out": [
        "encoded_value%5#0",
        "0x151f7c75"
      ]
    },
    "559": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_value%5#0"
      ]
    },
    "560": {
      "op": "concat",
      "defined_out": [
        "tmp%64#0"
      ],
      "stack_out": [
        "tmp%64#0"
      ]
    },
    "561": {
      "op": "log",
      "stack_out": []
    },
    "562": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "563": {
      "op": "return",
      "stack_out": []
    },
    "564": {
      "block": "main_activate_circuit_breaker_route@14",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%55#0"
      ],
      "stack_out": [
        "tmp%55#0"
      ]
    },
    "566": {
      "op": "!",
      "defined_out": [
        "tmp%56#0"
      ],
      "stack_out": [
        "tmp%56#0"
      ]
    },
    "567": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "568": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%57#0"
      ],
      "stack_out": [
        "tmp%57#0"
      ]
    },
    "570": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "571": {
      "callsub": "smart_contracts.price_oracle.contract.PriceOracle.activate_circuit_breaker",
      "op": "callsub activate_circuit_breaker",
      "defined_out": [
        "to_encode%7#0"
      ],
      "stack_out": [
        "to_encode%7#0"
      ]
    },
    "574": {
      "op": "dup",
      "defined_out": [
        "to_encode%7#0",
        "to_encode%7#0 (copy)"
      ],
      "stack_out": [
        "to_encode%7#0",
        "to_encode%7#0 (copy)"
      ]
    },
    "575": {
      "op": "len",
      "defined_out": [
        "length%4#0",
        "to_encode%7#0"
      ],
      "stack_out": [
        "to_encode%7#0",
        "length%4#0"
      ]
    },
    "576": {
      "op": "itob",
      "defined_out": [
        "as_bytes%4#0",
        "to_encode%7#0"
      ],
      "stack_out": [
        "to_encode%7#0",
        "as_bytes%4#0"
      ]
    },
    "577": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%4#0",
        "to_encode%7#0"
      ],
      "stack_out": [
        "to_encode%7#0",
        "length_uint16%4#0"
      ]
    },
    "580": {
      "op": "swap",
      "stack_out": [
        "length_uint16%4#0",
        "to_encode%7#0"
      ]
    },
    "581": {
      "op": "concat",
      "defined_out": [
        "encoded_value%4#0"
      ],
      "stack_out": [
        "encoded_value%4#0"
      ]
    },
    "582": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_value%4#0"
      ],
      "stack_out": [
        "encoded_value%4#0",
        "0x151f7c75"
      ]
    },
    "583": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_value%4#0"
      ]
    },
    "584": {
      "op": "concat",
      "defined_out": [
        "tmp%59#0"
      ],
      "stack_out": [
        "tmp%59#0"
      ]
    },
    "585": {
      "op": "log",
      "stack_out": []
    },
    "586": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "587": {
      "op": "return",
      "stack_out": []
    },
    "588": {
      "block": "main_get_threshold_info_route@13",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%49#0"
      ],
      "stack_out": [
        "tmp%49#0"
      ]
    },
    "590": {
      "op": "!",
      "defined_out": [
        "tmp%50#0"
      ],
      "stack_out": [
        "tmp%50#0"
      ]
    },
    "591": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "592": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%51#0"
      ],
      "stack_out": [
        "tmp%51#0"
      ]
    },
    "594": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "595": {
      "callsub": "smart_contracts.price_oracle.contract.PriceOracle.get_threshold_info",
      "op": "callsub get_threshold_info",
      "defined_out": [
        "tmp%53#0"
      ],
      "stack_out": [
        "tmp%53#0"
      ]
    },
    "598": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%53#0"
      ],
      "stack_out": [
        "tmp%53#0",
        "0x151f7c75"
      ]
    },
    "599": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%53#0"
      ]
    },
    "600": {
      "op": "concat",
      "defined_out": [
        "tmp%54#0"
      ],
      "stack_out": [
        "tmp%54#0"
      ]
    },
    "601": {
      "op": "log",
      "stack_out": []
    },
    "602": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "603": {
      "op": "return",
      "stack_out": []
    },
    "604": {
      "block": "main_threshold_reached_route@12",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%44#0"
      ],
      "stack_out": [
        "tmp%44#0"
      ]
    },
    "606": {
      "op": "!",
      "defined_out": [
        "tmp%45#0"
      ],
      "stack_out": [
        "tmp%45#0"
      ]
    },
    "607": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "608": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%46#0"
      ],
      "stack_out": [
        "tmp%46#0"
      ]
    },
    "610": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "611": {
      "callsub": "smart_contracts.price_oracle.contract.PriceOracle.threshold_reached",
      "op": "callsub threshold_reached",
      "defined_out": [
        "to_encode%6#0"
      ],
      "stack_out": [
        "to_encode%6#0"
      ]
    },
    "614": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "val_as_bytes%2#0"
      ]
    },
    "615": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "val_as_bytes%2#0",
        "0x151f7c75"
      ]
    },
    "616": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%2#0"
      ]
    },
    "617": {
      "op": "concat",
      "defined_out": [
        "tmp%48#0"
      ],
      "stack_out": [
        "tmp%48#0"
      ]
    },
    "618": {
      "op": "log",
      "stack_out": []
    },
    "619": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "620": {
      "op": "return",
      "stack_out": []
    },
    "621": {
      "block": "main_is_price_stale_route@11",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%39#0"
      ]
    },
    "623": {
      "op": "!",
      "defined_out": [
        "tmp%40#0"
      ],
      "stack_out": [
        "tmp%40#0"
      ]
    },
    "624": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "625": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%41#0"
      ],
      "stack_out": [
        "tmp%41#0"
      ]
    },
    "627": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "628": {
      "callsub": "smart_contracts.price_oracle.contract.PriceOracle.is_price_stale",
      "op": "callsub is_price_stale",
      "defined_out": [
        "to_encode%5#0"
      ],
      "stack_out": [
        "to_encode%5#0"
      ]
    },
    "631": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%1#0"
      ]
    },
    "632": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%1#0",
        "0x151f7c75"
      ]
    },
    "633": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%1#0"
      ]
    },
    "634": {
      "op": "concat",
      "defined_out": [
        "tmp%43#0"
      ],
      "stack_out": [
        "tmp%43#0"
      ]
    },
    "635": {
      "op": "log",
      "stack_out": []
    },
    "636": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "637": {
      "op": "return",
      "stack_out": []
    },
    "638": {
      "block": "main_get_price_info_route@10",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%33#0"
      ],
      "stack_out": [
        "tmp%33#0"
      ]
    },
    "640": {
      "op": "!",
      "defined_out": [
        "tmp%34#0"
      ],
      "stack_out": [
        "tmp%34#0"
      ]
    },
    "641": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "642": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%35#0"
      ],
      "stack_out": [
        "tmp%35#0"
      ]
    },
    "644": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "645": {
      "callsub": "smart_contracts.price_oracle.contract.PriceOracle.get_price_info",
      "op": "callsub get_price_info",
      "defined_out": [
        "tmp%37#0"
      ],
      "stack_out": [
        "tmp%37#0"
      ]
    },
    "648": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%37#0"
      ],
      "stack_out": [
        "tmp%37#0",
        "0x151f7c75"
      ]
    },
    "649": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%37#0"
      ]
    },
    "650": {
      "op": "concat",
      "defined_out": [
        "tmp%38#0"
      ],
      "stack_out": [
        "tmp%38#0"
      ]
    },
    "651": {
      "op": "log",
      "stack_out": []
    },
    "652": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "653": {
      "op": "return",
      "stack_out": []
    },
    "654": {
      "block": "main_get_price_route@9",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%28#0"
      ],
      "stack_out": [
        "tmp%28#0"
      ]
    },
    "656": {
      "op": "!",
      "defined_out": [
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%29#0"
      ]
    },
    "657": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "658": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%30#0"
      ]
    },
    "660": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "661": {
      "callsub": "smart_contracts.price_oracle.contract.PriceOracle.get_price",
      "op": "callsub get_price",
      "defined_out": [
        "to_encode%4#0"
      ],
      "stack_out": [
        "to_encode%4#0"
      ]
    },
    "664": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "665": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "0x151f7c75"
      ]
    },
    "666": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%0#0"
      ]
    },
    "667": {
      "op": "concat",
      "defined_out": [
        "tmp%32#0"
      ],
      "stack_out": [
        "tmp%32#0"
      ]
    },
    "668": {
      "op": "log",
      "stack_out": []
    },
    "669": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "670": {
      "op": "return",
      "stack_out": []
    },
    "671": {
      "block": "main_set_threshold_route@8",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0"
      ]
    },
    "673": {
      "op": "!",
      "defined_out": [
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%23#0"
      ]
    },
    "674": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "675": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%24#0"
      ]
    },
    "677": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "678": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%2#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%2#0"
      ]
    },
    "681": {
      "op": "btoi",
      "defined_out": [
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%26#0"
      ]
    },
    "682": {
      "callsub": "smart_contracts.price_oracle.contract.PriceOracle.set_threshold",
      "op": "callsub set_threshold",
      "defined_out": [
        "to_encode%3#0"
      ],
      "stack_out": [
        "to_encode%3#0"
      ]
    },
    "685": {
      "op": "dup",
      "defined_out": [
        "to_encode%3#0",
        "to_encode%3#0 (copy)"
      ],
      "stack_out": [
        "to_encode%3#0",
        "to_encode%3#0 (copy)"
      ]
    },
    "686": {
      "op": "len",
      "defined_out": [
        "length%3#0",
        "to_encode%3#0"
      ],
      "stack_out": [
        "to_encode%3#0",
        "length%3#0"
      ]
    },
    "687": {
      "op": "itob",
      "defined_out": [
        "as_bytes%3#0",
        "to_encode%3#0"
      ],
      "stack_out": [
        "to_encode%3#0",
        "as_bytes%3#0"
      ]
    },
    "688": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%3#0",
        "to_encode%3#0"
      ],
      "stack_out": [
        "to_encode%3#0",
        "length_uint16%3#0"
      ]
    },
    "691": {
      "op": "swap",
      "stack_out": [
        "length_uint16%3#0",
        "to_encode%3#0"
      ]
    },
    "692": {
      "op": "concat",
      "defined_out": [
        "encoded_value%3#0"
      ],
      "stack_out": [
        "encoded_value%3#0"
      ]
    },
    "693": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_value%3#0"
      ],
      "stack_out": [
        "encoded_value%3#0",
        "0x151f7c75"
      ]
    },
    "694": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_value%3#0"
      ]
    },
    "695": {
      "op": "concat",
      "defined_out": [
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%27#0"
      ]
    },
    "696": {
      "op": "log",
      "stack_out": []
    },
    "697": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "698": {
      "op": "return",
      "stack_out": []
    },
    "699": {
      "block": "main_update_price_route@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "701": {
      "op": "!",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "702": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "703": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "705": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "706": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%0#0"
      ]
    },
    "709": {
      "op": "btoi",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "710": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[8]%1#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0",
        "reinterpret_bytes[8]%1#0"
      ]
    },
    "713": {
      "op": "btoi",
      "defined_out": [
        "tmp%19#0",
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%19#0",
        "tmp%20#0"
      ]
    },
    "714": {
      "callsub": "smart_contracts.price_oracle.contract.PriceOracle.update_price",
      "op": "callsub update_price",
      "defined_out": [
        "to_encode%2#0"
      ],
      "stack_out": [
        "to_encode%2#0"
      ]
    },
    "717": {
      "op": "dup",
      "defined_out": [
        "to_encode%2#0",
        "to_encode%2#0 (copy)"
      ],
      "stack_out": [
        "to_encode%2#0",
        "to_encode%2#0 (copy)"
      ]
    },
    "718": {
      "op": "len",
      "defined_out": [
        "length%2#0",
        "to_encode%2#0"
      ],
      "stack_out": [
        "to_encode%2#0",
        "length%2#0"
      ]
    },
    "719": {
      "op": "itob",
      "defined_out": [
        "as_bytes%2#0",
        "to_encode%2#0"
      ],
      "stack_out": [
        "to_encode%2#0",
        "as_bytes%2#0"
      ]
    },
    "720": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%2#0",
        "to_encode%2#0"
      ],
      "stack_out": [
        "to_encode%2#0",
        "length_uint16%2#0"
      ]
    },
    "723": {
      "op": "swap",
      "stack_out": [
        "length_uint16%2#0",
        "to_encode%2#0"
      ]
    },
    "724": {
      "op": "concat",
      "defined_out": [
        "encoded_value%2#0"
      ],
      "stack_out": [
        "encoded_value%2#0"
      ]
    },
    "725": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_value%2#0"
      ],
      "stack_out": [
        "encoded_value%2#0",
        "0x151f7c75"
      ]
    },
    "726": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_value%2#0"
      ]
    },
    "727": {
      "op": "concat",
      "defined_out": [
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0"
      ]
    },
    "728": {
      "op": "log",
      "stack_out": []
    },
    "729": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "730": {
      "op": "return",
      "stack_out": []
    },
    "731": {
      "block": "main_add_price_updater_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "733": {
      "op": "!",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "734": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "735": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "737": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "738": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "741": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "744": {
      "callsub": "smart_contracts.price_oracle.contract.PriceOracle.add_price_updater",
      "op": "callsub add_price_updater",
      "defined_out": [
        "to_encode%1#0"
      ],
      "stack_out": [
        "to_encode%1#0"
      ]
    },
    "747": {
      "op": "dup",
      "defined_out": [
        "to_encode%1#0",
        "to_encode%1#0 (copy)"
      ],
      "stack_out": [
        "to_encode%1#0",
        "to_encode%1#0 (copy)"
      ]
    },
    "748": {
      "op": "len",
      "defined_out": [
        "length%1#0",
        "to_encode%1#0"
      ],
      "stack_out": [
        "to_encode%1#0",
        "length%1#0"
      ]
    },
    "749": {
      "op": "itob",
      "defined_out": [
        "as_bytes%1#0",
        "to_encode%1#0"
      ],
      "stack_out": [
        "to_encode%1#0",
        "as_bytes%1#0"
      ]
    },
    "750": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%1#0",
        "to_encode%1#0"
      ],
      "stack_out": [
        "to_encode%1#0",
        "length_uint16%1#0"
      ]
    },
    "753": {
      "op": "swap",
      "stack_out": [
        "length_uint16%1#0",
        "to_encode%1#0"
      ]
    },
    "754": {
      "op": "concat",
      "defined_out": [
        "encoded_value%1#0"
      ],
      "stack_out": [
        "encoded_value%1#0"
      ]
    },
    "755": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_value%1#0"
      ],
      "stack_out": [
        "encoded_value%1#0",
        "0x151f7c75"
      ]
    },
    "756": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_value%1#0"
      ]
    },
    "757": {
      "op": "concat",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "758": {
      "op": "log",
      "stack_out": []
    },
    "759": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "760": {
      "op": "return",
      "stack_out": []
    },
    "761": {
      "block": "main_initialize_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "763": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "764": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "765": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "767": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "768": {
      "callsub": "smart_contracts.price_oracle.contract.PriceOracle.initialize",
      "op": "callsub initialize",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "771": {
      "op": "dup",
      "defined_out": [
        "to_encode%0#0",
        "to_encode%0#0 (copy)"
      ],
      "stack_out": [
        "to_encode%0#0",
        "to_encode%0#0 (copy)"
      ]
    },
    "772": {
      "op": "len",
      "defined_out": [
        "length%0#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "length%0#0"
      ]
    },
    "773": {
      "op": "itob",
      "defined_out": [
        "as_bytes%0#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "as_bytes%0#0"
      ]
    },
    "774": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%0#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "length_uint16%0#0"
      ]
    },
    "777": {
      "op": "swap",
      "stack_out": [
        "length_uint16%0#0",
        "to_encode%0#0"
      ]
    },
    "778": {
      "op": "concat",
      "defined_out": [
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0"
      ]
    },
    "779": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "0x151f7c75"
      ]
    },
    "780": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_value%0#0"
      ]
    },
    "781": {
      "op": "concat",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "782": {
      "op": "log",
      "stack_out": []
    },
    "783": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "784": {
      "op": "return",
      "stack_out": []
    },
    "785": {
      "block": "main_bare_routing@21",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%92#0"
      ],
      "stack_out": [
        "tmp%92#0"
      ]
    },
    "787": {
      "op": "bnz main_after_if_else@23",
      "stack_out": []
    },
    "790": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%93#0"
      ],
      "stack_out": [
        "tmp%93#0"
      ]
    },
    "792": {
      "op": "!",
      "defined_out": [
        "tmp%94#0"
      ],
      "stack_out": [
        "tmp%94#0"
      ]
    },
    "793": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "794": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "795": {
      "op": "return",
      "stack_out": []
    },
    "796": {
      "subroutine": "smart_contracts.price_oracle.contract.PriceOracle.initialize",
      "params": {},
      "block": "initialize",
      "stack_in": [],
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "798": {
      "op": "global CreatorAddress",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "800": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "801": {
      "error": "Only creator can initialize",
      "op": "assert // Only creator can initialize",
      "stack_out": []
    },
    "802": {
      "op": "bytec_1 // \"admin\"",
      "defined_out": [
        "\"admin\""
      ],
      "stack_out": [
        "\"admin\""
      ]
    },
    "803": {
      "op": "txn Sender",
      "defined_out": [
        "\"admin\"",
        "materialized_values%0#0"
      ],
      "stack_out": [
        "\"admin\"",
        "materialized_values%0#0"
      ]
    },
    "805": {
      "op": "app_global_put",
      "stack_out": []
    },
    "806": {
      "op": "bytec 6 // \"circuit_breaker\"",
      "defined_out": [
        "\"circuit_breaker\""
      ],
      "stack_out": [
        "\"circuit_breaker\""
      ]
    },
    "808": {
      "op": "intc_0 // 0",
      "defined_out": [
        "\"circuit_breaker\"",
        "0"
      ],
      "stack_out": [
        "\"circuit_breaker\"",
        "0"
      ]
    },
    "809": {
      "op": "app_global_put",
      "stack_out": []
    },
    "810": {
      "op": "bytec 7 // \"is_paused\"",
      "defined_out": [
        "\"is_paused\""
      ],
      "stack_out": [
        "\"is_paused\""
      ]
    },
    "812": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"is_paused\"",
        "0"
      ]
    },
    "813": {
      "op": "app_global_put",
      "stack_out": []
    },
    "814": {
      "op": "bytec 8 // \"updater_count\"",
      "defined_out": [
        "\"updater_count\""
      ],
      "stack_out": [
        "\"updater_count\""
      ]
    },
    "816": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"updater_count\"",
        "0"
      ]
    },
    "817": {
      "op": "app_global_put",
      "stack_out": []
    },
    "818": {
      "op": "bytec_2 // \"token_price\"",
      "defined_out": [
        "\"token_price\""
      ],
      "stack_out": [
        "\"token_price\""
      ]
    },
    "819": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"token_price\"",
        "0"
      ]
    },
    "820": {
      "op": "app_global_put",
      "stack_out": []
    },
    "821": {
      "op": "bytec_3 // \"price_timestamp\"",
      "defined_out": [
        "\"price_timestamp\""
      ],
      "stack_out": [
        "\"price_timestamp\""
      ]
    },
    "822": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"price_timestamp\"",
        "0"
      ]
    },
    "823": {
      "op": "app_global_put",
      "stack_out": []
    },
    "824": {
      "op": "bytec 10 // \"price_confidence\"",
      "defined_out": [
        "\"price_confidence\""
      ],
      "stack_out": [
        "\"price_confidence\""
      ]
    },
    "826": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"price_confidence\"",
        "0"
      ]
    },
    "827": {
      "op": "app_global_put",
      "stack_out": []
    },
    "828": {
      "op": "bytec 4 // \"threshold_price\"",
      "defined_out": [
        "\"threshold_price\""
      ],
      "stack_out": [
        "\"threshold_price\""
      ]
    },
    "830": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"threshold_price\"",
        "0"
      ]
    },
    "831": {
      "op": "app_global_put",
      "stack_out": []
    },
    "832": {
      "op": "bytec 5 // \"threshold_active\"",
      "defined_out": [
        "\"threshold_active\""
      ],
      "stack_out": [
        "\"threshold_active\""
      ]
    },
    "834": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"threshold_active\"",
        "0"
      ]
    },
    "835": {
      "op": "app_global_put",
      "stack_out": []
    },
    "836": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "838": {
      "op": "bytec 11 // \"is_updater\"",
      "defined_out": [
        "\"is_updater\"",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "\"is_updater\""
      ]
    },
    "840": {
      "op": "intc_1 // 1",
      "defined_out": [
        "\"is_updater\"",
        "1",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "\"is_updater\"",
        "1"
      ]
    },
    "841": {
      "op": "app_local_put",
      "stack_out": []
    },
    "842": {
      "op": "bytec 8 // \"updater_count\"",
      "stack_out": [
        "\"updater_count\""
      ]
    },
    "844": {
      "op": "intc_1 // 1",
      "stack_out": [
        "\"updater_count\"",
        "1"
      ]
    },
    "845": {
      "op": "app_global_put",
      "stack_out": []
    },
    "846": {
      "op": "pushbytes 0x50726963654f7261636c6520696e697469616c697a6564",
      "defined_out": [
        "0x50726963654f7261636c6520696e697469616c697a6564"
      ],
      "stack_out": [
        "0x50726963654f7261636c6520696e697469616c697a6564"
      ]
    },
    "871": {
      "op": "log",
      "stack_out": []
    },
    "872": {
      "op": "pushbytes \"Price oracle initialized successfully\"",
      "defined_out": [
        "\"Price oracle initialized successfully\""
      ],
      "stack_out": [
        "\"Price oracle initialized successfully\""
      ]
    },
    "911": {
      "retsub": true,
      "op": "retsub"
    },
    "912": {
      "subroutine": "smart_contracts.price_oracle.contract.PriceOracle.add_price_updater",
      "params": {
        "updater#0": "bytes"
      },
      "block": "add_price_updater",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "915": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "917": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "918": {
      "op": "bytec_1 // \"admin\"",
      "defined_out": [
        "\"admin\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"admin\""
      ]
    },
    "919": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "920": {
      "error": "check self.admin exists",
      "op": "assert // check self.admin exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "921": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "922": {
      "error": "Only admin can add updaters",
      "op": "assert // Only admin can add updaters",
      "stack_out": []
    },
    "923": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "924": {
      "op": "bytec 8 // \"updater_count\"",
      "defined_out": [
        "\"updater_count\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"updater_count\""
      ]
    },
    "926": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "927": {
      "error": "check self.updater_count exists",
      "op": "assert // check self.updater_count exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "928": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "1"
      ]
    },
    "929": {
      "op": "+",
      "defined_out": [
        "materialized_values%0#0"
      ],
      "stack_out": [
        "materialized_values%0#0"
      ]
    },
    "930": {
      "op": "bytec 8 // \"updater_count\"",
      "stack_out": [
        "materialized_values%0#0",
        "\"updater_count\""
      ]
    },
    "932": {
      "op": "swap",
      "stack_out": [
        "\"updater_count\"",
        "materialized_values%0#0"
      ]
    },
    "933": {
      "op": "app_global_put",
      "stack_out": []
    },
    "934": {
      "op": "pushbytes 0x50726963652075706461746572206164646564",
      "defined_out": [
        "0x50726963652075706461746572206164646564"
      ],
      "stack_out": [
        "0x50726963652075706461746572206164646564"
      ]
    },
    "955": {
      "op": "log",
      "stack_out": []
    },
    "956": {
      "op": "pushbytes \"Price updater added successfully\"",
      "defined_out": [
        "\"Price updater added successfully\""
      ],
      "stack_out": [
        "\"Price updater added successfully\""
      ]
    },
    "990": {
      "retsub": true,
      "op": "retsub"
    },
    "991": {
      "subroutine": "smart_contracts.price_oracle.contract.PriceOracle.update_price",
      "params": {
        "new_price#0": "uint64",
        "confidence#0": "uint64"
      },
      "block": "update_price",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "994": {
      "op": "pushbytes \"\"",
      "stack_out": [
        "current_price#0"
      ]
    },
    "996": {
      "op": "dupn 2",
      "stack_out": [
        "current_price#0",
        "current_timestamp#0",
        "threshold#0"
      ]
    },
    "998": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "current_price#0",
        "current_timestamp#0",
        "threshold#0",
        "0"
      ]
    },
    "999": {
      "op": "bytec 7 // \"is_paused\"",
      "defined_out": [
        "\"is_paused\"",
        "0"
      ],
      "stack_out": [
        "current_price#0",
        "current_timestamp#0",
        "threshold#0",
        "0",
        "\"is_paused\""
      ]
    },
    "1001": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "current_price#0",
        "current_timestamp#0",
        "threshold#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1002": {
      "error": "check self.is_paused exists",
      "op": "assert // check self.is_paused exists",
      "stack_out": [
        "current_price#0",
        "current_timestamp#0",
        "threshold#0",
        "maybe_value%0#0"
      ]
    },
    "1003": {
      "op": "!",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "current_price#0",
        "current_timestamp#0",
        "threshold#0",
        "tmp%0#0"
      ]
    },
    "1004": {
      "error": "Oracle is paused",
      "op": "assert // Oracle is paused",
      "stack_out": [
        "current_price#0",
        "current_timestamp#0",
        "threshold#0"
      ]
    },
    "1005": {
      "op": "intc_0 // 0",
      "stack_out": [
        "current_price#0",
        "current_timestamp#0",
        "threshold#0",
        "0"
      ]
    },
    "1006": {
      "op": "bytec 6 // \"circuit_breaker\"",
      "defined_out": [
        "\"circuit_breaker\"",
        "0"
      ],
      "stack_out": [
        "current_price#0",
        "current_timestamp#0",
        "threshold#0",
        "0",
        "\"circuit_breaker\""
      ]
    },
    "1008": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "current_price#0",
        "current_timestamp#0",
        "threshold#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1009": {
      "error": "check self.circuit_breaker_active exists",
      "op": "assert // check self.circuit_breaker_active exists",
      "stack_out": [
        "current_price#0",
        "current_timestamp#0",
        "threshold#0",
        "maybe_value%1#0"
      ]
    },
    "1010": {
      "op": "!",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "current_price#0",
        "current_timestamp#0",
        "threshold#0",
        "tmp%1#0"
      ]
    },
    "1011": {
      "error": "Circuit breaker active",
      "op": "assert // Circuit breaker active",
      "stack_out": [
        "current_price#0",
        "current_timestamp#0",
        "threshold#0"
      ]
    },
    "1012": {
      "op": "frame_dig -2",
      "defined_out": [
        "new_price#0 (copy)"
      ],
      "stack_out": [
        "current_price#0",
        "current_timestamp#0",
        "threshold#0",
        "new_price#0 (copy)"
      ]
    },
    "1014": {
      "error": "Price must be positive",
      "op": "assert // Price must be positive",
      "stack_out": [
        "current_price#0",
        "current_timestamp#0",
        "threshold#0"
      ]
    },
    "1015": {
      "op": "frame_dig -1",
      "defined_out": [
        "confidence#0 (copy)"
      ],
      "stack_out": [
        "current_price#0",
        "current_timestamp#0",
        "threshold#0",
        "confidence#0 (copy)"
      ]
    },
    "1017": {
      "op": "intc_2 // 10000",
      "defined_out": [
        "10000",
        "confidence#0 (copy)"
      ],
      "stack_out": [
        "current_price#0",
        "current_timestamp#0",
        "threshold#0",
        "confidence#0 (copy)",
        "10000"
      ]
    },
    "1018": {
      "op": "<=",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "current_price#0",
        "current_timestamp#0",
        "threshold#0",
        "tmp%3#0"
      ]
    },
    "1019": {
      "error": "Confidence cannot exceed 100%",
      "op": "assert // Confidence cannot exceed 100%",
      "stack_out": [
        "current_price#0",
        "current_timestamp#0",
        "threshold#0"
      ]
    },
    "1020": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "current_price#0",
        "current_timestamp#0",
        "threshold#0",
        "tmp%4#0"
      ]
    },
    "1022": {
      "op": "intc_0 // 0",
      "stack_out": [
        "current_price#0",
        "current_timestamp#0",
        "threshold#0",
        "tmp%4#0",
        "0"
      ]
    },
    "1023": {
      "op": "bytec_1 // \"admin\"",
      "defined_out": [
        "\"admin\"",
        "0",
        "tmp%4#0"
      ],
      "stack_out": [
        "current_price#0",
        "current_timestamp#0",
        "threshold#0",
        "tmp%4#0",
        "0",
        "\"admin\""
      ]
    },
    "1024": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "current_price#0",
        "current_timestamp#0",
        "threshold#0",
        "tmp%4#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "1025": {
      "error": "check self.admin exists",
      "op": "assert // check self.admin exists",
      "stack_out": [
        "current_price#0",
        "current_timestamp#0",
        "threshold#0",
        "tmp%4#0",
        "maybe_value%2#0"
      ]
    },
    "1026": {
      "op": "==",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "current_price#0",
        "current_timestamp#0",
        "threshold#0",
        "tmp%5#0"
      ]
    },
    "1027": {
      "op": "bnz update_price_bool_true@2",
      "stack_out": [
        "current_price#0",
        "current_timestamp#0",
        "threshold#0"
      ]
    },
    "1030": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "current_price#0",
        "current_timestamp#0",
        "threshold#0",
        "tmp%6#0"
      ]
    },
    "1032": {
      "op": "intc_0 // 0",
      "stack_out": [
        "current_price#0",
        "current_timestamp#0",
        "threshold#0",
        "tmp%6#0",
        "0"
      ]
    },
    "1033": {
      "op": "bytec 11 // \"is_updater\"",
      "defined_out": [
        "\"is_updater\"",
        "0",
        "tmp%6#0"
      ],
      "stack_out": [
        "current_price#0",
        "current_timestamp#0",
        "threshold#0",
        "tmp%6#0",
        "0",
        "\"is_updater\""
      ]
    },
    "1035": {
      "op": "app_local_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "current_price#0",
        "current_timestamp#0",
        "threshold#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "1036": {
      "error": "check self.is_updater exists for account",
      "op": "assert // check self.is_updater exists for account",
      "stack_out": [
        "current_price#0",
        "current_timestamp#0",
        "threshold#0",
        "maybe_value%3#0"
      ]
    },
    "1037": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "current_price#0",
        "current_timestamp#0",
        "threshold#0",
        "maybe_value%3#0",
        "1"
      ]
    },
    "1038": {
      "op": "==",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "current_price#0",
        "current_timestamp#0",
        "threshold#0",
        "tmp%7#0"
      ]
    },
    "1039": {
      "op": "bz update_price_bool_false@3",
      "stack_out": [
        "current_price#0",
        "current_timestamp#0",
        "threshold#0"
      ]
    },
    "1042": {
      "block": "update_price_bool_true@2",
      "stack_in": [
        "current_price#0",
        "current_timestamp#0",
        "threshold#0"
      ],
      "op": "intc_1 // 1",
      "defined_out": [
        "or_result%0#0"
      ],
      "stack_out": [
        "current_price#0",
        "current_timestamp#0",
        "threshold#0",
        "or_result%0#0"
      ]
    },
    "1043": {
      "block": "update_price_bool_merge@4",
      "stack_in": [
        "current_price#0",
        "current_timestamp#0",
        "threshold#0",
        "or_result%0#0"
      ],
      "error": "Not authorized to update price",
      "op": "assert // Not authorized to update price",
      "defined_out": [],
      "stack_out": [
        "current_price#0",
        "current_timestamp#0",
        "threshold#0"
      ]
    },
    "1044": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "current_price#0",
        "current_timestamp#0",
        "threshold#0",
        "0"
      ]
    },
    "1045": {
      "op": "bytec_2 // \"token_price\"",
      "defined_out": [
        "\"token_price\"",
        "0"
      ],
      "stack_out": [
        "current_price#0",
        "current_timestamp#0",
        "threshold#0",
        "0",
        "\"token_price\""
      ]
    },
    "1046": {
      "op": "app_global_get_ex",
      "defined_out": [
        "current_price#0",
        "maybe_exists%4#0"
      ],
      "stack_out": [
        "current_price#0",
        "current_timestamp#0",
        "threshold#0",
        "current_price#0",
        "maybe_exists%4#0"
      ]
    },
    "1047": {
      "op": "swap",
      "stack_out": [
        "current_price#0",
        "current_timestamp#0",
        "threshold#0",
        "maybe_exists%4#0",
        "current_price#0"
      ]
    },
    "1048": {
      "op": "dup",
      "stack_out": [
        "current_price#0",
        "current_timestamp#0",
        "threshold#0",
        "maybe_exists%4#0",
        "current_price#0",
        "current_price#0 (copy)"
      ]
    },
    "1049": {
      "op": "cover 2",
      "stack_out": [
        "current_price#0",
        "current_timestamp#0",
        "threshold#0",
        "current_price#0",
        "maybe_exists%4#0",
        "current_price#0"
      ]
    },
    "1051": {
      "op": "frame_bury 0",
      "defined_out": [
        "current_price#0",
        "maybe_exists%4#0"
      ],
      "stack_out": [
        "current_price#0",
        "current_timestamp#0",
        "threshold#0",
        "current_price#0",
        "maybe_exists%4#0"
      ]
    },
    "1053": {
      "error": "check self.token_price exists",
      "op": "assert // check self.token_price exists",
      "stack_out": [
        "current_price#0",
        "current_timestamp#0",
        "threshold#0",
        "current_price#0"
      ]
    },
    "1054": {
      "op": "intc_0 // 0",
      "stack_out": [
        "current_price#0",
        "current_timestamp#0",
        "threshold#0",
        "current_price#0",
        "0"
      ]
    },
    "1055": {
      "op": "bytec_3 // \"price_timestamp\"",
      "defined_out": [
        "\"price_timestamp\"",
        "0",
        "current_price#0"
      ],
      "stack_out": [
        "current_price#0",
        "current_timestamp#0",
        "threshold#0",
        "current_price#0",
        "0",
        "\"price_timestamp\""
      ]
    },
    "1056": {
      "op": "app_global_get_ex",
      "defined_out": [
        "current_price#0",
        "current_timestamp#0",
        "maybe_exists%5#0"
      ],
      "stack_out": [
        "current_price#0",
        "current_timestamp#0",
        "threshold#0",
        "current_price#0",
        "current_timestamp#0",
        "maybe_exists%5#0"
      ]
    },
    "1057": {
      "op": "swap",
      "stack_out": [
        "current_price#0",
        "current_timestamp#0",
        "threshold#0",
        "current_price#0",
        "maybe_exists%5#0",
        "current_timestamp#0"
      ]
    },
    "1058": {
      "op": "frame_bury 1",
      "defined_out": [
        "current_price#0",
        "current_timestamp#0",
        "maybe_exists%5#0"
      ],
      "stack_out": [
        "current_price#0",
        "current_timestamp#0",
        "threshold#0",
        "current_price#0",
        "maybe_exists%5#0"
      ]
    },
    "1060": {
      "error": "check self.price_timestamp exists",
      "op": "assert // check self.price_timestamp exists",
      "stack_out": [
        "current_price#0",
        "current_timestamp#0",
        "threshold#0",
        "current_price#0"
      ]
    },
    "1061": {
      "op": "bz update_price_after_if_else@6",
      "stack_out": [
        "current_price#0",
        "current_timestamp#0",
        "threshold#0"
      ]
    },
    "1064": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "current_price#0",
        "current_timestamp#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "current_price#0",
        "current_timestamp#0",
        "threshold#0",
        "tmp%9#0"
      ]
    },
    "1066": {
      "op": "intc_0 // 0",
      "stack_out": [
        "current_price#0",
        "current_timestamp#0",
        "threshold#0",
        "tmp%9#0",
        "0"
      ]
    },
    "1067": {
      "op": "bytec 13 // \"min_update_interval\"",
      "defined_out": [
        "\"min_update_interval\"",
        "0",
        "current_price#0",
        "current_timestamp#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "current_price#0",
        "current_timestamp#0",
        "threshold#0",
        "tmp%9#0",
        "0",
        "\"min_update_interval\""
      ]
    },
    "1069": {
      "op": "app_global_get_ex",
      "defined_out": [
        "current_price#0",
        "current_timestamp#0",
        "maybe_exists%6#0",
        "maybe_value%6#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "current_price#0",
        "current_timestamp#0",
        "threshold#0",
        "tmp%9#0",
        "maybe_value%6#0",
        "maybe_exists%6#0"
      ]
    },
    "1070": {
      "error": "check self.min_update_interval exists",
      "op": "assert // check self.min_update_interval exists",
      "stack_out": [
        "current_price#0",
        "current_timestamp#0",
        "threshold#0",
        "tmp%9#0",
        "maybe_value%6#0"
      ]
    },
    "1071": {
      "op": "frame_dig 1",
      "stack_out": [
        "current_price#0",
        "current_timestamp#0",
        "threshold#0",
        "tmp%9#0",
        "maybe_value%6#0",
        "current_timestamp#0"
      ]
    },
    "1073": {
      "op": "+",
      "defined_out": [
        "current_price#0",
        "current_timestamp#0",
        "tmp%10#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "current_price#0",
        "current_timestamp#0",
        "threshold#0",
        "tmp%9#0",
        "tmp%10#0"
      ]
    },
    "1074": {
      "op": ">=",
      "defined_out": [
        "current_price#0",
        "current_timestamp#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "current_price#0",
        "current_timestamp#0",
        "threshold#0",
        "tmp%11#0"
      ]
    },
    "1075": {
      "error": "Update too frequent",
      "op": "assert // Update too frequent",
      "stack_out": [
        "current_price#0",
        "current_timestamp#0",
        "threshold#0"
      ]
    },
    "1076": {
      "op": "frame_dig 0",
      "stack_out": [
        "current_price#0",
        "current_timestamp#0",
        "threshold#0",
        "current_price#0"
      ]
    },
    "1078": {
      "op": "bnz update_price_after_if_else@15",
      "stack_out": [
        "current_price#0",
        "current_timestamp#0",
        "threshold#0"
      ]
    },
    "1081": {
      "op": "intc_0 // 0",
      "defined_out": [
        "current_price#0",
        "current_timestamp#0",
        "deviation#0"
      ],
      "stack_out": [
        "current_price#0",
        "current_timestamp#0",
        "threshold#0",
        "deviation#0"
      ]
    },
    "1082": {
      "block": "update_price_after_inlined_smart_contracts.price_oracle.contract.PriceOracle._calculate_deviation@19",
      "stack_in": [
        "current_price#0",
        "current_timestamp#0",
        "threshold#0",
        "deviation#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "current_price#0",
        "current_timestamp#0",
        "threshold#0",
        "deviation#0",
        "0"
      ]
    },
    "1083": {
      "op": "bytec 12 // \"max_price_deviation\"",
      "defined_out": [
        "\"max_price_deviation\"",
        "0"
      ],
      "stack_out": [
        "current_price#0",
        "current_timestamp#0",
        "threshold#0",
        "deviation#0",
        "0",
        "\"max_price_deviation\""
      ]
    },
    "1085": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%7#0",
        "maybe_value%7#0"
      ],
      "stack_out": [
        "current_price#0",
        "current_timestamp#0",
        "threshold#0",
        "deviation#0",
        "maybe_value%7#0",
        "maybe_exists%7#0"
      ]
    },
    "1086": {
      "error": "check self.max_price_deviation exists",
      "op": "assert // check self.max_price_deviation exists",
      "defined_out": [
        "deviation#0",
        "maybe_value%7#0"
      ],
      "stack_out": [
        "current_price#0",
        "current_timestamp#0",
        "threshold#0",
        "deviation#0",
        "maybe_value%7#0"
      ]
    },
    "1087": {
      "op": "<=",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "current_price#0",
        "current_timestamp#0",
        "threshold#0",
        "tmp%12#0"
      ]
    },
    "1088": {
      "error": "Price deviation too large",
      "op": "assert // Price deviation too large",
      "stack_out": [
        "current_price#0",
        "current_timestamp#0",
        "threshold#0"
      ]
    },
    "1089": {
      "block": "update_price_after_if_else@6",
      "stack_in": [
        "current_price#0",
        "current_timestamp#0",
        "threshold#0"
      ],
      "op": "bytec_2 // \"token_price\"",
      "defined_out": [
        "\"token_price\""
      ],
      "stack_out": [
        "current_price#0",
        "current_timestamp#0",
        "threshold#0",
        "\"token_price\""
      ]
    },
    "1090": {
      "op": "frame_dig -2",
      "defined_out": [
        "\"token_price\"",
        "new_price#0 (copy)"
      ],
      "stack_out": [
        "current_price#0",
        "current_timestamp#0",
        "threshold#0",
        "\"token_price\"",
        "new_price#0 (copy)"
      ]
    },
    "1092": {
      "op": "app_global_put",
      "stack_out": [
        "current_price#0",
        "current_timestamp#0",
        "threshold#0"
      ]
    },
    "1093": {
      "op": "bytec_3 // \"price_timestamp\"",
      "defined_out": [
        "\"price_timestamp\""
      ],
      "stack_out": [
        "current_price#0",
        "current_timestamp#0",
        "threshold#0",
        "\"price_timestamp\""
      ]
    },
    "1094": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "\"price_timestamp\"",
        "materialized_values%0#0"
      ],
      "stack_out": [
        "current_price#0",
        "current_timestamp#0",
        "threshold#0",
        "\"price_timestamp\"",
        "materialized_values%0#0"
      ]
    },
    "1096": {
      "op": "app_global_put",
      "stack_out": [
        "current_price#0",
        "current_timestamp#0",
        "threshold#0"
      ]
    },
    "1097": {
      "op": "bytec 10 // \"price_confidence\"",
      "defined_out": [
        "\"price_confidence\""
      ],
      "stack_out": [
        "current_price#0",
        "current_timestamp#0",
        "threshold#0",
        "\"price_confidence\""
      ]
    },
    "1099": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"price_confidence\"",
        "confidence#0 (copy)"
      ],
      "stack_out": [
        "current_price#0",
        "current_timestamp#0",
        "threshold#0",
        "\"price_confidence\"",
        "confidence#0 (copy)"
      ]
    },
    "1101": {
      "op": "app_global_put",
      "stack_out": [
        "current_price#0",
        "current_timestamp#0",
        "threshold#0"
      ]
    },
    "1102": {
      "op": "pushbytes \"price_updater\"",
      "defined_out": [
        "\"price_updater\""
      ],
      "stack_out": [
        "current_price#0",
        "current_timestamp#0",
        "threshold#0",
        "\"price_updater\""
      ]
    },
    "1117": {
      "op": "txn Sender",
      "defined_out": [
        "\"price_updater\"",
        "materialized_values%1#0"
      ],
      "stack_out": [
        "current_price#0",
        "current_timestamp#0",
        "threshold#0",
        "\"price_updater\"",
        "materialized_values%1#0"
      ]
    },
    "1119": {
      "op": "app_global_put",
      "stack_out": [
        "current_price#0",
        "current_timestamp#0",
        "threshold#0"
      ]
    },
    "1120": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "current_price#0",
        "current_timestamp#0",
        "threshold#0",
        "0"
      ]
    },
    "1121": {
      "op": "bytec 5 // \"threshold_active\"",
      "defined_out": [
        "\"threshold_active\"",
        "0"
      ],
      "stack_out": [
        "current_price#0",
        "current_timestamp#0",
        "threshold#0",
        "0",
        "\"threshold_active\""
      ]
    },
    "1123": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "current_price#0",
        "current_timestamp#0",
        "threshold#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1124": {
      "error": "check self.threshold_active exists",
      "op": "assert // check self.threshold_active exists",
      "stack_out": [
        "current_price#0",
        "current_timestamp#0",
        "threshold#0",
        "maybe_value%0#0"
      ]
    },
    "1125": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "current_price#0",
        "current_timestamp#0",
        "threshold#0",
        "maybe_value%0#0",
        "1"
      ]
    },
    "1126": {
      "op": "==",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "current_price#0",
        "current_timestamp#0",
        "threshold#0",
        "tmp%0#0"
      ]
    },
    "1127": {
      "op": "bz update_price_after_if_else@11",
      "stack_out": [
        "current_price#0",
        "current_timestamp#0",
        "threshold#0"
      ]
    },
    "1130": {
      "op": "intc_0 // 0",
      "stack_out": [
        "current_price#0",
        "current_timestamp#0",
        "threshold#0",
        "0"
      ]
    },
    "1131": {
      "op": "bytec 4 // \"threshold_price\"",
      "defined_out": [
        "\"threshold_price\"",
        "0"
      ],
      "stack_out": [
        "current_price#0",
        "current_timestamp#0",
        "threshold#0",
        "0",
        "\"threshold_price\""
      ]
    },
    "1133": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "threshold#0"
      ],
      "stack_out": [
        "current_price#0",
        "current_timestamp#0",
        "threshold#0",
        "threshold#0",
        "maybe_exists%1#0"
      ]
    },
    "1134": {
      "op": "swap",
      "stack_out": [
        "current_price#0",
        "current_timestamp#0",
        "threshold#0",
        "maybe_exists%1#0",
        "threshold#0"
      ]
    },
    "1135": {
      "op": "dup",
      "stack_out": [
        "current_price#0",
        "current_timestamp#0",
        "threshold#0",
        "maybe_exists%1#0",
        "threshold#0",
        "threshold#0 (copy)"
      ]
    },
    "1136": {
      "op": "cover 2",
      "stack_out": [
        "current_price#0",
        "current_timestamp#0",
        "threshold#0",
        "threshold#0",
        "maybe_exists%1#0",
        "threshold#0"
      ]
    },
    "1138": {
      "op": "frame_bury 2",
      "defined_out": [
        "maybe_exists%1#0",
        "threshold#0"
      ],
      "stack_out": [
        "current_price#0",
        "current_timestamp#0",
        "threshold#0",
        "threshold#0",
        "maybe_exists%1#0"
      ]
    },
    "1140": {
      "error": "check self.threshold_price exists",
      "op": "assert // check self.threshold_price exists",
      "stack_out": [
        "current_price#0",
        "current_timestamp#0",
        "threshold#0",
        "threshold#0"
      ]
    },
    "1141": {
      "op": "frame_dig -2",
      "stack_out": [
        "current_price#0",
        "current_timestamp#0",
        "threshold#0",
        "threshold#0",
        "new_price#0 (copy)"
      ]
    },
    "1143": {
      "op": "<=",
      "defined_out": [
        "threshold#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "current_price#0",
        "current_timestamp#0",
        "threshold#0",
        "tmp%1#0"
      ]
    },
    "1144": {
      "op": "bz update_price_after_if_else@11",
      "stack_out": [
        "current_price#0",
        "current_timestamp#0",
        "threshold#0"
      ]
    },
    "1147": {
      "op": "frame_dig -2",
      "stack_out": [
        "current_price#0",
        "current_timestamp#0",
        "threshold#0",
        "new_price#0 (copy)"
      ]
    },
    "1149": {
      "op": "itob",
      "defined_out": [
        "threshold#0",
        "tmp%2#1"
      ],
      "stack_out": [
        "current_price#0",
        "current_timestamp#0",
        "threshold#0",
        "tmp%2#1"
      ]
    },
    "1150": {
      "op": "pushbytes 0x5468726573686f6c642072656163686564202d2050726963653a20",
      "defined_out": [
        "0x5468726573686f6c642072656163686564202d2050726963653a20",
        "threshold#0",
        "tmp%2#1"
      ],
      "stack_out": [
        "current_price#0",
        "current_timestamp#0",
        "threshold#0",
        "tmp%2#1",
        "0x5468726573686f6c642072656163686564202d2050726963653a20"
      ]
    },
    "1179": {
      "op": "swap",
      "stack_out": [
        "current_price#0",
        "current_timestamp#0",
        "threshold#0",
        "0x5468726573686f6c642072656163686564202d2050726963653a20",
        "tmp%2#1"
      ]
    },
    "1180": {
      "op": "concat",
      "defined_out": [
        "threshold#0",
        "tmp%3#1"
      ],
      "stack_out": [
        "current_price#0",
        "current_timestamp#0",
        "threshold#0",
        "tmp%3#1"
      ]
    },
    "1181": {
      "op": "pushbytes 0x205468726573686f6c643a20",
      "defined_out": [
        "0x205468726573686f6c643a20",
        "threshold#0",
        "tmp%3#1"
      ],
      "stack_out": [
        "current_price#0",
        "current_timestamp#0",
        "threshold#0",
        "tmp%3#1",
        "0x205468726573686f6c643a20"
      ]
    },
    "1195": {
      "op": "concat",
      "defined_out": [
        "threshold#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "current_price#0",
        "current_timestamp#0",
        "threshold#0",
        "tmp%4#0"
      ]
    },
    "1196": {
      "op": "frame_dig 2",
      "stack_out": [
        "current_price#0",
        "current_timestamp#0",
        "threshold#0",
        "tmp%4#0",
        "threshold#0"
      ]
    },
    "1198": {
      "op": "itob",
      "defined_out": [
        "threshold#0",
        "tmp%4#0",
        "tmp%5#1"
      ],
      "stack_out": [
        "current_price#0",
        "current_timestamp#0",
        "threshold#0",
        "tmp%4#0",
        "tmp%5#1"
      ]
    },
    "1199": {
      "op": "concat",
      "defined_out": [
        "threshold#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "current_price#0",
        "current_timestamp#0",
        "threshold#0",
        "tmp%6#0"
      ]
    },
    "1200": {
      "op": "log",
      "stack_out": [
        "current_price#0",
        "current_timestamp#0",
        "threshold#0"
      ]
    },
    "1201": {
      "block": "update_price_after_if_else@11",
      "stack_in": [
        "current_price#0",
        "current_timestamp#0",
        "threshold#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "current_price#0"
      ],
      "stack_out": [
        "current_price#0",
        "current_timestamp#0",
        "threshold#0",
        "current_price#0"
      ]
    },
    "1203": {
      "op": "itob",
      "defined_out": [
        "current_price#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "current_price#0",
        "current_timestamp#0",
        "threshold#0",
        "tmp%13#0"
      ]
    },
    "1204": {
      "op": "pushbytes 0x50726963652075706461746564202d204f6c643a20",
      "defined_out": [
        "0x50726963652075706461746564202d204f6c643a20",
        "current_price#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "current_price#0",
        "current_timestamp#0",
        "threshold#0",
        "tmp%13#0",
        "0x50726963652075706461746564202d204f6c643a20"
      ]
    },
    "1227": {
      "op": "swap",
      "stack_out": [
        "current_price#0",
        "current_timestamp#0",
        "threshold#0",
        "0x50726963652075706461746564202d204f6c643a20",
        "tmp%13#0"
      ]
    },
    "1228": {
      "op": "concat",
      "defined_out": [
        "current_price#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "current_price#0",
        "current_timestamp#0",
        "threshold#0",
        "tmp%14#0"
      ]
    },
    "1229": {
      "op": "pushbytes 0x204e65773a20",
      "defined_out": [
        "0x204e65773a20",
        "current_price#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "current_price#0",
        "current_timestamp#0",
        "threshold#0",
        "tmp%14#0",
        "0x204e65773a20"
      ]
    },
    "1237": {
      "op": "concat",
      "defined_out": [
        "current_price#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "current_price#0",
        "current_timestamp#0",
        "threshold#0",
        "tmp%15#0"
      ]
    },
    "1238": {
      "op": "frame_dig -2",
      "defined_out": [
        "current_price#0",
        "new_price#0 (copy)",
        "tmp%15#0"
      ],
      "stack_out": [
        "current_price#0",
        "current_timestamp#0",
        "threshold#0",
        "tmp%15#0",
        "new_price#0 (copy)"
      ]
    },
    "1240": {
      "op": "itob",
      "defined_out": [
        "current_price#0",
        "tmp%15#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "current_price#0",
        "current_timestamp#0",
        "threshold#0",
        "tmp%15#0",
        "tmp%16#0"
      ]
    },
    "1241": {
      "op": "concat",
      "defined_out": [
        "current_price#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "current_price#0",
        "current_timestamp#0",
        "threshold#0",
        "tmp%17#0"
      ]
    },
    "1242": {
      "op": "log",
      "stack_out": [
        "current_price#0",
        "current_timestamp#0",
        "threshold#0"
      ]
    },
    "1243": {
      "op": "pushbytes \"Price updated successfully\"",
      "defined_out": [
        "\"Price updated successfully\"",
        "current_price#0"
      ],
      "stack_out": [
        "current_price#0",
        "current_timestamp#0",
        "threshold#0",
        "\"Price updated successfully\""
      ]
    },
    "1271": {
      "op": "frame_bury 0"
    },
    "1273": {
      "retsub": true,
      "op": "retsub"
    },
    "1274": {
      "block": "update_price_after_if_else@15",
      "stack_in": [
        "current_price#0",
        "current_timestamp#0",
        "threshold#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "current_price#0"
      ],
      "stack_out": [
        "current_price#0",
        "current_timestamp#0",
        "threshold#0",
        "current_price#0"
      ]
    },
    "1276": {
      "op": "frame_dig -2",
      "defined_out": [
        "current_price#0",
        "new_price#0 (copy)"
      ],
      "stack_out": [
        "current_price#0",
        "current_timestamp#0",
        "threshold#0",
        "current_price#0",
        "new_price#0 (copy)"
      ]
    },
    "1278": {
      "op": ">",
      "defined_out": [
        "current_price#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "current_price#0",
        "current_timestamp#0",
        "threshold#0",
        "tmp%1#0"
      ]
    },
    "1279": {
      "op": "bz update_price_else_body@17",
      "stack_out": [
        "current_price#0",
        "current_timestamp#0",
        "threshold#0"
      ]
    },
    "1282": {
      "op": "frame_dig 0",
      "stack_out": [
        "current_price#0",
        "current_timestamp#0",
        "threshold#0",
        "current_price#0"
      ]
    },
    "1284": {
      "op": "dup",
      "defined_out": [
        "current_price#0",
        "current_price#0 (copy)"
      ],
      "stack_out": [
        "current_price#0",
        "current_timestamp#0",
        "threshold#0",
        "current_price#0",
        "current_price#0 (copy)"
      ]
    },
    "1285": {
      "op": "frame_dig -2",
      "stack_out": [
        "current_price#0",
        "current_timestamp#0",
        "threshold#0",
        "current_price#0",
        "current_price#0 (copy)",
        "new_price#0 (copy)"
      ]
    },
    "1287": {
      "op": "-",
      "defined_out": [
        "current_price#0",
        "tmp%2#2"
      ],
      "stack_out": [
        "current_price#0",
        "current_timestamp#0",
        "threshold#0",
        "current_price#0",
        "tmp%2#2"
      ]
    },
    "1288": {
      "op": "intc_2 // 10000",
      "defined_out": [
        "10000",
        "current_price#0",
        "tmp%2#2"
      ],
      "stack_out": [
        "current_price#0",
        "current_timestamp#0",
        "threshold#0",
        "current_price#0",
        "tmp%2#2",
        "10000"
      ]
    },
    "1289": {
      "op": "*",
      "defined_out": [
        "current_price#0",
        "tmp%3#2"
      ],
      "stack_out": [
        "current_price#0",
        "current_timestamp#0",
        "threshold#0",
        "current_price#0",
        "tmp%3#2"
      ]
    },
    "1290": {
      "op": "swap",
      "stack_out": [
        "current_price#0",
        "current_timestamp#0",
        "threshold#0",
        "tmp%3#2",
        "current_price#0"
      ]
    },
    "1291": {
      "op": "/",
      "defined_out": [
        "current_price#0",
        "deviation#0"
      ],
      "stack_out": [
        "current_price#0",
        "current_timestamp#0",
        "threshold#0",
        "deviation#0"
      ]
    },
    "1292": {
      "op": "b update_price_after_inlined_smart_contracts.price_oracle.contract.PriceOracle._calculate_deviation@19"
    },
    "1295": {
      "block": "update_price_else_body@17",
      "stack_in": [
        "current_price#0",
        "current_timestamp#0",
        "threshold#0"
      ],
      "op": "frame_dig -2",
      "defined_out": [
        "new_price#0 (copy)"
      ],
      "stack_out": [
        "current_price#0",
        "current_timestamp#0",
        "threshold#0",
        "new_price#0 (copy)"
      ]
    },
    "1297": {
      "op": "frame_dig 0",
      "defined_out": [
        "current_price#0",
        "new_price#0 (copy)"
      ],
      "stack_out": [
        "current_price#0",
        "current_timestamp#0",
        "threshold#0",
        "new_price#0 (copy)",
        "current_price#0"
      ]
    },
    "1299": {
      "op": "dup",
      "defined_out": [
        "current_price#0",
        "current_price#0 (copy)",
        "new_price#0 (copy)"
      ],
      "stack_out": [
        "current_price#0",
        "current_timestamp#0",
        "threshold#0",
        "new_price#0 (copy)",
        "current_price#0 (copy)",
        "current_price#0 (copy)"
      ]
    },
    "1300": {
      "op": "cover 2",
      "stack_out": [
        "current_price#0",
        "current_timestamp#0",
        "threshold#0",
        "current_price#0",
        "new_price#0 (copy)",
        "current_price#0 (copy)"
      ]
    },
    "1302": {
      "op": "-",
      "defined_out": [
        "current_price#0",
        "tmp%4#2"
      ],
      "stack_out": [
        "current_price#0",
        "current_timestamp#0",
        "threshold#0",
        "current_price#0",
        "tmp%4#2"
      ]
    },
    "1303": {
      "op": "intc_2 // 10000",
      "defined_out": [
        "10000",
        "current_price#0",
        "tmp%4#2"
      ],
      "stack_out": [
        "current_price#0",
        "current_timestamp#0",
        "threshold#0",
        "current_price#0",
        "tmp%4#2",
        "10000"
      ]
    },
    "1304": {
      "op": "*",
      "defined_out": [
        "current_price#0",
        "tmp%5#2"
      ],
      "stack_out": [
        "current_price#0",
        "current_timestamp#0",
        "threshold#0",
        "current_price#0",
        "tmp%5#2"
      ]
    },
    "1305": {
      "op": "swap",
      "stack_out": [
        "current_price#0",
        "current_timestamp#0",
        "threshold#0",
        "tmp%5#2",
        "current_price#0"
      ]
    },
    "1306": {
      "op": "/",
      "defined_out": [
        "current_price#0",
        "deviation#0"
      ],
      "stack_out": [
        "current_price#0",
        "current_timestamp#0",
        "threshold#0",
        "deviation#0"
      ]
    },
    "1307": {
      "op": "b update_price_after_inlined_smart_contracts.price_oracle.contract.PriceOracle._calculate_deviation@19"
    },
    "1310": {
      "block": "update_price_bool_false@3",
      "stack_in": [
        "current_price#0",
        "current_timestamp#0",
        "threshold#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "or_result%0#0"
      ],
      "stack_out": [
        "current_price#0",
        "current_timestamp#0",
        "threshold#0",
        "or_result%0#0"
      ]
    },
    "1311": {
      "op": "b update_price_bool_merge@4"
    },
    "1314": {
      "subroutine": "smart_contracts.price_oracle.contract.PriceOracle.set_threshold",
      "params": {
        "threshold#0": "uint64"
      },
      "block": "set_threshold",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "1317": {
      "op": "frame_dig -1",
      "defined_out": [
        "threshold#0 (copy)"
      ],
      "stack_out": [
        "threshold#0 (copy)"
      ]
    },
    "1319": {
      "error": "Threshold must be positive",
      "op": "assert // Threshold must be positive",
      "stack_out": []
    },
    "1320": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1322": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "0"
      ]
    },
    "1323": {
      "op": "bytec_1 // \"admin\"",
      "defined_out": [
        "\"admin\"",
        "0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "0",
        "\"admin\""
      ]
    },
    "1324": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1325": {
      "error": "check self.admin exists",
      "op": "assert // check self.admin exists",
      "stack_out": [
        "tmp%1#0",
        "maybe_value%0#0"
      ]
    },
    "1326": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "1327": {
      "op": "bnz set_threshold_bool_true@2",
      "stack_out": []
    },
    "1330": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "1332": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%3#0",
        "0"
      ]
    },
    "1333": {
      "op": "bytec 11 // \"is_updater\"",
      "defined_out": [
        "\"is_updater\"",
        "0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "0",
        "\"is_updater\""
      ]
    },
    "1335": {
      "op": "app_local_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1336": {
      "error": "check self.is_updater exists for account",
      "op": "assert // check self.is_updater exists for account",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "1337": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "1"
      ]
    },
    "1338": {
      "op": "==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "1339": {
      "op": "bz set_threshold_bool_false@3",
      "stack_out": []
    },
    "1342": {
      "block": "set_threshold_bool_true@2",
      "stack_in": [],
      "op": "intc_1 // 1",
      "defined_out": [
        "or_result%0#0"
      ],
      "stack_out": [
        "or_result%0#0"
      ]
    },
    "1343": {
      "block": "set_threshold_bool_merge@4",
      "stack_in": [
        "or_result%0#0"
      ],
      "error": "Not authorized to set threshold",
      "op": "assert // Not authorized to set threshold",
      "defined_out": [],
      "stack_out": []
    },
    "1344": {
      "op": "bytec 4 // \"threshold_price\"",
      "defined_out": [
        "\"threshold_price\""
      ],
      "stack_out": [
        "\"threshold_price\""
      ]
    },
    "1346": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"threshold_price\"",
        "threshold#0 (copy)"
      ],
      "stack_out": [
        "\"threshold_price\"",
        "threshold#0 (copy)"
      ]
    },
    "1348": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1349": {
      "op": "bytec 5 // \"threshold_active\"",
      "defined_out": [
        "\"threshold_active\""
      ],
      "stack_out": [
        "\"threshold_active\""
      ]
    },
    "1351": {
      "op": "intc_1 // 1",
      "defined_out": [
        "\"threshold_active\"",
        "1"
      ],
      "stack_out": [
        "\"threshold_active\"",
        "1"
      ]
    },
    "1352": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1353": {
      "op": "pushbytes \"threshold_setter\"",
      "defined_out": [
        "\"threshold_setter\""
      ],
      "stack_out": [
        "\"threshold_setter\""
      ]
    },
    "1371": {
      "op": "txn Sender",
      "defined_out": [
        "\"threshold_setter\"",
        "materialized_values%0#0"
      ],
      "stack_out": [
        "\"threshold_setter\"",
        "materialized_values%0#0"
      ]
    },
    "1373": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1374": {
      "op": "frame_dig -1",
      "stack_out": [
        "threshold#0 (copy)"
      ]
    },
    "1376": {
      "op": "itob",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "1377": {
      "op": "pushbytes 0x5468726573686f6c6420736574202d2056616c75653a20",
      "defined_out": [
        "0x5468726573686f6c6420736574202d2056616c75653a20",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "0x5468726573686f6c6420736574202d2056616c75653a20"
      ]
    },
    "1402": {
      "op": "swap",
      "stack_out": [
        "0x5468726573686f6c6420736574202d2056616c75653a20",
        "tmp%5#0"
      ]
    },
    "1403": {
      "op": "concat",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "1404": {
      "op": "log",
      "stack_out": []
    },
    "1405": {
      "op": "pushbytes \"Threshold set successfully\"",
      "defined_out": [
        "\"Threshold set successfully\""
      ],
      "stack_out": [
        "\"Threshold set successfully\""
      ]
    },
    "1433": {
      "retsub": true,
      "op": "retsub"
    },
    "1434": {
      "block": "set_threshold_bool_false@3",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "or_result%0#0"
      ],
      "stack_out": [
        "or_result%0#0"
      ]
    },
    "1435": {
      "op": "b set_threshold_bool_merge@4"
    },
    "1438": {
      "subroutine": "smart_contracts.price_oracle.contract.PriceOracle.get_price",
      "params": {},
      "block": "get_price",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1439": {
      "op": "bytec_2 // \"token_price\"",
      "defined_out": [
        "\"token_price\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"token_price\""
      ]
    },
    "1440": {
      "op": "app_global_get_ex",
      "defined_out": [
        "current_price#0",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "current_price#0",
        "maybe_exists%0#0"
      ]
    },
    "1441": {
      "error": "check self.token_price exists",
      "op": "assert // check self.token_price exists",
      "stack_out": [
        "current_price#0"
      ]
    },
    "1442": {
      "op": "intc_0 // 0",
      "stack_out": [
        "current_price#0",
        "0"
      ]
    },
    "1443": {
      "op": "bytec_3 // \"price_timestamp\"",
      "defined_out": [
        "\"price_timestamp\"",
        "0",
        "current_price#0"
      ],
      "stack_out": [
        "current_price#0",
        "0",
        "\"price_timestamp\""
      ]
    },
    "1444": {
      "op": "app_global_get_ex",
      "defined_out": [
        "current_price#0",
        "maybe_exists%1#0",
        "price_timestamp#0"
      ],
      "stack_out": [
        "current_price#0",
        "price_timestamp#0",
        "maybe_exists%1#0"
      ]
    },
    "1445": {
      "error": "check self.price_timestamp exists",
      "op": "assert // check self.price_timestamp exists",
      "stack_out": [
        "current_price#0",
        "price_timestamp#0"
      ]
    },
    "1446": {
      "op": "dig 1",
      "defined_out": [
        "current_price#0",
        "current_price#0 (copy)",
        "price_timestamp#0"
      ],
      "stack_out": [
        "current_price#0",
        "price_timestamp#0",
        "current_price#0 (copy)"
      ]
    },
    "1448": {
      "error": "No price available",
      "op": "assert // No price available",
      "stack_out": [
        "current_price#0",
        "price_timestamp#0"
      ]
    },
    "1449": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "current_price#0",
        "price_timestamp#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "current_price#0",
        "price_timestamp#0",
        "tmp%1#0"
      ]
    },
    "1451": {
      "op": "intc_0 // 0",
      "stack_out": [
        "current_price#0",
        "price_timestamp#0",
        "tmp%1#0",
        "0"
      ]
    },
    "1452": {
      "op": "bytec 9 // \"staleness_threshold\"",
      "defined_out": [
        "\"staleness_threshold\"",
        "0",
        "current_price#0",
        "price_timestamp#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "current_price#0",
        "price_timestamp#0",
        "tmp%1#0",
        "0",
        "\"staleness_threshold\""
      ]
    },
    "1454": {
      "op": "app_global_get_ex",
      "defined_out": [
        "current_price#0",
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "price_timestamp#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "current_price#0",
        "price_timestamp#0",
        "tmp%1#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "1455": {
      "error": "check self.staleness_threshold exists",
      "op": "assert // check self.staleness_threshold exists",
      "stack_out": [
        "current_price#0",
        "price_timestamp#0",
        "tmp%1#0",
        "maybe_value%2#0"
      ]
    },
    "1456": {
      "op": "uncover 2",
      "stack_out": [
        "current_price#0",
        "tmp%1#0",
        "maybe_value%2#0",
        "price_timestamp#0"
      ]
    },
    "1458": {
      "op": "+",
      "defined_out": [
        "current_price#0",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "current_price#0",
        "tmp%1#0",
        "tmp%2#0"
      ]
    },
    "1459": {
      "op": "<=",
      "defined_out": [
        "current_price#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "current_price#0",
        "tmp%3#0"
      ]
    },
    "1460": {
      "error": "Price is stale",
      "op": "assert // Price is stale",
      "stack_out": [
        "current_price#0"
      ]
    },
    "1461": {
      "retsub": true,
      "op": "retsub"
    },
    "1462": {
      "subroutine": "smart_contracts.price_oracle.contract.PriceOracle.get_price_info",
      "params": {},
      "block": "get_price_info",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1463": {
      "op": "bytec_2 // \"token_price\"",
      "defined_out": [
        "\"token_price\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"token_price\""
      ]
    },
    "1464": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1465": {
      "error": "check self.token_price exists",
      "op": "assert // check self.token_price exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "1466": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "1467": {
      "op": "intc_0 // 0",
      "stack_out": [
        "val_as_bytes%0#0",
        "0"
      ]
    },
    "1468": {
      "op": "bytec_3 // \"price_timestamp\"",
      "defined_out": [
        "\"price_timestamp\"",
        "0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "0",
        "\"price_timestamp\""
      ]
    },
    "1469": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1470": {
      "error": "check self.price_timestamp exists",
      "op": "assert // check self.price_timestamp exists",
      "stack_out": [
        "val_as_bytes%0#0",
        "maybe_value%1#0"
      ]
    },
    "1471": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ]
    },
    "1472": {
      "op": "intc_0 // 0",
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "0"
      ]
    },
    "1473": {
      "op": "bytec 10 // \"price_confidence\"",
      "defined_out": [
        "\"price_confidence\"",
        "0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "0",
        "\"price_confidence\""
      ]
    },
    "1475": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "1476": {
      "error": "check self.price_confidence exists",
      "op": "assert // check self.price_confidence exists",
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "maybe_value%2#0"
      ]
    },
    "1477": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ]
    },
    "1478": {
      "op": "cover 2",
      "stack_out": [
        "val_as_bytes%2#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ]
    },
    "1480": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "val_as_bytes%2#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "1481": {
      "op": "swap",
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "val_as_bytes%2#0"
      ]
    },
    "1482": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%3#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%3#0"
      ]
    },
    "1483": {
      "retsub": true,
      "op": "retsub"
    },
    "1484": {
      "subroutine": "smart_contracts.price_oracle.contract.PriceOracle.is_price_stale",
      "params": {},
      "block": "is_price_stale",
      "stack_in": [],
      "op": "proto 0 1"
    },
    "1487": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1488": {
      "op": "bytec_3 // \"price_timestamp\"",
      "defined_out": [
        "\"price_timestamp\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"price_timestamp\""
      ]
    },
    "1489": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "price_timestamp#0"
      ],
      "stack_out": [
        "price_timestamp#0",
        "maybe_exists%0#0"
      ]
    },
    "1490": {
      "op": "swap",
      "stack_out": [
        "maybe_exists%0#0",
        "price_timestamp#0"
      ]
    },
    "1491": {
      "op": "dup",
      "stack_out": [
        "maybe_exists%0#0",
        "price_timestamp#0",
        "price_timestamp#0 (copy)"
      ]
    },
    "1492": {
      "op": "uncover 2",
      "defined_out": [
        "maybe_exists%0#0",
        "price_timestamp#0"
      ],
      "stack_out": [
        "price_timestamp#0",
        "price_timestamp#0",
        "maybe_exists%0#0"
      ]
    },
    "1494": {
      "error": "check self.price_timestamp exists",
      "op": "assert // check self.price_timestamp exists",
      "stack_out": [
        "price_timestamp#0",
        "price_timestamp#0"
      ]
    },
    "1495": {
      "op": "bnz is_price_stale_after_if_else@2",
      "stack_out": [
        "price_timestamp#0"
      ]
    },
    "1498": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "price_timestamp#0"
      ],
      "stack_out": [
        "price_timestamp#0",
        "1"
      ]
    },
    "1499": {
      "op": "swap"
    },
    "1500": {
      "retsub": true,
      "op": "retsub"
    },
    "1501": {
      "block": "is_price_stale_after_if_else@2",
      "stack_in": [
        "price_timestamp#0"
      ],
      "op": "global LatestTimestamp",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "price_timestamp#0",
        "tmp%1#0"
      ]
    },
    "1503": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%1#0"
      ],
      "stack_out": [
        "price_timestamp#0",
        "tmp%1#0",
        "0"
      ]
    },
    "1504": {
      "op": "bytec 9 // \"staleness_threshold\"",
      "defined_out": [
        "\"staleness_threshold\"",
        "0",
        "tmp%1#0"
      ],
      "stack_out": [
        "price_timestamp#0",
        "tmp%1#0",
        "0",
        "\"staleness_threshold\""
      ]
    },
    "1506": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "price_timestamp#0",
        "tmp%1#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1507": {
      "error": "check self.staleness_threshold exists",
      "op": "assert // check self.staleness_threshold exists",
      "stack_out": [
        "price_timestamp#0",
        "tmp%1#0",
        "maybe_value%1#0"
      ]
    },
    "1508": {
      "op": "frame_dig 0",
      "defined_out": [
        "maybe_value%1#0",
        "price_timestamp#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "price_timestamp#0",
        "tmp%1#0",
        "maybe_value%1#0",
        "price_timestamp#0"
      ]
    },
    "1510": {
      "op": "+",
      "defined_out": [
        "price_timestamp#0",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "price_timestamp#0",
        "tmp%1#0",
        "tmp%2#0"
      ]
    },
    "1511": {
      "op": ">",
      "defined_out": [
        "price_timestamp#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "price_timestamp#0",
        "tmp%3#0"
      ]
    },
    "1512": {
      "op": "bz is_price_stale_else_body@4",
      "stack_out": [
        "price_timestamp#0"
      ]
    },
    "1515": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "price_timestamp#0"
      ],
      "stack_out": [
        "price_timestamp#0",
        "1"
      ]
    },
    "1516": {
      "op": "swap"
    },
    "1517": {
      "retsub": true,
      "op": "retsub"
    },
    "1518": {
      "block": "is_price_stale_else_body@4",
      "stack_in": [
        "price_timestamp#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "price_timestamp#0",
        "0"
      ]
    },
    "1519": {
      "op": "swap"
    },
    "1520": {
      "retsub": true,
      "op": "retsub"
    },
    "1521": {
      "subroutine": "smart_contracts.price_oracle.contract.PriceOracle.threshold_reached",
      "params": {},
      "block": "threshold_reached",
      "stack_in": [],
      "op": "proto 0 1"
    },
    "1524": {
      "op": "pushbytes \"\"",
      "stack_out": [
        "current_price#0"
      ]
    },
    "1526": {
      "op": "dup",
      "stack_out": [
        "current_price#0",
        "threshold#0"
      ]
    },
    "1527": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "current_price#0",
        "threshold#0",
        "0"
      ]
    },
    "1528": {
      "op": "bytec 5 // \"threshold_active\"",
      "defined_out": [
        "\"threshold_active\"",
        "0"
      ],
      "stack_out": [
        "current_price#0",
        "threshold#0",
        "0",
        "\"threshold_active\""
      ]
    },
    "1530": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "current_price#0",
        "threshold#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1531": {
      "error": "check self.threshold_active exists",
      "op": "assert // check self.threshold_active exists",
      "stack_out": [
        "current_price#0",
        "threshold#0",
        "maybe_value%0#0"
      ]
    },
    "1532": {
      "op": "bnz threshold_reached_after_if_else@2",
      "stack_out": [
        "current_price#0",
        "threshold#0"
      ]
    },
    "1535": {
      "op": "intc_0 // 0",
      "stack_out": [
        "current_price#0",
        "threshold#0",
        "0"
      ]
    },
    "1536": {
      "op": "frame_bury 0"
    },
    "1538": {
      "retsub": true,
      "op": "retsub"
    },
    "1539": {
      "block": "threshold_reached_after_if_else@2",
      "stack_in": [
        "current_price#0",
        "threshold#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "current_price#0",
        "threshold#0",
        "0"
      ]
    },
    "1540": {
      "op": "bytec_2 // \"token_price\"",
      "defined_out": [
        "\"token_price\"",
        "0"
      ],
      "stack_out": [
        "current_price#0",
        "threshold#0",
        "0",
        "\"token_price\""
      ]
    },
    "1541": {
      "op": "app_global_get_ex",
      "defined_out": [
        "current_price#0",
        "maybe_exists%1#0"
      ],
      "stack_out": [
        "current_price#0",
        "threshold#0",
        "current_price#0",
        "maybe_exists%1#0"
      ]
    },
    "1542": {
      "op": "swap",
      "stack_out": [
        "current_price#0",
        "threshold#0",
        "maybe_exists%1#0",
        "current_price#0"
      ]
    },
    "1543": {
      "op": "dup",
      "stack_out": [
        "current_price#0",
        "threshold#0",
        "maybe_exists%1#0",
        "current_price#0",
        "current_price#0 (copy)"
      ]
    },
    "1544": {
      "op": "cover 2",
      "stack_out": [
        "current_price#0",
        "threshold#0",
        "current_price#0",
        "maybe_exists%1#0",
        "current_price#0"
      ]
    },
    "1546": {
      "op": "frame_bury 0",
      "defined_out": [
        "current_price#0",
        "maybe_exists%1#0"
      ],
      "stack_out": [
        "current_price#0",
        "threshold#0",
        "current_price#0",
        "maybe_exists%1#0"
      ]
    },
    "1548": {
      "error": "check self.token_price exists",
      "op": "assert // check self.token_price exists",
      "stack_out": [
        "current_price#0",
        "threshold#0",
        "current_price#0"
      ]
    },
    "1549": {
      "op": "intc_0 // 0",
      "stack_out": [
        "current_price#0",
        "threshold#0",
        "current_price#0",
        "0"
      ]
    },
    "1550": {
      "op": "bytec 4 // \"threshold_price\"",
      "defined_out": [
        "\"threshold_price\"",
        "0",
        "current_price#0"
      ],
      "stack_out": [
        "current_price#0",
        "threshold#0",
        "current_price#0",
        "0",
        "\"threshold_price\""
      ]
    },
    "1552": {
      "op": "app_global_get_ex",
      "defined_out": [
        "current_price#0",
        "maybe_exists%2#0",
        "threshold#0"
      ],
      "stack_out": [
        "current_price#0",
        "threshold#0",
        "current_price#0",
        "threshold#0",
        "maybe_exists%2#0"
      ]
    },
    "1553": {
      "op": "swap",
      "stack_out": [
        "current_price#0",
        "threshold#0",
        "current_price#0",
        "maybe_exists%2#0",
        "threshold#0"
      ]
    },
    "1554": {
      "op": "frame_bury 1",
      "defined_out": [
        "current_price#0",
        "maybe_exists%2#0",
        "threshold#0"
      ],
      "stack_out": [
        "current_price#0",
        "threshold#0",
        "current_price#0",
        "maybe_exists%2#0"
      ]
    },
    "1556": {
      "error": "check self.threshold_price exists",
      "op": "assert // check self.threshold_price exists",
      "stack_out": [
        "current_price#0",
        "threshold#0",
        "current_price#0"
      ]
    },
    "1557": {
      "op": "bnz threshold_reached_after_if_else@4",
      "stack_out": [
        "current_price#0",
        "threshold#0"
      ]
    },
    "1560": {
      "op": "intc_0 // 0",
      "stack_out": [
        "current_price#0",
        "threshold#0",
        "0"
      ]
    },
    "1561": {
      "op": "frame_bury 0"
    },
    "1563": {
      "retsub": true,
      "op": "retsub"
    },
    "1564": {
      "block": "threshold_reached_after_if_else@4",
      "stack_in": [
        "current_price#0",
        "threshold#0"
      ],
      "callsub": "smart_contracts.price_oracle.contract.PriceOracle.is_price_stale",
      "op": "callsub is_price_stale",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "current_price#0",
        "threshold#0",
        "tmp%2#0"
      ]
    },
    "1567": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%2#0"
      ],
      "stack_out": [
        "current_price#0",
        "threshold#0",
        "tmp%2#0",
        "1"
      ]
    },
    "1568": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "current_price#0",
        "threshold#0",
        "tmp%3#0"
      ]
    },
    "1569": {
      "op": "bz threshold_reached_after_if_else@6",
      "stack_out": [
        "current_price#0",
        "threshold#0"
      ]
    },
    "1572": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "current_price#0",
        "threshold#0",
        "0"
      ]
    },
    "1573": {
      "op": "frame_bury 0"
    },
    "1575": {
      "retsub": true,
      "op": "retsub"
    },
    "1576": {
      "block": "threshold_reached_after_if_else@6",
      "stack_in": [
        "current_price#0",
        "threshold#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "current_price#0"
      ],
      "stack_out": [
        "current_price#0",
        "threshold#0",
        "current_price#0"
      ]
    },
    "1578": {
      "op": "frame_dig 1",
      "defined_out": [
        "current_price#0",
        "threshold#0"
      ],
      "stack_out": [
        "current_price#0",
        "threshold#0",
        "current_price#0",
        "threshold#0"
      ]
    },
    "1580": {
      "op": ">=",
      "defined_out": [
        "current_price#0",
        "threshold#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "current_price#0",
        "threshold#0",
        "tmp%4#0"
      ]
    },
    "1581": {
      "op": "bz threshold_reached_else_body@8",
      "stack_out": [
        "current_price#0",
        "threshold#0"
      ]
    },
    "1584": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "current_price#0",
        "threshold#0"
      ],
      "stack_out": [
        "current_price#0",
        "threshold#0",
        "1"
      ]
    },
    "1585": {
      "op": "frame_bury 0"
    },
    "1587": {
      "retsub": true,
      "op": "retsub"
    },
    "1588": {
      "block": "threshold_reached_else_body@8",
      "stack_in": [
        "current_price#0",
        "threshold#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "current_price#0",
        "threshold#0",
        "0"
      ]
    },
    "1589": {
      "op": "frame_bury 0"
    },
    "1591": {
      "retsub": true,
      "op": "retsub"
    },
    "1592": {
      "subroutine": "smart_contracts.price_oracle.contract.PriceOracle.get_threshold_info",
      "params": {},
      "block": "get_threshold_info",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1593": {
      "op": "bytec 4 // \"threshold_price\"",
      "defined_out": [
        "\"threshold_price\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"threshold_price\""
      ]
    },
    "1595": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1596": {
      "error": "check self.threshold_price exists",
      "op": "assert // check self.threshold_price exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "1597": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "1598": {
      "op": "intc_0 // 0",
      "stack_out": [
        "val_as_bytes%0#0",
        "0"
      ]
    },
    "1599": {
      "op": "bytec 5 // \"threshold_active\"",
      "defined_out": [
        "\"threshold_active\"",
        "0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "0",
        "\"threshold_active\""
      ]
    },
    "1601": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1602": {
      "error": "check self.threshold_active exists",
      "op": "assert // check self.threshold_active exists",
      "stack_out": [
        "val_as_bytes%0#0",
        "maybe_value%1#0"
      ]
    },
    "1603": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ]
    },
    "1604": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0"
      ]
    },
    "1605": {
      "retsub": true,
      "op": "retsub"
    },
    "1606": {
      "subroutine": "smart_contracts.price_oracle.contract.PriceOracle.activate_circuit_breaker",
      "params": {},
      "block": "activate_circuit_breaker",
      "stack_in": [],
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1608": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "1609": {
      "op": "bytec_1 // \"admin\"",
      "defined_out": [
        "\"admin\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"admin\""
      ]
    },
    "1610": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1611": {
      "error": "check self.admin exists",
      "op": "assert // check self.admin exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "1612": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1613": {
      "error": "Only admin can activate circuit breaker",
      "op": "assert // Only admin can activate circuit breaker",
      "stack_out": []
    },
    "1614": {
      "op": "bytec 6 // \"circuit_breaker\"",
      "defined_out": [
        "\"circuit_breaker\""
      ],
      "stack_out": [
        "\"circuit_breaker\""
      ]
    },
    "1616": {
      "op": "intc_1 // 1",
      "defined_out": [
        "\"circuit_breaker\"",
        "1"
      ],
      "stack_out": [
        "\"circuit_breaker\"",
        "1"
      ]
    },
    "1617": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1618": {
      "op": "bytec 14 // 0x4369726375697420627265616b657220616374697661746564",
      "defined_out": [
        "0x4369726375697420627265616b657220616374697661746564"
      ],
      "stack_out": [
        "0x4369726375697420627265616b657220616374697661746564"
      ]
    },
    "1620": {
      "op": "log",
      "stack_out": []
    },
    "1621": {
      "op": "bytec 14 // \"Circuit breaker activated\"",
      "defined_out": [
        "\"Circuit breaker activated\""
      ],
      "stack_out": [
        "\"Circuit breaker activated\""
      ]
    },
    "1623": {
      "retsub": true,
      "op": "retsub"
    },
    "1624": {
      "subroutine": "smart_contracts.price_oracle.contract.PriceOracle.reset_circuit_breaker",
      "params": {},
      "block": "reset_circuit_breaker",
      "stack_in": [],
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1626": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "1627": {
      "op": "bytec_1 // \"admin\"",
      "defined_out": [
        "\"admin\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"admin\""
      ]
    },
    "1628": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1629": {
      "error": "check self.admin exists",
      "op": "assert // check self.admin exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "1630": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1631": {
      "error": "Only admin can reset circuit breaker",
      "op": "assert // Only admin can reset circuit breaker",
      "stack_out": []
    },
    "1632": {
      "op": "bytec 6 // \"circuit_breaker\"",
      "defined_out": [
        "\"circuit_breaker\""
      ],
      "stack_out": [
        "\"circuit_breaker\""
      ]
    },
    "1634": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"circuit_breaker\"",
        "0"
      ]
    },
    "1635": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1636": {
      "op": "bytec 15 // 0x4369726375697420627265616b6572207265736574",
      "defined_out": [
        "0x4369726375697420627265616b6572207265736574"
      ],
      "stack_out": [
        "0x4369726375697420627265616b6572207265736574"
      ]
    },
    "1638": {
      "op": "log",
      "stack_out": []
    },
    "1639": {
      "op": "bytec 15 // \"Circuit breaker reset\"",
      "defined_out": [
        "\"Circuit breaker reset\""
      ],
      "stack_out": [
        "\"Circuit breaker reset\""
      ]
    },
    "1641": {
      "retsub": true,
      "op": "retsub"
    },
    "1642": {
      "subroutine": "smart_contracts.price_oracle.contract.PriceOracle.pause_oracle",
      "params": {},
      "block": "pause_oracle",
      "stack_in": [],
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1644": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "1645": {
      "op": "bytec_1 // \"admin\"",
      "defined_out": [
        "\"admin\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"admin\""
      ]
    },
    "1646": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1647": {
      "error": "check self.admin exists",
      "op": "assert // check self.admin exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "1648": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1649": {
      "error": "Only admin can pause",
      "op": "assert // Only admin can pause",
      "stack_out": []
    },
    "1650": {
      "op": "bytec 7 // \"is_paused\"",
      "defined_out": [
        "\"is_paused\""
      ],
      "stack_out": [
        "\"is_paused\""
      ]
    },
    "1652": {
      "op": "intc_1 // 1",
      "defined_out": [
        "\"is_paused\"",
        "1"
      ],
      "stack_out": [
        "\"is_paused\"",
        "1"
      ]
    },
    "1653": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1654": {
      "op": "bytec 16 // 0x4f7261636c6520706175736564",
      "defined_out": [
        "0x4f7261636c6520706175736564"
      ],
      "stack_out": [
        "0x4f7261636c6520706175736564"
      ]
    },
    "1656": {
      "op": "log",
      "stack_out": []
    },
    "1657": {
      "op": "bytec 16 // \"Oracle paused\"",
      "defined_out": [
        "\"Oracle paused\""
      ],
      "stack_out": [
        "\"Oracle paused\""
      ]
    },
    "1659": {
      "retsub": true,
      "op": "retsub"
    },
    "1660": {
      "subroutine": "smart_contracts.price_oracle.contract.PriceOracle.unpause_oracle",
      "params": {},
      "block": "unpause_oracle",
      "stack_in": [],
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1662": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "1663": {
      "op": "bytec_1 // \"admin\"",
      "defined_out": [
        "\"admin\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"admin\""
      ]
    },
    "1664": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1665": {
      "error": "check self.admin exists",
      "op": "assert // check self.admin exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "1666": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1667": {
      "error": "Only admin can unpause",
      "op": "assert // Only admin can unpause",
      "stack_out": []
    },
    "1668": {
      "op": "bytec 7 // \"is_paused\"",
      "defined_out": [
        "\"is_paused\""
      ],
      "stack_out": [
        "\"is_paused\""
      ]
    },
    "1670": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"is_paused\"",
        "0"
      ]
    },
    "1671": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1672": {
      "op": "bytec 17 // 0x4f7261636c6520756e706175736564",
      "defined_out": [
        "0x4f7261636c6520756e706175736564"
      ],
      "stack_out": [
        "0x4f7261636c6520756e706175736564"
      ]
    },
    "1674": {
      "op": "log",
      "stack_out": []
    },
    "1675": {
      "op": "bytec 17 // \"Oracle unpaused\"",
      "defined_out": [
        "\"Oracle unpaused\""
      ],
      "stack_out": [
        "\"Oracle unpaused\""
      ]
    },
    "1677": {
      "retsub": true,
      "op": "retsub"
    },
    "1678": {
      "subroutine": "smart_contracts.price_oracle.contract.PriceOracle.get_oracle_status",
      "params": {},
      "block": "get_oracle_status",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1679": {
      "op": "bytec 7 // \"is_paused\"",
      "defined_out": [
        "\"is_paused\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"is_paused\""
      ]
    },
    "1681": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1682": {
      "error": "check self.is_paused exists",
      "op": "assert // check self.is_paused exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "1683": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "1684": {
      "op": "intc_0 // 0",
      "stack_out": [
        "val_as_bytes%0#0",
        "0"
      ]
    },
    "1685": {
      "op": "bytec 6 // \"circuit_breaker\"",
      "defined_out": [
        "\"circuit_breaker\"",
        "0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "0",
        "\"circuit_breaker\""
      ]
    },
    "1687": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1688": {
      "error": "check self.circuit_breaker_active exists",
      "op": "assert // check self.circuit_breaker_active exists",
      "stack_out": [
        "val_as_bytes%0#0",
        "maybe_value%1#0"
      ]
    },
    "1689": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ]
    },
    "1690": {
      "op": "intc_0 // 0",
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "0"
      ]
    },
    "1691": {
      "op": "bytec 8 // \"updater_count\"",
      "defined_out": [
        "\"updater_count\"",
        "0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "0",
        "\"updater_count\""
      ]
    },
    "1693": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "1694": {
      "error": "check self.updater_count exists",
      "op": "assert // check self.updater_count exists",
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "maybe_value%2#0"
      ]
    },
    "1695": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ]
    },
    "1696": {
      "op": "cover 2",
      "stack_out": [
        "val_as_bytes%2#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ]
    },
    "1698": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "val_as_bytes%2#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "1699": {
      "op": "swap",
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "val_as_bytes%2#0"
      ]
    },
    "1700": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%3#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%3#0"
      ]
    },
    "1701": {
      "retsub": true,
      "op": "retsub"
    },
    "1702": {
      "subroutine": "smart_contracts.price_oracle.contract.PriceOracle.remove_threshold",
      "params": {},
      "block": "remove_threshold",
      "stack_in": [],
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1704": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "1705": {
      "op": "bytec_1 // \"admin\"",
      "defined_out": [
        "\"admin\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"admin\""
      ]
    },
    "1706": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1707": {
      "error": "check self.admin exists",
      "op": "assert // check self.admin exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "1708": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1709": {
      "error": "Only admin can remove threshold",
      "op": "assert // Only admin can remove threshold",
      "stack_out": []
    },
    "1710": {
      "op": "bytec 5 // \"threshold_active\"",
      "defined_out": [
        "\"threshold_active\""
      ],
      "stack_out": [
        "\"threshold_active\""
      ]
    },
    "1712": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"threshold_active\"",
        "0"
      ]
    },
    "1713": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1714": {
      "op": "bytec 4 // \"threshold_price\"",
      "defined_out": [
        "\"threshold_price\""
      ],
      "stack_out": [
        "\"threshold_price\""
      ]
    },
    "1716": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"threshold_price\"",
        "0"
      ]
    },
    "1717": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1718": {
      "op": "pushbytes 0x5468726573686f6c642072656d6f766564",
      "defined_out": [
        "0x5468726573686f6c642072656d6f766564"
      ],
      "stack_out": [
        "0x5468726573686f6c642072656d6f766564"
      ]
    },
    "1737": {
      "op": "log",
      "stack_out": []
    },
    "1738": {
      "op": "pushbytes \"Threshold removed successfully\"",
      "defined_out": [
        "\"Threshold removed successfully\""
      ],
      "stack_out": [
        "\"Threshold removed successfully\""
      ]
    },
    "1770": {
      "retsub": true,
      "op": "retsub"
    },
    "1771": {
      "subroutine": "smart_contracts.price_oracle.contract.PriceOracle.get_price_history_summary",
      "params": {},
      "block": "get_price_history_summary",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1772": {
      "op": "bytec_2 // \"token_price\"",
      "defined_out": [
        "\"token_price\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"token_price\""
      ]
    },
    "1773": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1774": {
      "error": "check self.token_price exists",
      "op": "assert // check self.token_price exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "1775": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "1776": {
      "op": "dup",
      "defined_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%0#0 (copy)"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%0#0 (copy)"
      ]
    },
    "1777": {
      "op": "dig 1",
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%0#0 (copy)",
        "val_as_bytes%0#0 (copy)"
      ]
    },
    "1779": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "1780": {
      "op": "swap",
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "val_as_bytes%0#0"
      ]
    },
    "1781": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%3#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%3#0"
      ]
    },
    "1782": {
      "retsub": true,
      "op": "retsub"
    }
  }
}