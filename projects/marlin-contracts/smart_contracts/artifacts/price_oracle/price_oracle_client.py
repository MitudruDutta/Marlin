# flake8: noqa
# fmt: off
# mypy: ignore-errors
# This file was automatically generated by algokit-client-generator.
# DO NOT MODIFY IT BY HAND.
# requires: algokit-utils@^3.0.0

# common
import dataclasses
import typing
# core algosdk
import algosdk
from algosdk.transaction import OnComplete
from algosdk.atomic_transaction_composer import TransactionSigner
from algosdk.source_map import SourceMap
from algosdk.transaction import Transaction
from algosdk.v2client.models import SimulateTraceConfig
# utils
import algokit_utils
from algokit_utils import AlgorandClient as _AlgoKitAlgorandClient

_APP_SPEC_JSON = r"""{"arcs": [22, 28], "bareActions": {"call": [], "create": ["NoOp"]}, "methods": [{"actions": {"call": ["NoOp"], "create": []}, "args": [], "name": "initialize", "returns": {"type": "string"}, "desc": "Initialize the price oracle", "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "byte[]", "name": "updater"}], "name": "add_price_updater", "returns": {"type": "string"}, "desc": "Add a price updater (admin only)", "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "uint64", "name": "new_price"}, {"type": "uint64", "name": "confidence"}], "name": "update_price", "returns": {"type": "string"}, "desc": "Update price with validation", "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "uint64", "name": "threshold"}], "name": "set_threshold", "returns": {"type": "string"}, "desc": "Set price threshold for monitoring", "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [], "name": "get_price", "returns": {"type": "uint64"}, "desc": "Get current price", "events": [], "readonly": true, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [], "name": "get_price_info", "returns": {"type": "(uint64,uint64,uint64)"}, "desc": "Get detailed price information", "events": [], "readonly": true, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [], "name": "is_price_stale", "returns": {"type": "uint64"}, "desc": "Check if price is stale", "events": [], "readonly": true, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [], "name": "threshold_reached", "returns": {"type": "uint64"}, "desc": "Check if threshold has been reached", "events": [], "readonly": true, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [], "name": "get_threshold_info", "returns": {"type": "(uint64,uint64)"}, "desc": "Get threshold information", "events": [], "readonly": true, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [], "name": "activate_circuit_breaker", "returns": {"type": "string"}, "desc": "Activate circuit breaker (admin only)", "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [], "name": "reset_circuit_breaker", "returns": {"type": "string"}, "desc": "Reset circuit breaker (admin only)", "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [], "name": "pause_oracle", "returns": {"type": "string"}, "desc": "Pause the oracle (admin only)", "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [], "name": "unpause_oracle", "returns": {"type": "string"}, "desc": "Unpause the oracle (admin only)", "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [], "name": "get_oracle_status", "returns": {"type": "(uint64,uint64,uint64)"}, "desc": "Get oracle status", "events": [], "readonly": true, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [], "name": "remove_threshold", "returns": {"type": "string"}, "desc": "Remove active threshold (admin only)", "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [], "name": "get_price_history_summary", "returns": {"type": "(uint64,uint64,uint64)"}, "desc": "Get price history summary (simplified)", "events": [], "readonly": false, "recommendations": {}}], "name": "PriceOracle", "state": {"keys": {"box": {}, "global": {"admin": {"key": "YWRtaW4=", "keyType": "AVMString", "valueType": "AVMBytes"}, "circuit_breaker_active": {"key": "Y2lyY3VpdF9icmVha2Vy", "keyType": "AVMString", "valueType": "AVMUint64"}, "is_paused": {"key": "aXNfcGF1c2Vk", "keyType": "AVMString", "valueType": "AVMUint64"}, "updater_count": {"key": "dXBkYXRlcl9jb3VudA==", "keyType": "AVMString", "valueType": "AVMUint64"}, "max_price_deviation": {"key": "bWF4X3ByaWNlX2RldmlhdGlvbg==", "keyType": "AVMString", "valueType": "AVMUint64"}, "min_update_interval": {"key": "bWluX3VwZGF0ZV9pbnRlcnZhbA==", "keyType": "AVMString", "valueType": "AVMUint64"}, "staleness_threshold": {"key": "c3RhbGVuZXNzX3RocmVzaG9sZA==", "keyType": "AVMString", "valueType": "AVMUint64"}, "token_price": {"key": "dG9rZW5fcHJpY2U=", "keyType": "AVMString", "valueType": "AVMUint64"}, "price_timestamp": {"key": "cHJpY2VfdGltZXN0YW1w", "keyType": "AVMString", "valueType": "AVMUint64"}, "price_confidence": {"key": "cHJpY2VfY29uZmlkZW5jZQ==", "keyType": "AVMString", "valueType": "AVMUint64"}, "price_updater": {"key": "cHJpY2VfdXBkYXRlcg==", "keyType": "AVMString", "valueType": "AVMBytes"}, "threshold_price": {"key": "dGhyZXNob2xkX3ByaWNl", "keyType": "AVMString", "valueType": "AVMUint64"}, "threshold_active": {"key": "dGhyZXNob2xkX2FjdGl2ZQ==", "keyType": "AVMString", "valueType": "AVMUint64"}, "threshold_setter": {"key": "dGhyZXNob2xkX3NldHRlcg==", "keyType": "AVMString", "valueType": "AVMBytes"}}, "local": {"is_updater": {"key": "aXNfdXBkYXRlcg==", "keyType": "AVMString", "valueType": "AVMUint64"}}}, "maps": {"box": {}, "global": {}, "local": {}}, "schema": {"global": {"bytes": 3, "ints": 11}, "local": {"bytes": 0, "ints": 1}}}, "structs": {}, "byteCode": {"approval": "CiADAAGQTiYSBBUffHUFYWRtaW4LdG9rZW5fcHJpY2UPcHJpY2VfdGltZXN0YW1wD3RocmVzaG9sZF9wcmljZRB0aHJlc2hvbGRfYWN0aXZlD2NpcmN1aXRfYnJlYWtlcglpc19wYXVzZWQNdXBkYXRlcl9jb3VudBNzdGFsZW5lc3NfdGhyZXNob2xkEHByaWNlX2NvbmZpZGVuY2UKaXNfdXBkYXRlchNtYXhfcHJpY2VfZGV2aWF0aW9uE21pbl91cGRhdGVfaW50ZXJ2YWwZQ2lyY3VpdCBicmVha2VyIGFjdGl2YXRlZBVDaXJjdWl0IGJyZWFrZXIgcmVzZXQNT3JhY2xlIHBhdXNlZA9PcmFjbGUgdW5wYXVzZWQxGEAAEicMgegHZycNgawCZycJgZAcZzEbQQHWghAEiXrRpwTdmdWaBBLBEm8EfcZIPARdOHjQBBRP5PkEanbe8gT6jP8tBP2cU+AERaBbMAR6RR6qBG/kD+EEjaxV0wR0tlh2BCU3aVAETPNkWjYaAI4QAUcBKQEJAO0A3ADMALsAqgCaAIIAagBSADoAKgASAAIiQzEZFEQxGESIBS0oTFCwI0MxGRREMRhEiATYSRUWVwYCTFAoTFCwI0MxGRREMRhEiASoKExQsCNDMRkURDEYRIgEhkkVFlcGAkxQKExQsCNDMRkURDEYRIgEXEkVFlcGAkxQKExQsCNDMRkURDEYRIgEMkkVFlcGAkxQKExQsCNDMRkURDEYRIgECEkVFlcGAkxQKExQsCNDMRkURDEYRIgD4ihMULAjQzEZFEQxGESIA4sWKExQsCNDMRkURDEYRIgDVRYoTFCwI0MxGRREMRhEiAMuKExQsCNDMRkURDEYRIgDBhYoTFCwI0MxGRREMRhENhoBF4gCdUkVFlcGAkxQKExQsCNDMRkURDEYRDYaARc2GgIXiAESSRUWVwYCTFAoTFCwI0MxGRREMRhENhoBVwIAiAClSRUWVwYCTFAoTFCwI0MxGRREMRhEiAAZSRUWVwYCTFAoTFCwI0MxGUD+nDEYFEQjQzEAMgkSRCkxAGcnBiJnJwciZycIImcqImcrImcnCiJnJwQiZycFImcxACcLI2YnCCNngBdQcmljZU9yYWNsZSBpbml0aWFsaXplZLCAJVByaWNlIG9yYWNsZSBpbml0aWFsaXplZCBzdWNjZXNzZnVsbHmJigEBMQAiKWVEEkQiJwhlRCMIJwhMZ4ATUHJpY2UgdXBkYXRlciBhZGRlZLCAIFByaWNlIHVwZGF0ZXIgYWRkZWQgc3VjY2Vzc2Z1bGx5iYoCAYAARwIiJwdlRBREIicGZUQURIv+RIv/JA5EMQAiKWVEEkAADDEAIicLY0QjEkEBDCNEIiplTElOAowARCIrZUyMAURBABkyByInDWVEiwEID0SLAEAAwSIiJwxlRA5EKov+ZysyB2cnCov/Z4ANcHJpY2VfdXBkYXRlcjEAZyInBWVEIxJBAEciJwRlTElOAowCRIv+DkEANov+FoAbVGhyZXNob2xkIHJlYWNoZWQgLSBQcmljZTogTFCADCBUaHJlc2hvbGQ6IFCLAhZQsIsAFoAVUHJpY2UgdXBkYXRlZCAtIE9sZDogTFCABiBOZXc6IFCL/hZQsIAaUHJpY2UgdXBkYXRlZCBzdWNjZXNzZnVsbHmMAImLAIv+DUEADYsASYv+CSQLTApC/yuL/osASU4CCSQLTApC/xwiQv7xigEBi/9EMQAiKWVEEkAADDEAIicLY0QjEkEAXCNEJwSL/2cnBSNngBB0aHJlc2hvbGRfc2V0dGVyMQBni/8WgBdUaHJlc2hvbGQgc2V0IC0gVmFsdWU6IExQsIAaVGhyZXNob2xkIHNldCBzdWNjZXNzZnVsbHmJIkL/oSIqZUQiK2VESwFEMgciJwllRE8CCA5EiSIqZUQWIitlRBYiJwplRBZOAlBMUImKAAEiK2VMSU8CREAAAyNMiTIHIicJZUSLAAgNQQADI0yJIkyJigABgABJIicFZURAAAQijACJIiplTElOAowARCInBGVMjAFEQAAEIowAiYj/rSMSQQAEIowAiYsAiwEPQQAEI4wAiSKMAIkiJwRlRBYiJwVlRBZQiTEAIillRBJEJwYjZycOsCcOiTEAIillRBJEJwYiZycPsCcPiTEAIillRBJEJwcjZycQsCcQiTEAIillRBJEJwciZycRsCcRiSInB2VEFiInBmVEFiInCGVEFk4CUExQiTEAIillRBJEJwUiZycEImeAEVRocmVzaG9sZCByZW1vdmVksIAeVGhyZXNob2xkIHJlbW92ZWQgc3VjY2Vzc2Z1bGx5iSIqZUQWSUsBUExQiQ==", "clear": "CoEBQw=="}, "desc": "Price oracle for reliable price feeds", "events": [], "networks": {}, "source": {"approval": "", "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"}, "sourceInfo": {"approval": {"pcOffsetMethod": "none", "sourceInfo": [{"pc": [1011], "errorMessage": "Circuit breaker active"}, {"pc": [1019], "errorMessage": "Confidence cannot exceed 100%"}, {"pc": [1448], "errorMessage": "No price available"}, {"pc": [1343], "errorMessage": "Not authorized to set threshold"}, {"pc": [1043], "errorMessage": "Not authorized to update price"}, {"pc": [439, 455, 479, 495, 519, 543, 567, 591, 607, 624, 641, 657, 674, 702, 734, 764], "errorMessage": "OnCompletion is not NoOp"}, {"pc": [1613], "errorMessage": "Only admin can activate circuit breaker"}, {"pc": [922], "errorMessage": "Only admin can add updaters"}, {"pc": [1649], "errorMessage": "Only admin can pause"}, {"pc": [1709], "errorMessage": "Only admin can remove threshold"}, {"pc": [1631], "errorMessage": "Only admin can reset circuit breaker"}, {"pc": [1667], "errorMessage": "Only admin can unpause"}, {"pc": [801], "errorMessage": "Only creator can initialize"}, {"pc": [1004], "errorMessage": "Oracle is paused"}, {"pc": [1088], "errorMessage": "Price deviation too large"}, {"pc": [1460], "errorMessage": "Price is stale"}, {"pc": [1014], "errorMessage": "Price must be positive"}, {"pc": [1319], "errorMessage": "Threshold must be positive"}, {"pc": [1075], "errorMessage": "Update too frequent"}, {"pc": [793], "errorMessage": "can only call when creating"}, {"pc": [442, 458, 482, 498, 522, 546, 570, 594, 610, 627, 644, 660, 677, 705, 737, 767], "errorMessage": "can only call when not creating"}, {"pc": [920, 1025, 1325, 1611, 1629, 1647, 1665, 1707], "errorMessage": "check self.admin exists"}, {"pc": [1009, 1688], "errorMessage": "check self.circuit_breaker_active exists"}, {"pc": [1002, 1682], "errorMessage": "check self.is_paused exists"}, {"pc": [1036, 1336], "errorMessage": "check self.is_updater exists for account"}, {"pc": [1086], "errorMessage": "check self.max_price_deviation exists"}, {"pc": [1070], "errorMessage": "check self.min_update_interval exists"}, {"pc": [1476], "errorMessage": "check self.price_confidence exists"}, {"pc": [1060, 1445, 1470, 1494], "errorMessage": "check self.price_timestamp exists"}, {"pc": [1455, 1507], "errorMessage": "check self.staleness_threshold exists"}, {"pc": [1124, 1531, 1602], "errorMessage": "check self.threshold_active exists"}, {"pc": [1140, 1556, 1596], "errorMessage": "check self.threshold_price exists"}, {"pc": [1053, 1441, 1465, 1548, 1774], "errorMessage": "check self.token_price exists"}, {"pc": [927, 1694], "errorMessage": "check self.updater_count exists"}]}, "clear": {"pcOffsetMethod": "none", "sourceInfo": []}}, "templateVariables": {}}"""
APP_SPEC = algokit_utils.Arc56Contract.from_json(_APP_SPEC_JSON)

def _parse_abi_args(args: object | None = None) -> list[object] | None:
    """Helper to parse ABI args into the format expected by underlying client"""
    if args is None:
        return None

    def convert_dataclass(value: object) -> object:
        if dataclasses.is_dataclass(value):
            return tuple(convert_dataclass(getattr(value, field.name)) for field in dataclasses.fields(value))
        elif isinstance(value, (list, tuple)):
            return type(value)(convert_dataclass(item) for item in value)
        return value

    match args:
        case tuple():
            method_args = list(args)
        case _ if dataclasses.is_dataclass(args):
            method_args = [getattr(args, field.name) for field in dataclasses.fields(args)]
        case _:
            raise ValueError("Invalid 'args' type. Expected 'tuple' or 'TypedDict' for respective typed arguments.")

    return [
        convert_dataclass(arg) if not isinstance(arg, algokit_utils.AppMethodCallTransactionArgument) else arg
        for arg in method_args
    ] if method_args else None

def _init_dataclass(cls: type, data: dict) -> object:
    """
    Recursively instantiate a dataclass of type `cls` from `data`.

    For each field on the dataclass, if the field type is also a dataclass
    and the corresponding data is a dict, instantiate that field recursively.
    """
    field_values = {}
    for field in dataclasses.fields(cls):
        field_value = data.get(field.name)
        # Check if the field expects another dataclass and the value is a dict.
        if dataclasses.is_dataclass(field.type) and isinstance(field_value, dict):
            field_values[field.name] = _init_dataclass(typing.cast(type, field.type), field_value)
        else:
            field_values[field.name] = field_value
    return cls(**field_values)

@dataclasses.dataclass(frozen=True, kw_only=True)
class AddPriceUpdaterArgs:
    """Dataclass for add_price_updater arguments"""
    updater: bytes | str

    @property
    def abi_method_signature(self) -> str:
        return "add_price_updater(byte[])string"

@dataclasses.dataclass(frozen=True, kw_only=True)
class UpdatePriceArgs:
    """Dataclass for update_price arguments"""
    new_price: int
    confidence: int

    @property
    def abi_method_signature(self) -> str:
        return "update_price(uint64,uint64)string"

@dataclasses.dataclass(frozen=True, kw_only=True)
class SetThresholdArgs:
    """Dataclass for set_threshold arguments"""
    threshold: int

    @property
    def abi_method_signature(self) -> str:
        return "set_threshold(uint64)string"


class PriceOracleParams:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    def initialize(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "initialize()string",
        }))

    def add_price_updater(
        self,
        args: tuple[bytes | str] | AddPriceUpdaterArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "add_price_updater(byte[])string",
            "args": method_args,
        }))

    def update_price(
        self,
        args: tuple[int, int] | UpdatePriceArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "update_price(uint64,uint64)string",
            "args": method_args,
        }))

    def set_threshold(
        self,
        args: tuple[int] | SetThresholdArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "set_threshold(uint64)string",
            "args": method_args,
        }))

    def get_price(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_price()uint64",
        }))

    def get_price_info(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_price_info()(uint64,uint64,uint64)",
        }))

    def is_price_stale(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "is_price_stale()uint64",
        }))

    def threshold_reached(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "threshold_reached()uint64",
        }))

    def get_threshold_info(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_threshold_info()(uint64,uint64)",
        }))

    def activate_circuit_breaker(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "activate_circuit_breaker()string",
        }))

    def reset_circuit_breaker(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "reset_circuit_breaker()string",
        }))

    def pause_oracle(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "pause_oracle()string",
        }))

    def unpause_oracle(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "unpause_oracle()string",
        }))

    def get_oracle_status(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_oracle_status()(uint64,uint64,uint64)",
        }))

    def remove_threshold(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "remove_threshold()string",
        }))

    def get_price_history_summary(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_price_history_summary()(uint64,uint64,uint64)",
        }))

    def clear_state(
        self,
        params: algokit_utils.AppClientBareCallParams | None = None,
        
    ) -> algokit_utils.AppCallParams:
        return self.app_client.params.bare.clear_state(
            params,
            
        )


class PriceOracleCreateTransactionParams:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    def initialize(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "initialize()string",
        }))

    def add_price_updater(
        self,
        args: tuple[bytes | str] | AddPriceUpdaterArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "add_price_updater(byte[])string",
            "args": method_args,
        }))

    def update_price(
        self,
        args: tuple[int, int] | UpdatePriceArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "update_price(uint64,uint64)string",
            "args": method_args,
        }))

    def set_threshold(
        self,
        args: tuple[int] | SetThresholdArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "set_threshold(uint64)string",
            "args": method_args,
        }))

    def get_price(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_price()uint64",
        }))

    def get_price_info(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_price_info()(uint64,uint64,uint64)",
        }))

    def is_price_stale(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "is_price_stale()uint64",
        }))

    def threshold_reached(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "threshold_reached()uint64",
        }))

    def get_threshold_info(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_threshold_info()(uint64,uint64)",
        }))

    def activate_circuit_breaker(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "activate_circuit_breaker()string",
        }))

    def reset_circuit_breaker(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "reset_circuit_breaker()string",
        }))

    def pause_oracle(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "pause_oracle()string",
        }))

    def unpause_oracle(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "unpause_oracle()string",
        }))

    def get_oracle_status(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_oracle_status()(uint64,uint64,uint64)",
        }))

    def remove_threshold(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "remove_threshold()string",
        }))

    def get_price_history_summary(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_price_history_summary()(uint64,uint64,uint64)",
        }))

    def clear_state(
        self,
        params: algokit_utils.AppClientBareCallParams | None = None,
        
    ) -> Transaction:
        return self.app_client.create_transaction.bare.clear_state(
            params,
            
        )


class PriceOracleSend:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    def initialize(
        self,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[str]:
    
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "initialize()string",
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[str], parsed_response)

    def add_price_updater(
        self,
        args: tuple[bytes | str] | AddPriceUpdaterArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[str]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "add_price_updater(byte[])string",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[str], parsed_response)

    def update_price(
        self,
        args: tuple[int, int] | UpdatePriceArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[str]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "update_price(uint64,uint64)string",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[str], parsed_response)

    def set_threshold(
        self,
        args: tuple[int] | SetThresholdArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[str]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "set_threshold(uint64)string",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[str], parsed_response)

    def get_price(
        self,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[int]:
    
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_price()uint64",
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[int], parsed_response)

    def get_price_info(
        self,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[tuple[int, int, int]]:
    
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_price_info()(uint64,uint64,uint64)",
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[tuple[int, int, int]], parsed_response)

    def is_price_stale(
        self,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[int]:
    
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "is_price_stale()uint64",
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[int], parsed_response)

    def threshold_reached(
        self,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[int]:
    
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "threshold_reached()uint64",
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[int], parsed_response)

    def get_threshold_info(
        self,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[tuple[int, int]]:
    
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_threshold_info()(uint64,uint64)",
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[tuple[int, int]], parsed_response)

    def activate_circuit_breaker(
        self,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[str]:
    
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "activate_circuit_breaker()string",
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[str], parsed_response)

    def reset_circuit_breaker(
        self,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[str]:
    
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "reset_circuit_breaker()string",
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[str], parsed_response)

    def pause_oracle(
        self,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[str]:
    
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "pause_oracle()string",
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[str], parsed_response)

    def unpause_oracle(
        self,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[str]:
    
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "unpause_oracle()string",
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[str], parsed_response)

    def get_oracle_status(
        self,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[tuple[int, int, int]]:
    
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_oracle_status()(uint64,uint64,uint64)",
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[tuple[int, int, int]], parsed_response)

    def remove_threshold(
        self,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[str]:
    
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "remove_threshold()string",
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[str], parsed_response)

    def get_price_history_summary(
        self,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[tuple[int, int, int]]:
    
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_price_history_summary()(uint64,uint64,uint64)",
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[tuple[int, int, int]], parsed_response)

    def clear_state(
        self,
        params: algokit_utils.AppClientBareCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[algokit_utils.ABIReturn]:
        return self.app_client.send.bare.clear_state(
            params,
            send_params=send_params,
        )


class GlobalStateValue(typing.TypedDict):
    """Shape of global_state state key values"""
    admin: bytes
    circuit_breaker_active: int
    is_paused: int
    updater_count: int
    max_price_deviation: int
    min_update_interval: int
    staleness_threshold: int
    token_price: int
    price_timestamp: int
    price_confidence: int
    price_updater: bytes
    threshold_price: int
    threshold_active: int
    threshold_setter: bytes

class LocalStateValue(typing.TypedDict):
    """Shape of local_state state key values"""
    is_updater: int

class PriceOracleState:
    """Methods to access state for the current PriceOracle app"""

    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    @property
    def global_state(
        self
    ) -> "_GlobalState":
            """Methods to access global_state for the current app"""
            return _GlobalState(self.app_client)

    def local_state(
        self, address: str
    ) -> "_LocalState":
            """Methods to access local_state for the current app"""
            return _LocalState(self.app_client, address)

class _GlobalState:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client
        
        # Pre-generated mapping of value types to their struct classes
        self._struct_classes: dict[str, typing.Type[typing.Any]] = {}

    def get_all(self) -> GlobalStateValue:
        """Get all current keyed values from global_state state"""
        result = self.app_client.state.global_state.get_all()
        if not result:
            return typing.cast(GlobalStateValue, {})

        converted = {}
        for key, value in result.items():
            key_info = self.app_client.app_spec.state.keys.global_state.get(key)
            struct_class = self._struct_classes.get(key_info.value_type) if key_info else None
            converted[key] = (
                _init_dataclass(struct_class, value) if struct_class and isinstance(value, dict)
                else value
            )
        return typing.cast(GlobalStateValue, converted)

    @property
    def admin(self) -> bytes:
        """Get the current value of the admin key in global_state state"""
        value = self.app_client.state.global_state.get_value("admin")
        if isinstance(value, dict) and "AVMBytes" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMBytes"], value)  # type: ignore
        return typing.cast(bytes, value)

    @property
    def circuit_breaker_active(self) -> int:
        """Get the current value of the circuit_breaker_active key in global_state state"""
        value = self.app_client.state.global_state.get_value("circuit_breaker_active")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def is_paused(self) -> int:
        """Get the current value of the is_paused key in global_state state"""
        value = self.app_client.state.global_state.get_value("is_paused")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def updater_count(self) -> int:
        """Get the current value of the updater_count key in global_state state"""
        value = self.app_client.state.global_state.get_value("updater_count")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def max_price_deviation(self) -> int:
        """Get the current value of the max_price_deviation key in global_state state"""
        value = self.app_client.state.global_state.get_value("max_price_deviation")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def min_update_interval(self) -> int:
        """Get the current value of the min_update_interval key in global_state state"""
        value = self.app_client.state.global_state.get_value("min_update_interval")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def staleness_threshold(self) -> int:
        """Get the current value of the staleness_threshold key in global_state state"""
        value = self.app_client.state.global_state.get_value("staleness_threshold")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def token_price(self) -> int:
        """Get the current value of the token_price key in global_state state"""
        value = self.app_client.state.global_state.get_value("token_price")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def price_timestamp(self) -> int:
        """Get the current value of the price_timestamp key in global_state state"""
        value = self.app_client.state.global_state.get_value("price_timestamp")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def price_confidence(self) -> int:
        """Get the current value of the price_confidence key in global_state state"""
        value = self.app_client.state.global_state.get_value("price_confidence")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def price_updater(self) -> bytes:
        """Get the current value of the price_updater key in global_state state"""
        value = self.app_client.state.global_state.get_value("price_updater")
        if isinstance(value, dict) and "AVMBytes" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMBytes"], value)  # type: ignore
        return typing.cast(bytes, value)

    @property
    def threshold_price(self) -> int:
        """Get the current value of the threshold_price key in global_state state"""
        value = self.app_client.state.global_state.get_value("threshold_price")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def threshold_active(self) -> int:
        """Get the current value of the threshold_active key in global_state state"""
        value = self.app_client.state.global_state.get_value("threshold_active")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def threshold_setter(self) -> bytes:
        """Get the current value of the threshold_setter key in global_state state"""
        value = self.app_client.state.global_state.get_value("threshold_setter")
        if isinstance(value, dict) and "AVMBytes" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMBytes"], value)  # type: ignore
        return typing.cast(bytes, value)

class _LocalState:
    def __init__(self, app_client: algokit_utils.AppClient, address: str):
        self.app_client = app_client
        self.address = address
        # Pre-generated mapping of value types to their struct classes
        self._struct_classes: dict[str, typing.Type[typing.Any]] = {}

    def get_all(self) -> LocalStateValue:
        """Get all current keyed values from local_state state"""
        result = self.app_client.state.local_state(self.address).get_all()
        if not result:
            return typing.cast(LocalStateValue, {})

        converted = {}
        for key, value in result.items():
            key_info = self.app_client.app_spec.state.keys.local_state.get(key)
            struct_class = self._struct_classes.get(key_info.value_type) if key_info else None
            converted[key] = (
                _init_dataclass(struct_class, value) if struct_class and isinstance(value, dict)
                else value
            )
        return typing.cast(LocalStateValue, converted)

    @property
    def is_updater(self) -> int:
        """Get the current value of the is_updater key in local_state state"""
        value = self.app_client.state.local_state(self.address).get_value("is_updater")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

class PriceOracleClient:
    """Client for interacting with PriceOracle smart contract"""

    @typing.overload
    def __init__(self, app_client: algokit_utils.AppClient) -> None: ...
    
    @typing.overload
    def __init__(
        self,
        *,
        algorand: _AlgoKitAlgorandClient,
        app_id: int,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> None: ...

    def __init__(
        self,
        app_client: algokit_utils.AppClient | None = None,
        *,
        algorand: _AlgoKitAlgorandClient | None = None,
        app_id: int | None = None,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> None:
        if app_client:
            self.app_client = app_client
        elif algorand and app_id:
            self.app_client = algokit_utils.AppClient(
                algokit_utils.AppClientParams(
                    algorand=algorand,
                    app_spec=APP_SPEC,
                    app_id=app_id,
                    app_name=app_name,
                    default_sender=default_sender,
                    default_signer=default_signer,
                    approval_source_map=approval_source_map,
                    clear_source_map=clear_source_map,
                )
            )
        else:
            raise ValueError("Either app_client or algorand and app_id must be provided")
    
        self.params = PriceOracleParams(self.app_client)
        self.create_transaction = PriceOracleCreateTransactionParams(self.app_client)
        self.send = PriceOracleSend(self.app_client)
        self.state = PriceOracleState(self.app_client)

    @staticmethod
    def from_creator_and_name(
        creator_address: str,
        app_name: str,
        algorand: _AlgoKitAlgorandClient,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
        ignore_cache: bool | None = None,
        app_lookup_cache: algokit_utils.ApplicationLookup | None = None,
    ) -> "PriceOracleClient":
        return PriceOracleClient(
            algokit_utils.AppClient.from_creator_and_name(
                creator_address=creator_address,
                app_name=app_name,
                app_spec=APP_SPEC,
                algorand=algorand,
                default_sender=default_sender,
                default_signer=default_signer,
                approval_source_map=approval_source_map,
                clear_source_map=clear_source_map,
                ignore_cache=ignore_cache,
                app_lookup_cache=app_lookup_cache,
            )
        )
    
    @staticmethod
    def from_network(
        algorand: _AlgoKitAlgorandClient,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> "PriceOracleClient":
        return PriceOracleClient(
            algokit_utils.AppClient.from_network(
                app_spec=APP_SPEC,
                algorand=algorand,
                app_name=app_name,
                default_sender=default_sender,
                default_signer=default_signer,
                approval_source_map=approval_source_map,
                clear_source_map=clear_source_map,
            )
        )

    @property
    def app_id(self) -> int:
        return self.app_client.app_id
    
    @property
    def app_address(self) -> str:
        return self.app_client.app_address
    
    @property
    def app_name(self) -> str:
        return self.app_client.app_name
    
    @property
    def app_spec(self) -> algokit_utils.Arc56Contract:
        return self.app_client.app_spec
    
    @property
    def algorand(self) -> _AlgoKitAlgorandClient:
        return self.app_client.algorand

    def clone(
        self,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> "PriceOracleClient":
        return PriceOracleClient(
            self.app_client.clone(
                app_name=app_name,
                default_sender=default_sender,
                default_signer=default_signer,
                approval_source_map=approval_source_map,
                clear_source_map=clear_source_map,
            )
        )

    def new_group(self) -> "PriceOracleComposer":
        return PriceOracleComposer(self)

    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["initialize()string"],
        return_value: algokit_utils.ABIReturn | None
    ) -> str | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["add_price_updater(byte[])string"],
        return_value: algokit_utils.ABIReturn | None
    ) -> str | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["update_price(uint64,uint64)string"],
        return_value: algokit_utils.ABIReturn | None
    ) -> str | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["set_threshold(uint64)string"],
        return_value: algokit_utils.ABIReturn | None
    ) -> str | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["get_price()uint64"],
        return_value: algokit_utils.ABIReturn | None
    ) -> int | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["get_price_info()(uint64,uint64,uint64)"],
        return_value: algokit_utils.ABIReturn | None
    ) -> tuple[int, int, int] | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["is_price_stale()uint64"],
        return_value: algokit_utils.ABIReturn | None
    ) -> int | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["threshold_reached()uint64"],
        return_value: algokit_utils.ABIReturn | None
    ) -> int | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["get_threshold_info()(uint64,uint64)"],
        return_value: algokit_utils.ABIReturn | None
    ) -> tuple[int, int] | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["activate_circuit_breaker()string"],
        return_value: algokit_utils.ABIReturn | None
    ) -> str | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["reset_circuit_breaker()string"],
        return_value: algokit_utils.ABIReturn | None
    ) -> str | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["pause_oracle()string"],
        return_value: algokit_utils.ABIReturn | None
    ) -> str | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["unpause_oracle()string"],
        return_value: algokit_utils.ABIReturn | None
    ) -> str | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["get_oracle_status()(uint64,uint64,uint64)"],
        return_value: algokit_utils.ABIReturn | None
    ) -> tuple[int, int, int] | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["remove_threshold()string"],
        return_value: algokit_utils.ABIReturn | None
    ) -> str | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["get_price_history_summary()(uint64,uint64,uint64)"],
        return_value: algokit_utils.ABIReturn | None
    ) -> tuple[int, int, int] | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: str,
        return_value: algokit_utils.ABIReturn | None
    ) -> algokit_utils.ABIValue | algokit_utils.ABIStruct | None: ...

    def decode_return_value(
        self,
        method: str,
        return_value: algokit_utils.ABIReturn | None
    ) -> algokit_utils.ABIValue | algokit_utils.ABIStruct | None | int | str | tuple[int, int, int] | tuple[int, int]:
        """Decode ABI return value for the given method."""
        if return_value is None:
            return None
    
        arc56_method = self.app_spec.get_arc56_method(method)
        decoded = return_value.get_arc56_value(arc56_method, self.app_spec.structs)
    
        # If method returns a struct, convert the dict to appropriate dataclass
        if (arc56_method and
            arc56_method.returns and
            arc56_method.returns.struct and
            isinstance(decoded, dict)):
            struct_class = globals().get(arc56_method.returns.struct)
            if struct_class:
                return struct_class(**typing.cast(dict, decoded))
        return decoded


@dataclasses.dataclass(frozen=True)
class PriceOracleBareCallCreateParams(algokit_utils.AppClientBareCallCreateParams):
    """Parameters for creating PriceOracle contract with bare calls"""
    on_complete: typing.Literal[OnComplete.NoOpOC] | None = None

    def to_algokit_utils_params(self) -> algokit_utils.AppClientBareCallCreateParams:
        return algokit_utils.AppClientBareCallCreateParams(**self.__dict__)

class PriceOracleFactory(algokit_utils.TypedAppFactoryProtocol[PriceOracleBareCallCreateParams, None, None]):
    """Factory for deploying and managing PriceOracleClient smart contracts"""

    def __init__(
        self,
        algorand: _AlgoKitAlgorandClient,
        *,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        version: str | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None,
    ):
        self.app_factory = algokit_utils.AppFactory(
            params=algokit_utils.AppFactoryParams(
                algorand=algorand,
                app_spec=APP_SPEC,
                app_name=app_name,
                default_sender=default_sender,
                default_signer=default_signer,
                version=version,
                compilation_params=compilation_params,
            )
        )
        self.params = PriceOracleFactoryParams(self.app_factory)
        self.create_transaction = PriceOracleFactoryCreateTransaction(self.app_factory)
        self.send = PriceOracleFactorySend(self.app_factory)

    @property
    def app_name(self) -> str:
        return self.app_factory.app_name
    
    @property
    def app_spec(self) -> algokit_utils.Arc56Contract:
        return self.app_factory.app_spec
    
    @property
    def algorand(self) -> _AlgoKitAlgorandClient:
        return self.app_factory.algorand

    def deploy(
        self,
        *,
        on_update: algokit_utils.OnUpdate | None = None,
        on_schema_break: algokit_utils.OnSchemaBreak | None = None,
        create_params: PriceOracleBareCallCreateParams | None = None,
        update_params: None = None,
        delete_params: None = None,
        existing_deployments: algokit_utils.ApplicationLookup | None = None,
        ignore_cache: bool = False,
        app_name: str | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None,
        send_params: algokit_utils.SendParams | None = None,
    ) -> tuple[PriceOracleClient, algokit_utils.AppFactoryDeployResult]:
        """Deploy the application"""
        deploy_response = self.app_factory.deploy(
            on_update=on_update,
            on_schema_break=on_schema_break,
            create_params=create_params.to_algokit_utils_params() if create_params else None,
            update_params=update_params,
            delete_params=delete_params,
            existing_deployments=existing_deployments,
            ignore_cache=ignore_cache,
            app_name=app_name,
            compilation_params=compilation_params,
            send_params=send_params,
        )

        return PriceOracleClient(deploy_response[0]), deploy_response[1]

    def get_app_client_by_creator_and_name(
        self,
        creator_address: str,
        app_name: str,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        ignore_cache: bool | None = None,
        app_lookup_cache: algokit_utils.ApplicationLookup | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> PriceOracleClient:
        """Get an app client by creator address and name"""
        return PriceOracleClient(
            self.app_factory.get_app_client_by_creator_and_name(
                creator_address,
                app_name,
                default_sender,
                default_signer,
                ignore_cache,
                app_lookup_cache,
                approval_source_map,
                clear_source_map,
            )
        )

    def get_app_client_by_id(
        self,
        app_id: int,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> PriceOracleClient:
        """Get an app client by app ID"""
        return PriceOracleClient(
            self.app_factory.get_app_client_by_id(
                app_id,
                app_name,
                default_sender,
                default_signer,
                approval_source_map,
                clear_source_map,
            )
        )


class PriceOracleFactoryParams:
    """Parameters for creating transactions for PriceOracle contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory
        self.create = PriceOracleFactoryCreateParams(app_factory)
        self.update = PriceOracleFactoryUpdateParams(app_factory)
        self.delete = PriceOracleFactoryDeleteParams(app_factory)

class PriceOracleFactoryCreateParams:
    """Parameters for 'create' operations of PriceOracle contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateParams:
        """Creates an instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.bare.create(
            algokit_utils.AppFactoryCreateParams(**dataclasses.asdict(params)),
            compilation_params=compilation_params)

    def initialize(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the initialize()string ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "initialize()string",
                "args": None,
                }
            ),
            compilation_params=compilation_params
        )

    def add_price_updater(
        self,
        args: tuple[bytes | str] | AddPriceUpdaterArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the add_price_updater(byte[])string ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "add_price_updater(byte[])string",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def update_price(
        self,
        args: tuple[int, int] | UpdatePriceArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the update_price(uint64,uint64)string ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "update_price(uint64,uint64)string",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def set_threshold(
        self,
        args: tuple[int] | SetThresholdArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the set_threshold(uint64)string ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "set_threshold(uint64)string",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def get_price(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the get_price()uint64 ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "get_price()uint64",
                "args": None,
                }
            ),
            compilation_params=compilation_params
        )

    def get_price_info(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the get_price_info()(uint64,uint64,uint64) ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "get_price_info()(uint64,uint64,uint64)",
                "args": None,
                }
            ),
            compilation_params=compilation_params
        )

    def is_price_stale(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the is_price_stale()uint64 ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "is_price_stale()uint64",
                "args": None,
                }
            ),
            compilation_params=compilation_params
        )

    def threshold_reached(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the threshold_reached()uint64 ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "threshold_reached()uint64",
                "args": None,
                }
            ),
            compilation_params=compilation_params
        )

    def get_threshold_info(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the get_threshold_info()(uint64,uint64) ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "get_threshold_info()(uint64,uint64)",
                "args": None,
                }
            ),
            compilation_params=compilation_params
        )

    def activate_circuit_breaker(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the activate_circuit_breaker()string ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "activate_circuit_breaker()string",
                "args": None,
                }
            ),
            compilation_params=compilation_params
        )

    def reset_circuit_breaker(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the reset_circuit_breaker()string ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "reset_circuit_breaker()string",
                "args": None,
                }
            ),
            compilation_params=compilation_params
        )

    def pause_oracle(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the pause_oracle()string ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "pause_oracle()string",
                "args": None,
                }
            ),
            compilation_params=compilation_params
        )

    def unpause_oracle(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the unpause_oracle()string ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "unpause_oracle()string",
                "args": None,
                }
            ),
            compilation_params=compilation_params
        )

    def get_oracle_status(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the get_oracle_status()(uint64,uint64,uint64) ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "get_oracle_status()(uint64,uint64,uint64)",
                "args": None,
                }
            ),
            compilation_params=compilation_params
        )

    def remove_threshold(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the remove_threshold()string ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "remove_threshold()string",
                "args": None,
                }
            ),
            compilation_params=compilation_params
        )

    def get_price_history_summary(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the get_price_history_summary()(uint64,uint64,uint64) ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "get_price_history_summary()(uint64,uint64,uint64)",
                "args": None,
                }
            ),
            compilation_params=compilation_params
        )

class PriceOracleFactoryUpdateParams:
    """Parameters for 'update' operations of PriceOracle contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        
    ) -> algokit_utils.AppUpdateParams:
        """Updates an instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.bare.deploy_update(
            algokit_utils.AppClientBareCallParams(**dataclasses.asdict(params)),
            )

class PriceOracleFactoryDeleteParams:
    """Parameters for 'delete' operations of PriceOracle contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        
    ) -> algokit_utils.AppDeleteParams:
        """Deletes an instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.bare.deploy_delete(
            algokit_utils.AppClientBareCallParams(**dataclasses.asdict(params)),
            )


class PriceOracleFactoryCreateTransaction:
    """Create transactions for PriceOracle contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory
        self.create = PriceOracleFactoryCreateTransactionCreate(app_factory)


class PriceOracleFactoryCreateTransactionCreate:
    """Create new instances of PriceOracle contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
    ) -> Transaction:
        """Creates a new instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.create_transaction.bare.create(
            algokit_utils.AppFactoryCreateParams(**dataclasses.asdict(params)),
        )


class PriceOracleFactorySend:
    """Send calls to PriceOracle contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory
        self.create = PriceOracleFactorySendCreate(app_factory)


class PriceOracleFactorySendCreate:
    """Send create calls to PriceOracle contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        send_params: algokit_utils.SendParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None,
    ) -> tuple[PriceOracleClient, algokit_utils.SendAppCreateTransactionResult]:
        """Creates a new instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        result = self.app_factory.send.bare.create(
            algokit_utils.AppFactoryCreateParams(**dataclasses.asdict(params)),
            send_params=send_params,
            compilation_params=compilation_params
        )
        return PriceOracleClient(result[0]), result[1]


class PriceOracleComposer:
    """Composer for creating transaction groups for PriceOracle contract calls"""

    def __init__(self, client: "PriceOracleClient"):
        self.client = client
        self._composer = client.algorand.new_group()
        self._result_mappers: list[typing.Callable[[algokit_utils.ABIReturn | None], object] | None] = []

    def initialize(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "PriceOracleComposer":
        self._composer.add_app_call_method_call(
            self.client.params.initialize(
                
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "initialize()string", v
            )
        )
        return self

    def add_price_updater(
        self,
        args: tuple[bytes | str] | AddPriceUpdaterArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "PriceOracleComposer":
        self._composer.add_app_call_method_call(
            self.client.params.add_price_updater(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "add_price_updater(byte[])string", v
            )
        )
        return self

    def update_price(
        self,
        args: tuple[int, int] | UpdatePriceArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "PriceOracleComposer":
        self._composer.add_app_call_method_call(
            self.client.params.update_price(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "update_price(uint64,uint64)string", v
            )
        )
        return self

    def set_threshold(
        self,
        args: tuple[int] | SetThresholdArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "PriceOracleComposer":
        self._composer.add_app_call_method_call(
            self.client.params.set_threshold(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "set_threshold(uint64)string", v
            )
        )
        return self

    def get_price(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "PriceOracleComposer":
        self._composer.add_app_call_method_call(
            self.client.params.get_price(
                
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "get_price()uint64", v
            )
        )
        return self

    def get_price_info(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "PriceOracleComposer":
        self._composer.add_app_call_method_call(
            self.client.params.get_price_info(
                
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "get_price_info()(uint64,uint64,uint64)", v
            )
        )
        return self

    def is_price_stale(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "PriceOracleComposer":
        self._composer.add_app_call_method_call(
            self.client.params.is_price_stale(
                
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "is_price_stale()uint64", v
            )
        )
        return self

    def threshold_reached(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "PriceOracleComposer":
        self._composer.add_app_call_method_call(
            self.client.params.threshold_reached(
                
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "threshold_reached()uint64", v
            )
        )
        return self

    def get_threshold_info(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "PriceOracleComposer":
        self._composer.add_app_call_method_call(
            self.client.params.get_threshold_info(
                
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "get_threshold_info()(uint64,uint64)", v
            )
        )
        return self

    def activate_circuit_breaker(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "PriceOracleComposer":
        self._composer.add_app_call_method_call(
            self.client.params.activate_circuit_breaker(
                
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "activate_circuit_breaker()string", v
            )
        )
        return self

    def reset_circuit_breaker(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "PriceOracleComposer":
        self._composer.add_app_call_method_call(
            self.client.params.reset_circuit_breaker(
                
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "reset_circuit_breaker()string", v
            )
        )
        return self

    def pause_oracle(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "PriceOracleComposer":
        self._composer.add_app_call_method_call(
            self.client.params.pause_oracle(
                
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "pause_oracle()string", v
            )
        )
        return self

    def unpause_oracle(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "PriceOracleComposer":
        self._composer.add_app_call_method_call(
            self.client.params.unpause_oracle(
                
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "unpause_oracle()string", v
            )
        )
        return self

    def get_oracle_status(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "PriceOracleComposer":
        self._composer.add_app_call_method_call(
            self.client.params.get_oracle_status(
                
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "get_oracle_status()(uint64,uint64,uint64)", v
            )
        )
        return self

    def remove_threshold(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "PriceOracleComposer":
        self._composer.add_app_call_method_call(
            self.client.params.remove_threshold(
                
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "remove_threshold()string", v
            )
        )
        return self

    def get_price_history_summary(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "PriceOracleComposer":
        self._composer.add_app_call_method_call(
            self.client.params.get_price_history_summary(
                
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "get_price_history_summary()(uint64,uint64,uint64)", v
            )
        )
        return self

    def clear_state(
        self,
        *,
        args: list[bytes] | None = None,
        params: algokit_utils.CommonAppCallParams | None = None,
    ) -> "PriceOracleComposer":
        params=params or algokit_utils.CommonAppCallParams()
        self._composer.add_app_call(
            self.client.params.clear_state(
                algokit_utils.AppClientBareCallParams(
                    **{
                        **dataclasses.asdict(params),
                        "args": args
                    }
                )
            )
        )
        return self
    
    def add_transaction(
        self, txn: Transaction, signer: TransactionSigner | None = None
    ) -> "PriceOracleComposer":
        self._composer.add_transaction(txn, signer)
        return self
    
    def composer(self) -> algokit_utils.TransactionComposer:
        return self._composer
    
    def simulate(
        self,
        allow_more_logs: bool | None = None,
        allow_empty_signatures: bool | None = None,
        allow_unnamed_resources: bool | None = None,
        extra_opcode_budget: int | None = None,
        exec_trace_config: SimulateTraceConfig | None = None,
        simulation_round: int | None = None,
        skip_signatures: bool | None = None,
    ) -> algokit_utils.SendAtomicTransactionComposerResults:
        return self._composer.simulate(
            allow_more_logs=allow_more_logs,
            allow_empty_signatures=allow_empty_signatures,
            allow_unnamed_resources=allow_unnamed_resources,
            extra_opcode_budget=extra_opcode_budget,
            exec_trace_config=exec_trace_config,
            simulation_round=simulation_round,
            skip_signatures=skip_signatures,
        )
    
    def send(
        self,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAtomicTransactionComposerResults:
        return self._composer.send(send_params)
