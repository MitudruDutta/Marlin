{
  "version": 3,
  "sources": [
    "../../simple_amm/contract.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2CQ;;AAAuB;;;AAAvB;AAbR;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAgOK;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AATA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAZA;;AAAA;AAAA;AAAA;;AAAA;AA3ML;;;AAAA;AA2MK;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAjCA;;AAAA;AAAA;AAAA;;AAAA;AA1KL;;;AAAA;AA0KK;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAVA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AATA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAVA;;AAAA;AAAA;AAAA;;AAAA;AA7IL;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AA6IK;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AALA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAvBA;;AAAA;AAAA;AAAA;;AAAA;AAjHL;;;AAAA;AAiHK;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAvBA;;AAAA;AAAA;AAAA;;AAAA;AA1FL;;;AAAA;AA0FK;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAvDA;;AAAA;AAAA;AAAA;;AAAA;AAnCL;;;AAAA;AAAA;;;AAAA;AAmCK;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAfA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AApBL;;AAAA;;;;;;;;;AAuBe;;AAAc;;AAAd;AAAP;AAEA;;AAAmB;;AAAnB;AACA;AAAuB;AAAvB;AACA;AAAuB;AAAvB;AACA;;AAAsB;;AAAtB;AACA;;AAAuB;AAAvB;AACA;AAA6B;AAA7B;AAEI;;;;;;;;;;;;;;;;;;;;;;;AAAJ;AACO;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAP;AAER;;;;;;;AAOe;AAAA;;AAAA;AAAA;AAAA;AAAP;AACO;;AAAA;;;AAAA;;AAAA;;;;AAAP;AAEoB;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAGjB;;;AAAA;;AAAA;;;AACC;AAAA;;AAAA;AACA;AAAA;;AAAA;AAG8B;;AAAA;;AAAA;AAAA;AAAA;;AA2M1C;;;AACmB;AA1MgB;;AAAvB;;AAAA;;AAAA;AACA;AAAA;AAAA;AA2BwD;;AAAvB;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAd;;AAAvB;;AAAA;;AAAA;AAC4D;;AAAvB;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAd;;AAAvB;;AAAA;;AAAA;AAE+B;;AAAA;AAA3B;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAA+C;;AAA/C;AAAyD;;AAAA;AAAzD;AAAJ;AACO;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAP;;AAAA;AA8KK;;AAAA;AAAI;AAAJ;AAAkB;AAAnB;AAAJ;;AAGU;AAAV;;;;AACM;;AAAA;;AAAA;AAAA;;;AAAU;;AAAU;;AAAV;AAAV;;;AAEG;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAe;AAAhB;AACJ;;AAAoB;AAAV;AAAV;;;;;;;;;;;AAvNmB;;;AAOL;;AAAA;;AAAA;AAAA;;AAAA;AAAd;;AAAA;AAAA;;AAAa;AAAb;AAAA;;AAAA;;AACc;;AAAA;AAAd;;AAAa;AAAb;;AAGG;;AAAA;AAAf;;;AAEuC;;AAAA;AAAA;;AAAA;AAAvB;AAAA;AAAA;AACuB;;AAAA;;AAAA;AAAvB;AAAA;AAAA;AAG+B;AAAA;AAAA;AAAA;AAAX;;AAAA;AAApB;AAAmB;AASqC;;AAAvB;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAd;;AAAvB;;AAAA;;AAAA;AAC6B;AAAA;AAAA;AAAA;AAAA;AAA7B;AAAA;AAAA;;;;AAP2B;;AAAA;;AAAA;AAAvB;AAAA;AAAA;AACuB;;AAAA;AAAA;;AAAA;AAAvB;AAAA;AAAA;AAG+B;AAAA;AAAA;AAAA;AAAX;;AAAA;AAApB;AAAmB;;;;;;;;AAYnC;;;AAGe;AAAA;;AAAA;AAAA;AAAA;AAAP;AACA;;AAAA;AAEoB;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAEb;;;AAAA;;AAAA;;;;AAAP;AAGA;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAa;;;AACb;AAAA;AACO;AAAA;;AAAA;AAAP;AAGuB;;AAAA;;AAAA;AAAvB;AAAA;AAAA;AACuB;AAAA;;AAAA;AAAvB;AAAA;AAAA;AAE0B;;AAAA;AAAtB;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAA2C;;AAA3C;AAAuD;AAAA;AAAvD;AAAJ;AACO;;AAAP;;AAAA;;;;;AAER;;;AAGe;AAAA;;AAAA;AAAA;AAAA;AAAP;AACA;;AAAA;AAEoB;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAEb;;;AAAA;;AAAA;;;;AAAP;AAGA;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAa;;;AACb;AAAA;AACO;AAAA;;AAAA;AAAP;AAGuB;;AAAA;;AAAA;AAAvB;AAAA;AAAA;AACuB;AAAA;;AAAA;AAAvB;AAAA;AAAA;AAE0B;;AAAA;AAAtB;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAA2C;;AAA3C;AAAuD;AAAA;AAAvD;AAAJ;AACO;;AAAP;;AAAA;;;;;AAK+B;AAAA;AAAA;AAAA;AAAZ;AAA+C;AAAA;AAAA;AAAA;AAAZ;AAA/C;AAAP;AAER;;;AAQe;;AAAA;;AAAA;;AAAA;;;AAAP;AAMuC;;AAAvB;AAAA;;AAAA;AAAA;AAAZ;AACmC;;AAAvB;AAAA;;AAAA;AAAA;AAAZ;AACmC;;AAAvB;AAAA;;AAAA;AAAA;AAAZ;AAHG;;AAAA;AAAA;AAAA;AAAP;AAUgB;AAAA;AAAA;AAAA;AAAZ;AACY;AAAA;AAAA;AAAA;AAAZ;AACY;AAAA;AAAA;AAAA;AAAZ;AACY;AAAA;;AAAA;AAAA;AAAZ;AAJG;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAP;AAOR;;;AAGe;AAAA;;AAAA;AAAA;AAAA;AAAP;AACA;;AAAA;AAEwC;;AAAvB;AAAA;;AAAA;AAAA;AACV;AAAA;;AAAA;AAAP;AAEoB;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACF;AAAA;AAAA;AAAA;AAGN;;AAAA;;AAAA;AAAZ;;AAAW;AAAX;AAAA;;AAAA;;AACY;;AAAA;;AAAA;AAAZ;;AAAW;AAAX;AAAA;;AAGuB;;AAAA;;AAAA;AAAvB;AAAA;AAAA;AACuB;;AAAA;AAAA;AAAvB;AAAA;AAAA;AACqC;;AAAA;;AAAA;AAAd;;AAAvB;;AAAA;;AAAA;AAC6B;;AAAA;AAA7B;AAAA;AAAA;AAG0B;;AAAvB;AAAA;;AAAA;AAAA;AAAA;AAAX;;;AACwE;;AAAvB;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAd;;AAAvB;;AAAA;;AAAA;AAEsB;;AAAvB;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAX;;;AACwE;;AAAvB;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAd;;AAAvB;;AAAA;;AAAA;AAE6B;;AAAA;AAA7B;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAiD;;AAAjD;AAA2D;;AAAA;AAA3D;AAAJ;AACO;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAP;;AAAA;AAER;;;AAGe;;AAAoB;AAAA;;AAAA;AAAA;AAApB;AAAP;AACiB;AAAA;;AAAA;AAAA;AAAV;;AAAA;AAAP;AAEU;AAAA;;AAAA;AAAA;AACV;;AAAA;;AAAA;AAE6B;AAAzB;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAA4C;;;;;;;;AAA5C;AAAwD;;AAAA;AAAxD;AAAJ;AACO;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAP;AAKO;;AAAoB;AAAA;;AAAA;AAAA;AAApB;AAAP;AACA;;AAAuB;AAAvB;AAEI;;AAAJ;AACO;;AAAP;AAKO;;AAAoB;AAAA;;AAAA;AAAA;AAApB;AAAP;AACA;;AAAuB;AAAvB;AAEI;;AAAJ;AACO;;AAAP;AAER;;;AAQQ;;AAAA;AACO;;AAAA;;;AAAA;;AAAA;;;;AAAP;AAGkC;AAAA;;AAAA;AAAA;AAAuB;AAAA;;AAAA;AAAA;AAAvB;;AAAA;AAAA;AAAlC;;AAAqB;AAIrB;AAAA;;AAAY;AACE;;AAAA;;AAAA;AAAd;;AAAc;AAEP;AAAP;;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "smart_contracts.simple_amm.contract.SimpleAMM.__algopy_entrypoint_with_init",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1 2"
    },
    "6": {
      "op": "bytecblock \"reserve_a\" \"reserve_b\" 0x151f7c75 \"total_liquidity\" \"is_paused\" \"liquidity_balance\" \"token_a_deposited\" \"token_b_deposited\" \"fee_rate\" \"admin\" \"fee_denominator\" 0x20423a20 0x204f75743a20 \"Swap completed successfully\" 0x414d4d20706175736564 0x414d4d20756e706175736564"
    },
    "208": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "210": {
      "op": "bnz main_after_if_else@2",
      "stack_out": []
    },
    "213": {
      "op": "bytec 10 // \"fee_denominator\"",
      "defined_out": [
        "\"fee_denominator\""
      ],
      "stack_out": [
        "\"fee_denominator\""
      ]
    },
    "215": {
      "op": "pushint 1000 // 1000",
      "defined_out": [
        "\"fee_denominator\"",
        "1000"
      ],
      "stack_out": [
        "\"fee_denominator\"",
        "1000"
      ]
    },
    "218": {
      "op": "app_global_put",
      "stack_out": []
    },
    "219": {
      "block": "main_after_if_else@2",
      "stack_in": [],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#2"
      ],
      "stack_out": [
        "tmp%0#2"
      ]
    },
    "221": {
      "op": "bz main_bare_routing@17",
      "stack_out": []
    },
    "224": {
      "op": "pushbytess 0x897ad1a7 0x68d5e54f 0x6c5e6bcb 0xc5530c9a 0xb5a43eeb 0xb99ac0aa 0xfbe59977 0x4bf55db6 0xb916083a 0x91f12543 0xb8a7f680 0x38609c9b // method \"initialize()string\", method \"add_liquidity(uint64,uint64)string\", method \"swap_a_for_b(uint64)string\", method \"swap_b_for_a(uint64)string\", method \"get_reserves()(uint64,uint64)\", method \"get_amount_out(uint64,uint64,uint64)uint64\", method \"get_user_liquidity()(uint64,uint64,uint64)\", method \"get_pool_info()(uint64,uint64,uint64,uint64)\", method \"remove_liquidity(uint64)string\", method \"set_fee_rate(uint64)string\", method \"pause_amm()string\", method \"unpause_amm()string\"",
      "defined_out": [
        "Method(add_liquidity(uint64,uint64)string)",
        "Method(get_amount_out(uint64,uint64,uint64)uint64)",
        "Method(get_pool_info()(uint64,uint64,uint64,uint64))",
        "Method(get_reserves()(uint64,uint64))",
        "Method(get_user_liquidity()(uint64,uint64,uint64))",
        "Method(initialize()string)",
        "Method(pause_amm()string)",
        "Method(remove_liquidity(uint64)string)",
        "Method(set_fee_rate(uint64)string)",
        "Method(swap_a_for_b(uint64)string)",
        "Method(swap_b_for_a(uint64)string)",
        "Method(unpause_amm()string)"
      ],
      "stack_out": [
        "Method(initialize()string)",
        "Method(add_liquidity(uint64,uint64)string)",
        "Method(swap_a_for_b(uint64)string)",
        "Method(swap_b_for_a(uint64)string)",
        "Method(get_reserves()(uint64,uint64))",
        "Method(get_amount_out(uint64,uint64,uint64)uint64)",
        "Method(get_user_liquidity()(uint64,uint64,uint64))",
        "Method(get_pool_info()(uint64,uint64,uint64,uint64))",
        "Method(remove_liquidity(uint64)string)",
        "Method(set_fee_rate(uint64)string)",
        "Method(pause_amm()string)",
        "Method(unpause_amm()string)"
      ]
    },
    "286": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(add_liquidity(uint64,uint64)string)",
        "Method(get_amount_out(uint64,uint64,uint64)uint64)",
        "Method(get_pool_info()(uint64,uint64,uint64,uint64))",
        "Method(get_reserves()(uint64,uint64))",
        "Method(get_user_liquidity()(uint64,uint64,uint64))",
        "Method(initialize()string)",
        "Method(pause_amm()string)",
        "Method(remove_liquidity(uint64)string)",
        "Method(set_fee_rate(uint64)string)",
        "Method(swap_a_for_b(uint64)string)",
        "Method(swap_b_for_a(uint64)string)",
        "Method(unpause_amm()string)",
        "tmp%2#0"
      ],
      "stack_out": [
        "Method(initialize()string)",
        "Method(add_liquidity(uint64,uint64)string)",
        "Method(swap_a_for_b(uint64)string)",
        "Method(swap_b_for_a(uint64)string)",
        "Method(get_reserves()(uint64,uint64))",
        "Method(get_amount_out(uint64,uint64,uint64)uint64)",
        "Method(get_user_liquidity()(uint64,uint64,uint64))",
        "Method(get_pool_info()(uint64,uint64,uint64,uint64))",
        "Method(remove_liquidity(uint64)string)",
        "Method(set_fee_rate(uint64)string)",
        "Method(pause_amm()string)",
        "Method(unpause_amm()string)",
        "tmp%2#0"
      ]
    },
    "289": {
      "op": "match main_initialize_route@5 main_add_liquidity_route@6 main_swap_a_for_b_route@7 main_swap_b_for_a_route@8 main_get_reserves_route@9 main_get_amount_out_route@10 main_get_user_liquidity_route@11 main_get_pool_info_route@12 main_remove_liquidity_route@13 main_set_fee_rate_route@14 main_pause_amm_route@15 main_unpause_amm_route@16",
      "stack_out": []
    },
    "315": {
      "block": "main_after_if_else@19",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "316": {
      "op": "return",
      "stack_out": []
    },
    "317": {
      "block": "main_unpause_amm_route@16",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%70#0"
      ],
      "stack_out": [
        "tmp%70#0"
      ]
    },
    "319": {
      "op": "!",
      "defined_out": [
        "tmp%71#0"
      ],
      "stack_out": [
        "tmp%71#0"
      ]
    },
    "320": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "321": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%72#0"
      ],
      "stack_out": [
        "tmp%72#0"
      ]
    },
    "323": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "324": {
      "callsub": "smart_contracts.simple_amm.contract.SimpleAMM.unpause_amm",
      "op": "callsub unpause_amm",
      "defined_out": [
        "to_encode%8#0"
      ],
      "stack_out": [
        "to_encode%8#0"
      ]
    },
    "327": {
      "op": "dup",
      "defined_out": [
        "to_encode%8#0",
        "to_encode%8#0 (copy)"
      ],
      "stack_out": [
        "to_encode%8#0",
        "to_encode%8#0 (copy)"
      ]
    },
    "328": {
      "op": "len",
      "defined_out": [
        "length%7#0",
        "to_encode%8#0"
      ],
      "stack_out": [
        "to_encode%8#0",
        "length%7#0"
      ]
    },
    "329": {
      "op": "itob",
      "defined_out": [
        "as_bytes%7#0",
        "to_encode%8#0"
      ],
      "stack_out": [
        "to_encode%8#0",
        "as_bytes%7#0"
      ]
    },
    "330": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%7#0",
        "to_encode%8#0"
      ],
      "stack_out": [
        "to_encode%8#0",
        "length_uint16%7#0"
      ]
    },
    "333": {
      "op": "swap",
      "stack_out": [
        "length_uint16%7#0",
        "to_encode%8#0"
      ]
    },
    "334": {
      "op": "concat",
      "defined_out": [
        "encoded_value%7#0"
      ],
      "stack_out": [
        "encoded_value%7#0"
      ]
    },
    "335": {
      "op": "bytec_2 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_value%7#0"
      ],
      "stack_out": [
        "encoded_value%7#0",
        "0x151f7c75"
      ]
    },
    "336": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_value%7#0"
      ]
    },
    "337": {
      "op": "concat",
      "defined_out": [
        "tmp%74#0"
      ],
      "stack_out": [
        "tmp%74#0"
      ]
    },
    "338": {
      "op": "log",
      "stack_out": []
    },
    "339": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "340": {
      "op": "return",
      "stack_out": []
    },
    "341": {
      "block": "main_pause_amm_route@15",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%65#0"
      ],
      "stack_out": [
        "tmp%65#0"
      ]
    },
    "343": {
      "op": "!",
      "defined_out": [
        "tmp%66#0"
      ],
      "stack_out": [
        "tmp%66#0"
      ]
    },
    "344": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "345": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%67#0"
      ],
      "stack_out": [
        "tmp%67#0"
      ]
    },
    "347": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "348": {
      "callsub": "smart_contracts.simple_amm.contract.SimpleAMM.pause_amm",
      "op": "callsub pause_amm",
      "defined_out": [
        "to_encode%7#0"
      ],
      "stack_out": [
        "to_encode%7#0"
      ]
    },
    "351": {
      "op": "dup",
      "defined_out": [
        "to_encode%7#0",
        "to_encode%7#0 (copy)"
      ],
      "stack_out": [
        "to_encode%7#0",
        "to_encode%7#0 (copy)"
      ]
    },
    "352": {
      "op": "len",
      "defined_out": [
        "length%6#0",
        "to_encode%7#0"
      ],
      "stack_out": [
        "to_encode%7#0",
        "length%6#0"
      ]
    },
    "353": {
      "op": "itob",
      "defined_out": [
        "as_bytes%6#0",
        "to_encode%7#0"
      ],
      "stack_out": [
        "to_encode%7#0",
        "as_bytes%6#0"
      ]
    },
    "354": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%6#0",
        "to_encode%7#0"
      ],
      "stack_out": [
        "to_encode%7#0",
        "length_uint16%6#0"
      ]
    },
    "357": {
      "op": "swap",
      "stack_out": [
        "length_uint16%6#0",
        "to_encode%7#0"
      ]
    },
    "358": {
      "op": "concat",
      "defined_out": [
        "encoded_value%6#0"
      ],
      "stack_out": [
        "encoded_value%6#0"
      ]
    },
    "359": {
      "op": "bytec_2 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_value%6#0"
      ],
      "stack_out": [
        "encoded_value%6#0",
        "0x151f7c75"
      ]
    },
    "360": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_value%6#0"
      ]
    },
    "361": {
      "op": "concat",
      "defined_out": [
        "tmp%69#0"
      ],
      "stack_out": [
        "tmp%69#0"
      ]
    },
    "362": {
      "op": "log",
      "stack_out": []
    },
    "363": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "364": {
      "op": "return",
      "stack_out": []
    },
    "365": {
      "block": "main_set_fee_rate_route@14",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%59#0"
      ],
      "stack_out": [
        "tmp%59#0"
      ]
    },
    "367": {
      "op": "!",
      "defined_out": [
        "tmp%60#0"
      ],
      "stack_out": [
        "tmp%60#0"
      ]
    },
    "368": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "369": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%61#0"
      ],
      "stack_out": [
        "tmp%61#0"
      ]
    },
    "371": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "372": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%8#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%8#0"
      ]
    },
    "375": {
      "op": "btoi",
      "defined_out": [
        "tmp%63#0"
      ],
      "stack_out": [
        "tmp%63#0"
      ]
    },
    "376": {
      "callsub": "smart_contracts.simple_amm.contract.SimpleAMM.set_fee_rate",
      "op": "callsub set_fee_rate",
      "defined_out": [
        "to_encode%6#0"
      ],
      "stack_out": [
        "to_encode%6#0"
      ]
    },
    "379": {
      "op": "dup",
      "defined_out": [
        "to_encode%6#0",
        "to_encode%6#0 (copy)"
      ],
      "stack_out": [
        "to_encode%6#0",
        "to_encode%6#0 (copy)"
      ]
    },
    "380": {
      "op": "len",
      "defined_out": [
        "length%5#0",
        "to_encode%6#0"
      ],
      "stack_out": [
        "to_encode%6#0",
        "length%5#0"
      ]
    },
    "381": {
      "op": "itob",
      "defined_out": [
        "as_bytes%5#0",
        "to_encode%6#0"
      ],
      "stack_out": [
        "to_encode%6#0",
        "as_bytes%5#0"
      ]
    },
    "382": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%5#0",
        "to_encode%6#0"
      ],
      "stack_out": [
        "to_encode%6#0",
        "length_uint16%5#0"
      ]
    },
    "385": {
      "op": "swap",
      "stack_out": [
        "length_uint16%5#0",
        "to_encode%6#0"
      ]
    },
    "386": {
      "op": "concat",
      "defined_out": [
        "encoded_value%5#0"
      ],
      "stack_out": [
        "encoded_value%5#0"
      ]
    },
    "387": {
      "op": "bytec_2 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_value%5#0"
      ],
      "stack_out": [
        "encoded_value%5#0",
        "0x151f7c75"
      ]
    },
    "388": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_value%5#0"
      ]
    },
    "389": {
      "op": "concat",
      "defined_out": [
        "tmp%64#0"
      ],
      "stack_out": [
        "tmp%64#0"
      ]
    },
    "390": {
      "op": "log",
      "stack_out": []
    },
    "391": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "392": {
      "op": "return",
      "stack_out": []
    },
    "393": {
      "block": "main_remove_liquidity_route@13",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%53#0"
      ],
      "stack_out": [
        "tmp%53#0"
      ]
    },
    "395": {
      "op": "!",
      "defined_out": [
        "tmp%54#0"
      ],
      "stack_out": [
        "tmp%54#0"
      ]
    },
    "396": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "397": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%55#0"
      ],
      "stack_out": [
        "tmp%55#0"
      ]
    },
    "399": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "400": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%7#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%7#0"
      ]
    },
    "403": {
      "op": "btoi",
      "defined_out": [
        "tmp%57#0"
      ],
      "stack_out": [
        "tmp%57#0"
      ]
    },
    "404": {
      "callsub": "smart_contracts.simple_amm.contract.SimpleAMM.remove_liquidity",
      "op": "callsub remove_liquidity",
      "defined_out": [
        "to_encode%5#0"
      ],
      "stack_out": [
        "to_encode%5#0"
      ]
    },
    "407": {
      "op": "dup",
      "defined_out": [
        "to_encode%5#0",
        "to_encode%5#0 (copy)"
      ],
      "stack_out": [
        "to_encode%5#0",
        "to_encode%5#0 (copy)"
      ]
    },
    "408": {
      "op": "len",
      "defined_out": [
        "length%4#0",
        "to_encode%5#0"
      ],
      "stack_out": [
        "to_encode%5#0",
        "length%4#0"
      ]
    },
    "409": {
      "op": "itob",
      "defined_out": [
        "as_bytes%4#0",
        "to_encode%5#0"
      ],
      "stack_out": [
        "to_encode%5#0",
        "as_bytes%4#0"
      ]
    },
    "410": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%4#0",
        "to_encode%5#0"
      ],
      "stack_out": [
        "to_encode%5#0",
        "length_uint16%4#0"
      ]
    },
    "413": {
      "op": "swap",
      "stack_out": [
        "length_uint16%4#0",
        "to_encode%5#0"
      ]
    },
    "414": {
      "op": "concat",
      "defined_out": [
        "encoded_value%4#0"
      ],
      "stack_out": [
        "encoded_value%4#0"
      ]
    },
    "415": {
      "op": "bytec_2 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_value%4#0"
      ],
      "stack_out": [
        "encoded_value%4#0",
        "0x151f7c75"
      ]
    },
    "416": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_value%4#0"
      ]
    },
    "417": {
      "op": "concat",
      "defined_out": [
        "tmp%58#0"
      ],
      "stack_out": [
        "tmp%58#0"
      ]
    },
    "418": {
      "op": "log",
      "stack_out": []
    },
    "419": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "420": {
      "op": "return",
      "stack_out": []
    },
    "421": {
      "block": "main_get_pool_info_route@12",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%47#0"
      ],
      "stack_out": [
        "tmp%47#0"
      ]
    },
    "423": {
      "op": "!",
      "defined_out": [
        "tmp%48#0"
      ],
      "stack_out": [
        "tmp%48#0"
      ]
    },
    "424": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "425": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%49#0"
      ],
      "stack_out": [
        "tmp%49#0"
      ]
    },
    "427": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "428": {
      "callsub": "smart_contracts.simple_amm.contract.SimpleAMM.get_pool_info",
      "op": "callsub get_pool_info",
      "defined_out": [
        "tmp%51#0"
      ],
      "stack_out": [
        "tmp%51#0"
      ]
    },
    "431": {
      "op": "bytec_2 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%51#0"
      ],
      "stack_out": [
        "tmp%51#0",
        "0x151f7c75"
      ]
    },
    "432": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%51#0"
      ]
    },
    "433": {
      "op": "concat",
      "defined_out": [
        "tmp%52#0"
      ],
      "stack_out": [
        "tmp%52#0"
      ]
    },
    "434": {
      "op": "log",
      "stack_out": []
    },
    "435": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "436": {
      "op": "return",
      "stack_out": []
    },
    "437": {
      "block": "main_get_user_liquidity_route@11",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%41#0"
      ],
      "stack_out": [
        "tmp%41#0"
      ]
    },
    "439": {
      "op": "!",
      "defined_out": [
        "tmp%42#0"
      ],
      "stack_out": [
        "tmp%42#0"
      ]
    },
    "440": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "441": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%43#0"
      ],
      "stack_out": [
        "tmp%43#0"
      ]
    },
    "443": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "444": {
      "callsub": "smart_contracts.simple_amm.contract.SimpleAMM.get_user_liquidity",
      "op": "callsub get_user_liquidity",
      "defined_out": [
        "tmp%45#0"
      ],
      "stack_out": [
        "tmp%45#0"
      ]
    },
    "447": {
      "op": "bytec_2 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%45#0"
      ],
      "stack_out": [
        "tmp%45#0",
        "0x151f7c75"
      ]
    },
    "448": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%45#0"
      ]
    },
    "449": {
      "op": "concat",
      "defined_out": [
        "tmp%46#0"
      ],
      "stack_out": [
        "tmp%46#0"
      ]
    },
    "450": {
      "op": "log",
      "stack_out": []
    },
    "451": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "452": {
      "op": "return",
      "stack_out": []
    },
    "453": {
      "block": "main_get_amount_out_route@10",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%33#0"
      ],
      "stack_out": [
        "tmp%33#0"
      ]
    },
    "455": {
      "op": "!",
      "defined_out": [
        "tmp%34#0"
      ],
      "stack_out": [
        "tmp%34#0"
      ]
    },
    "456": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "457": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%35#0"
      ],
      "stack_out": [
        "tmp%35#0"
      ]
    },
    "459": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "460": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%4#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%4#0"
      ]
    },
    "463": {
      "op": "btoi",
      "defined_out": [
        "tmp%37#0"
      ],
      "stack_out": [
        "tmp%37#0"
      ]
    },
    "464": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[8]%5#0",
        "tmp%37#0"
      ],
      "stack_out": [
        "tmp%37#0",
        "reinterpret_bytes[8]%5#0"
      ]
    },
    "467": {
      "op": "btoi",
      "defined_out": [
        "tmp%37#0",
        "tmp%38#0"
      ],
      "stack_out": [
        "tmp%37#0",
        "tmp%38#0"
      ]
    },
    "468": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[8]%6#0",
        "tmp%37#0",
        "tmp%38#0"
      ],
      "stack_out": [
        "tmp%37#0",
        "tmp%38#0",
        "reinterpret_bytes[8]%6#0"
      ]
    },
    "471": {
      "op": "btoi",
      "defined_out": [
        "tmp%37#0",
        "tmp%38#0",
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%37#0",
        "tmp%38#0",
        "tmp%39#0"
      ]
    },
    "472": {
      "callsub": "smart_contracts.simple_amm.contract.SimpleAMM.get_amount_out",
      "op": "callsub get_amount_out",
      "defined_out": [
        "to_encode%4#0"
      ],
      "stack_out": [
        "to_encode%4#0"
      ]
    },
    "475": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "476": {
      "op": "bytec_2 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "0x151f7c75"
      ]
    },
    "477": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%0#0"
      ]
    },
    "478": {
      "op": "concat",
      "defined_out": [
        "tmp%40#0"
      ],
      "stack_out": [
        "tmp%40#0"
      ]
    },
    "479": {
      "op": "log",
      "stack_out": []
    },
    "480": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "481": {
      "op": "return",
      "stack_out": []
    },
    "482": {
      "block": "main_get_reserves_route@9",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%27#0"
      ]
    },
    "484": {
      "op": "!",
      "defined_out": [
        "tmp%28#0"
      ],
      "stack_out": [
        "tmp%28#0"
      ]
    },
    "485": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "486": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%29#0"
      ]
    },
    "488": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "489": {
      "callsub": "smart_contracts.simple_amm.contract.SimpleAMM.get_reserves",
      "op": "callsub get_reserves",
      "defined_out": [
        "tmp%31#0"
      ],
      "stack_out": [
        "tmp%31#0"
      ]
    },
    "492": {
      "op": "bytec_2 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%31#0"
      ],
      "stack_out": [
        "tmp%31#0",
        "0x151f7c75"
      ]
    },
    "493": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%31#0"
      ]
    },
    "494": {
      "op": "concat",
      "defined_out": [
        "tmp%32#0"
      ],
      "stack_out": [
        "tmp%32#0"
      ]
    },
    "495": {
      "op": "log",
      "stack_out": []
    },
    "496": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "497": {
      "op": "return",
      "stack_out": []
    },
    "498": {
      "block": "main_swap_b_for_a_route@8",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0"
      ]
    },
    "500": {
      "op": "!",
      "defined_out": [
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0"
      ]
    },
    "501": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "502": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%23#0"
      ]
    },
    "504": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "505": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%3#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%3#0"
      ]
    },
    "508": {
      "op": "btoi",
      "defined_out": [
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%25#0"
      ]
    },
    "509": {
      "callsub": "smart_contracts.simple_amm.contract.SimpleAMM.swap_b_for_a",
      "op": "callsub swap_b_for_a",
      "defined_out": [
        "to_encode%3#0"
      ],
      "stack_out": [
        "to_encode%3#0"
      ]
    },
    "512": {
      "op": "dup",
      "defined_out": [
        "to_encode%3#0",
        "to_encode%3#0 (copy)"
      ],
      "stack_out": [
        "to_encode%3#0",
        "to_encode%3#0 (copy)"
      ]
    },
    "513": {
      "op": "len",
      "defined_out": [
        "length%3#0",
        "to_encode%3#0"
      ],
      "stack_out": [
        "to_encode%3#0",
        "length%3#0"
      ]
    },
    "514": {
      "op": "itob",
      "defined_out": [
        "as_bytes%3#0",
        "to_encode%3#0"
      ],
      "stack_out": [
        "to_encode%3#0",
        "as_bytes%3#0"
      ]
    },
    "515": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%3#0",
        "to_encode%3#0"
      ],
      "stack_out": [
        "to_encode%3#0",
        "length_uint16%3#0"
      ]
    },
    "518": {
      "op": "swap",
      "stack_out": [
        "length_uint16%3#0",
        "to_encode%3#0"
      ]
    },
    "519": {
      "op": "concat",
      "defined_out": [
        "encoded_value%3#0"
      ],
      "stack_out": [
        "encoded_value%3#0"
      ]
    },
    "520": {
      "op": "bytec_2 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_value%3#0"
      ],
      "stack_out": [
        "encoded_value%3#0",
        "0x151f7c75"
      ]
    },
    "521": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_value%3#0"
      ]
    },
    "522": {
      "op": "concat",
      "defined_out": [
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%26#0"
      ]
    },
    "523": {
      "op": "log",
      "stack_out": []
    },
    "524": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "525": {
      "op": "return",
      "stack_out": []
    },
    "526": {
      "block": "main_swap_a_for_b_route@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "528": {
      "op": "!",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "529": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "530": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "532": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "533": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%2#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%2#0"
      ]
    },
    "536": {
      "op": "btoi",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "537": {
      "callsub": "smart_contracts.simple_amm.contract.SimpleAMM.swap_a_for_b",
      "op": "callsub swap_a_for_b",
      "defined_out": [
        "to_encode%2#0"
      ],
      "stack_out": [
        "to_encode%2#0"
      ]
    },
    "540": {
      "op": "dup",
      "defined_out": [
        "to_encode%2#0",
        "to_encode%2#0 (copy)"
      ],
      "stack_out": [
        "to_encode%2#0",
        "to_encode%2#0 (copy)"
      ]
    },
    "541": {
      "op": "len",
      "defined_out": [
        "length%2#0",
        "to_encode%2#0"
      ],
      "stack_out": [
        "to_encode%2#0",
        "length%2#0"
      ]
    },
    "542": {
      "op": "itob",
      "defined_out": [
        "as_bytes%2#0",
        "to_encode%2#0"
      ],
      "stack_out": [
        "to_encode%2#0",
        "as_bytes%2#0"
      ]
    },
    "543": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%2#0",
        "to_encode%2#0"
      ],
      "stack_out": [
        "to_encode%2#0",
        "length_uint16%2#0"
      ]
    },
    "546": {
      "op": "swap",
      "stack_out": [
        "length_uint16%2#0",
        "to_encode%2#0"
      ]
    },
    "547": {
      "op": "concat",
      "defined_out": [
        "encoded_value%2#0"
      ],
      "stack_out": [
        "encoded_value%2#0"
      ]
    },
    "548": {
      "op": "bytec_2 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_value%2#0"
      ],
      "stack_out": [
        "encoded_value%2#0",
        "0x151f7c75"
      ]
    },
    "549": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_value%2#0"
      ]
    },
    "550": {
      "op": "concat",
      "defined_out": [
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0"
      ]
    },
    "551": {
      "op": "log",
      "stack_out": []
    },
    "552": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "553": {
      "op": "return",
      "stack_out": []
    },
    "554": {
      "block": "main_add_liquidity_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "556": {
      "op": "!",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "557": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "558": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "560": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "561": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%0#0"
      ]
    },
    "564": {
      "op": "btoi",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "565": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[8]%1#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0",
        "reinterpret_bytes[8]%1#0"
      ]
    },
    "568": {
      "op": "btoi",
      "defined_out": [
        "tmp%12#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%13#0"
      ]
    },
    "569": {
      "callsub": "smart_contracts.simple_amm.contract.SimpleAMM.add_liquidity",
      "op": "callsub add_liquidity",
      "defined_out": [
        "to_encode%1#0"
      ],
      "stack_out": [
        "to_encode%1#0"
      ]
    },
    "572": {
      "op": "dup",
      "defined_out": [
        "to_encode%1#0",
        "to_encode%1#0 (copy)"
      ],
      "stack_out": [
        "to_encode%1#0",
        "to_encode%1#0 (copy)"
      ]
    },
    "573": {
      "op": "len",
      "defined_out": [
        "length%1#0",
        "to_encode%1#0"
      ],
      "stack_out": [
        "to_encode%1#0",
        "length%1#0"
      ]
    },
    "574": {
      "op": "itob",
      "defined_out": [
        "as_bytes%1#0",
        "to_encode%1#0"
      ],
      "stack_out": [
        "to_encode%1#0",
        "as_bytes%1#0"
      ]
    },
    "575": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%1#0",
        "to_encode%1#0"
      ],
      "stack_out": [
        "to_encode%1#0",
        "length_uint16%1#0"
      ]
    },
    "578": {
      "op": "swap",
      "stack_out": [
        "length_uint16%1#0",
        "to_encode%1#0"
      ]
    },
    "579": {
      "op": "concat",
      "defined_out": [
        "encoded_value%1#0"
      ],
      "stack_out": [
        "encoded_value%1#0"
      ]
    },
    "580": {
      "op": "bytec_2 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_value%1#0"
      ],
      "stack_out": [
        "encoded_value%1#0",
        "0x151f7c75"
      ]
    },
    "581": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_value%1#0"
      ]
    },
    "582": {
      "op": "concat",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "583": {
      "op": "log",
      "stack_out": []
    },
    "584": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "585": {
      "op": "return",
      "stack_out": []
    },
    "586": {
      "block": "main_initialize_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "588": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "589": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "590": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "592": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "593": {
      "callsub": "smart_contracts.simple_amm.contract.SimpleAMM.initialize",
      "op": "callsub initialize",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "596": {
      "op": "dup",
      "defined_out": [
        "to_encode%0#0",
        "to_encode%0#0 (copy)"
      ],
      "stack_out": [
        "to_encode%0#0",
        "to_encode%0#0 (copy)"
      ]
    },
    "597": {
      "op": "len",
      "defined_out": [
        "length%0#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "length%0#0"
      ]
    },
    "598": {
      "op": "itob",
      "defined_out": [
        "as_bytes%0#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "as_bytes%0#0"
      ]
    },
    "599": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%0#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "length_uint16%0#0"
      ]
    },
    "602": {
      "op": "swap",
      "stack_out": [
        "length_uint16%0#0",
        "to_encode%0#0"
      ]
    },
    "603": {
      "op": "concat",
      "defined_out": [
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0"
      ]
    },
    "604": {
      "op": "bytec_2 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "0x151f7c75"
      ]
    },
    "605": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_value%0#0"
      ]
    },
    "606": {
      "op": "concat",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "607": {
      "op": "log",
      "stack_out": []
    },
    "608": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "609": {
      "op": "return",
      "stack_out": []
    },
    "610": {
      "block": "main_bare_routing@17",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%75#0"
      ],
      "stack_out": [
        "tmp%75#0"
      ]
    },
    "612": {
      "op": "bnz main_after_if_else@19",
      "stack_out": []
    },
    "615": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%76#0"
      ],
      "stack_out": [
        "tmp%76#0"
      ]
    },
    "617": {
      "op": "!",
      "defined_out": [
        "tmp%77#0"
      ],
      "stack_out": [
        "tmp%77#0"
      ]
    },
    "618": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "619": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "620": {
      "op": "return",
      "stack_out": []
    },
    "621": {
      "subroutine": "smart_contracts.simple_amm.contract.SimpleAMM.initialize",
      "params": {},
      "block": "initialize",
      "stack_in": [],
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "623": {
      "op": "global CreatorAddress",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "625": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "626": {
      "error": "Only creator can initialize",
      "op": "assert // Only creator can initialize",
      "stack_out": []
    },
    "627": {
      "op": "bytec 9 // \"admin\"",
      "defined_out": [
        "\"admin\""
      ],
      "stack_out": [
        "\"admin\""
      ]
    },
    "629": {
      "op": "txn Sender",
      "defined_out": [
        "\"admin\"",
        "materialized_values%0#0"
      ],
      "stack_out": [
        "\"admin\"",
        "materialized_values%0#0"
      ]
    },
    "631": {
      "op": "app_global_put",
      "stack_out": []
    },
    "632": {
      "op": "bytec_0 // \"reserve_a\"",
      "defined_out": [
        "\"reserve_a\""
      ],
      "stack_out": [
        "\"reserve_a\""
      ]
    },
    "633": {
      "op": "intc_0 // 0",
      "defined_out": [
        "\"reserve_a\"",
        "0"
      ],
      "stack_out": [
        "\"reserve_a\"",
        "0"
      ]
    },
    "634": {
      "op": "app_global_put",
      "stack_out": []
    },
    "635": {
      "op": "bytec_1 // \"reserve_b\"",
      "defined_out": [
        "\"reserve_b\""
      ],
      "stack_out": [
        "\"reserve_b\""
      ]
    },
    "636": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"reserve_b\"",
        "0"
      ]
    },
    "637": {
      "op": "app_global_put",
      "stack_out": []
    },
    "638": {
      "op": "bytec 8 // \"fee_rate\"",
      "defined_out": [
        "\"fee_rate\""
      ],
      "stack_out": [
        "\"fee_rate\""
      ]
    },
    "640": {
      "op": "pushint 3 // 3",
      "defined_out": [
        "\"fee_rate\"",
        "3"
      ],
      "stack_out": [
        "\"fee_rate\"",
        "3"
      ]
    },
    "642": {
      "op": "app_global_put",
      "stack_out": []
    },
    "643": {
      "op": "bytec 4 // \"is_paused\"",
      "defined_out": [
        "\"is_paused\""
      ],
      "stack_out": [
        "\"is_paused\""
      ]
    },
    "645": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"is_paused\"",
        "0"
      ]
    },
    "646": {
      "op": "app_global_put",
      "stack_out": []
    },
    "647": {
      "op": "bytec_3 // \"total_liquidity\"",
      "defined_out": [
        "\"total_liquidity\""
      ],
      "stack_out": [
        "\"total_liquidity\""
      ]
    },
    "648": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"total_liquidity\"",
        "0"
      ]
    },
    "649": {
      "op": "app_global_put",
      "stack_out": []
    },
    "650": {
      "op": "pushbytes 0x53696d706c65414d4d20696e697469616c697a6564",
      "defined_out": [
        "0x53696d706c65414d4d20696e697469616c697a6564"
      ],
      "stack_out": [
        "0x53696d706c65414d4d20696e697469616c697a6564"
      ]
    },
    "673": {
      "op": "log",
      "stack_out": []
    },
    "674": {
      "op": "pushbytes \"AMM initialized successfully\"",
      "defined_out": [
        "\"AMM initialized successfully\""
      ],
      "stack_out": [
        "\"AMM initialized successfully\""
      ]
    },
    "704": {
      "retsub": true,
      "op": "retsub"
    },
    "705": {
      "subroutine": "smart_contracts.simple_amm.contract.SimpleAMM.add_liquidity",
      "params": {
        "amount_a#0": "uint64",
        "amount_b#0": "uint64"
      },
      "block": "add_liquidity",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "708": {
      "op": "pushbytes \"\"",
      "stack_out": [
        "counter#0"
      ]
    },
    "710": {
      "op": "dupn 7",
      "stack_out": [
        "counter#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "required_a#0",
        "required_b#0",
        "x#0",
        "y#0",
        "z#1"
      ]
    },
    "712": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "counter#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "required_a#0",
        "required_b#0",
        "x#0",
        "y#0",
        "z#1",
        "0"
      ]
    },
    "713": {
      "op": "bytec 4 // \"is_paused\"",
      "defined_out": [
        "\"is_paused\"",
        "0"
      ],
      "stack_out": [
        "counter#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "required_a#0",
        "required_b#0",
        "x#0",
        "y#0",
        "z#1",
        "0",
        "\"is_paused\""
      ]
    },
    "715": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "counter#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "required_a#0",
        "required_b#0",
        "x#0",
        "y#0",
        "z#1",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "716": {
      "error": "check self.is_paused exists",
      "op": "assert // check self.is_paused exists",
      "stack_out": [
        "counter#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "required_a#0",
        "required_b#0",
        "x#0",
        "y#0",
        "z#1",
        "maybe_value%0#0"
      ]
    },
    "717": {
      "op": "!",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "counter#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "required_a#0",
        "required_b#0",
        "x#0",
        "y#0",
        "z#1",
        "tmp%0#0"
      ]
    },
    "718": {
      "error": "AMM is paused",
      "op": "assert // AMM is paused",
      "stack_out": [
        "counter#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "required_a#0",
        "required_b#0",
        "x#0",
        "y#0",
        "z#1"
      ]
    },
    "719": {
      "op": "frame_dig -2",
      "defined_out": [
        "amount_a#0 (copy)"
      ],
      "stack_out": [
        "counter#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "required_a#0",
        "required_b#0",
        "x#0",
        "y#0",
        "z#1",
        "amount_a#0 (copy)"
      ]
    },
    "721": {
      "op": "bz add_liquidity_bool_false@3",
      "stack_out": [
        "counter#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "required_a#0",
        "required_b#0",
        "x#0",
        "y#0",
        "z#1"
      ]
    },
    "724": {
      "op": "frame_dig -1",
      "defined_out": [
        "amount_b#0 (copy)"
      ],
      "stack_out": [
        "counter#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "required_a#0",
        "required_b#0",
        "x#0",
        "y#0",
        "z#1",
        "amount_b#0 (copy)"
      ]
    },
    "726": {
      "op": "bz add_liquidity_bool_false@3",
      "stack_out": [
        "counter#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "required_a#0",
        "required_b#0",
        "x#0",
        "y#0",
        "z#1"
      ]
    },
    "729": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "counter#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "required_a#0",
        "required_b#0",
        "x#0",
        "y#0",
        "z#1",
        "and_result%0#0"
      ]
    },
    "730": {
      "block": "add_liquidity_bool_merge@4",
      "stack_in": [
        "counter#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "required_a#0",
        "required_b#0",
        "x#0",
        "y#0",
        "z#1",
        "and_result%0#0"
      ],
      "error": "Amounts must be positive",
      "op": "assert // Amounts must be positive",
      "defined_out": [],
      "stack_out": [
        "counter#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "required_a#0",
        "required_b#0",
        "x#0",
        "y#0",
        "z#1"
      ]
    },
    "731": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "counter#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "required_a#0",
        "required_b#0",
        "x#0",
        "y#0",
        "z#1",
        "0"
      ]
    },
    "732": {
      "op": "bytec_0 // \"reserve_a\"",
      "defined_out": [
        "\"reserve_a\"",
        "0"
      ],
      "stack_out": [
        "counter#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "required_a#0",
        "required_b#0",
        "x#0",
        "y#0",
        "z#1",
        "0",
        "\"reserve_a\""
      ]
    },
    "733": {
      "op": "app_global_get_ex",
      "defined_out": [
        "current_reserve_a#0",
        "maybe_exists%1#0"
      ],
      "stack_out": [
        "counter#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "required_a#0",
        "required_b#0",
        "x#0",
        "y#0",
        "z#1",
        "current_reserve_a#0",
        "maybe_exists%1#0"
      ]
    },
    "734": {
      "op": "swap",
      "stack_out": [
        "counter#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "required_a#0",
        "required_b#0",
        "x#0",
        "y#0",
        "z#1",
        "maybe_exists%1#0",
        "current_reserve_a#0"
      ]
    },
    "735": {
      "op": "dup",
      "stack_out": [
        "counter#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "required_a#0",
        "required_b#0",
        "x#0",
        "y#0",
        "z#1",
        "maybe_exists%1#0",
        "current_reserve_a#0",
        "current_reserve_a#0 (copy)"
      ]
    },
    "736": {
      "op": "cover 2",
      "stack_out": [
        "counter#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "required_a#0",
        "required_b#0",
        "x#0",
        "y#0",
        "z#1",
        "current_reserve_a#0",
        "maybe_exists%1#0",
        "current_reserve_a#0"
      ]
    },
    "738": {
      "op": "frame_bury 1",
      "defined_out": [
        "current_reserve_a#0",
        "maybe_exists%1#0"
      ],
      "stack_out": [
        "counter#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "required_a#0",
        "required_b#0",
        "x#0",
        "y#0",
        "z#1",
        "current_reserve_a#0",
        "maybe_exists%1#0"
      ]
    },
    "740": {
      "error": "check self.reserve_a exists",
      "op": "assert // check self.reserve_a exists",
      "stack_out": [
        "counter#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "required_a#0",
        "required_b#0",
        "x#0",
        "y#0",
        "z#1",
        "current_reserve_a#0"
      ]
    },
    "741": {
      "op": "intc_0 // 0",
      "stack_out": [
        "counter#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "required_a#0",
        "required_b#0",
        "x#0",
        "y#0",
        "z#1",
        "current_reserve_a#0",
        "0"
      ]
    },
    "742": {
      "op": "bytec_1 // \"reserve_b\"",
      "defined_out": [
        "\"reserve_b\"",
        "0",
        "current_reserve_a#0"
      ],
      "stack_out": [
        "counter#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "required_a#0",
        "required_b#0",
        "x#0",
        "y#0",
        "z#1",
        "current_reserve_a#0",
        "0",
        "\"reserve_b\""
      ]
    },
    "743": {
      "op": "app_global_get_ex",
      "defined_out": [
        "current_reserve_a#0",
        "current_reserve_b#0",
        "maybe_exists%2#0"
      ],
      "stack_out": [
        "counter#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "required_a#0",
        "required_b#0",
        "x#0",
        "y#0",
        "z#1",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "maybe_exists%2#0"
      ]
    },
    "744": {
      "op": "swap",
      "stack_out": [
        "counter#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "required_a#0",
        "required_b#0",
        "x#0",
        "y#0",
        "z#1",
        "current_reserve_a#0",
        "maybe_exists%2#0",
        "current_reserve_b#0"
      ]
    },
    "745": {
      "op": "frame_bury 2",
      "defined_out": [
        "current_reserve_a#0",
        "current_reserve_b#0",
        "maybe_exists%2#0"
      ],
      "stack_out": [
        "counter#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "required_a#0",
        "required_b#0",
        "x#0",
        "y#0",
        "z#1",
        "current_reserve_a#0",
        "maybe_exists%2#0"
      ]
    },
    "747": {
      "error": "check self.reserve_b exists",
      "op": "assert // check self.reserve_b exists",
      "stack_out": [
        "counter#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "required_a#0",
        "required_b#0",
        "x#0",
        "y#0",
        "z#1",
        "current_reserve_a#0"
      ]
    },
    "748": {
      "op": "bnz add_liquidity_else_body@7",
      "stack_out": [
        "counter#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "required_a#0",
        "required_b#0",
        "x#0",
        "y#0",
        "z#1"
      ]
    },
    "751": {
      "op": "frame_dig 2",
      "stack_out": [
        "counter#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "required_a#0",
        "required_b#0",
        "x#0",
        "y#0",
        "z#1",
        "current_reserve_b#0"
      ]
    },
    "753": {
      "op": "bnz add_liquidity_else_body@7",
      "stack_out": [
        "counter#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "required_a#0",
        "required_b#0",
        "x#0",
        "y#0",
        "z#1"
      ]
    },
    "756": {
      "op": "bytec_0 // \"reserve_a\"",
      "stack_out": [
        "counter#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "required_a#0",
        "required_b#0",
        "x#0",
        "y#0",
        "z#1",
        "\"reserve_a\""
      ]
    },
    "757": {
      "op": "frame_dig -2",
      "defined_out": [
        "\"reserve_a\"",
        "amount_a#0 (copy)",
        "current_reserve_a#0",
        "current_reserve_b#0"
      ],
      "stack_out": [
        "counter#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "required_a#0",
        "required_b#0",
        "x#0",
        "y#0",
        "z#1",
        "\"reserve_a\"",
        "amount_a#0 (copy)"
      ]
    },
    "759": {
      "op": "app_global_put",
      "stack_out": [
        "counter#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "required_a#0",
        "required_b#0",
        "x#0",
        "y#0",
        "z#1"
      ]
    },
    "760": {
      "op": "bytec_1 // \"reserve_b\"",
      "stack_out": [
        "counter#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "required_a#0",
        "required_b#0",
        "x#0",
        "y#0",
        "z#1",
        "\"reserve_b\""
      ]
    },
    "761": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"reserve_b\"",
        "amount_b#0 (copy)",
        "current_reserve_a#0",
        "current_reserve_b#0"
      ],
      "stack_out": [
        "counter#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "required_a#0",
        "required_b#0",
        "x#0",
        "y#0",
        "z#1",
        "\"reserve_b\"",
        "amount_b#0 (copy)"
      ]
    },
    "763": {
      "op": "app_global_put",
      "stack_out": [
        "counter#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "required_a#0",
        "required_b#0",
        "x#0",
        "y#0",
        "z#1"
      ]
    },
    "764": {
      "op": "frame_dig -2",
      "stack_out": [
        "counter#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "required_a#0",
        "required_b#0",
        "x#0",
        "y#0",
        "z#1",
        "amount_a#0 (copy)"
      ]
    },
    "766": {
      "op": "frame_dig -1",
      "stack_out": [
        "counter#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "required_a#0",
        "required_b#0",
        "x#0",
        "y#0",
        "z#1",
        "amount_a#0 (copy)",
        "amount_b#0 (copy)"
      ]
    },
    "768": {
      "op": "*",
      "defined_out": [
        "current_reserve_a#0",
        "current_reserve_b#0",
        "x#0"
      ],
      "stack_out": [
        "counter#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "required_a#0",
        "required_b#0",
        "x#0",
        "y#0",
        "z#1",
        "x#0"
      ]
    },
    "769": {
      "op": "dup",
      "stack_out": [
        "counter#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "required_a#0",
        "required_b#0",
        "x#0",
        "y#0",
        "z#1",
        "x#0",
        "x#0"
      ]
    },
    "770": {
      "op": "frame_bury 5",
      "defined_out": [
        "current_reserve_a#0",
        "current_reserve_b#0",
        "x#0"
      ],
      "stack_out": [
        "counter#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "required_a#0",
        "required_b#0",
        "x#0",
        "y#0",
        "z#1",
        "x#0"
      ]
    },
    "772": {
      "op": "bnz add_liquidity_after_if_else@14",
      "stack_out": [
        "counter#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "required_a#0",
        "required_b#0",
        "x#0",
        "y#0",
        "z#1"
      ]
    },
    "775": {
      "op": "intc_0 // 0",
      "defined_out": [
        "current_reserve_a#0",
        "current_reserve_b#0",
        "liquidity_tokens#0",
        "x#0"
      ],
      "stack_out": [
        "counter#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "required_a#0",
        "required_b#0",
        "x#0",
        "y#0",
        "z#1",
        "liquidity_tokens#0"
      ]
    },
    "776": {
      "block": "add_liquidity_after_inlined_smart_contracts.simple_amm.contract.SimpleAMM._sqrt@19",
      "stack_in": [
        "counter#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "required_a#0",
        "required_b#0",
        "x#0",
        "y#0",
        "z#1",
        "liquidity_tokens#0"
      ],
      "op": "txn Sender",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "counter#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "required_a#0",
        "required_b#0",
        "x#0",
        "y#0",
        "z#1",
        "liquidity_tokens#0",
        "tmp%6#0"
      ]
    },
    "778": {
      "op": "bytec 5 // \"liquidity_balance\"",
      "defined_out": [
        "\"liquidity_balance\"",
        "tmp%6#0"
      ],
      "stack_out": [
        "counter#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "required_a#0",
        "required_b#0",
        "x#0",
        "y#0",
        "z#1",
        "liquidity_tokens#0",
        "tmp%6#0",
        "\"liquidity_balance\""
      ]
    },
    "780": {
      "op": "dig 2",
      "defined_out": [
        "\"liquidity_balance\"",
        "liquidity_tokens#0",
        "liquidity_tokens#0 (copy)",
        "tmp%6#0"
      ],
      "stack_out": [
        "counter#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "required_a#0",
        "required_b#0",
        "x#0",
        "y#0",
        "z#1",
        "liquidity_tokens#0",
        "tmp%6#0",
        "\"liquidity_balance\"",
        "liquidity_tokens#0 (copy)"
      ]
    },
    "782": {
      "op": "app_local_put",
      "stack_out": [
        "counter#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "required_a#0",
        "required_b#0",
        "x#0",
        "y#0",
        "z#1",
        "liquidity_tokens#0"
      ]
    },
    "783": {
      "op": "bytec_3 // \"total_liquidity\"",
      "defined_out": [
        "\"total_liquidity\"",
        "liquidity_tokens#0"
      ],
      "stack_out": [
        "counter#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "required_a#0",
        "required_b#0",
        "x#0",
        "y#0",
        "z#1",
        "liquidity_tokens#0",
        "\"total_liquidity\""
      ]
    },
    "784": {
      "op": "swap",
      "stack_out": [
        "counter#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "required_a#0",
        "required_b#0",
        "x#0",
        "y#0",
        "z#1",
        "\"total_liquidity\"",
        "liquidity_tokens#0"
      ]
    },
    "785": {
      "op": "app_global_put",
      "stack_out": [
        "counter#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "required_a#0",
        "required_b#0",
        "x#0",
        "y#0",
        "z#1"
      ]
    },
    "786": {
      "block": "add_liquidity_after_if_else@11",
      "stack_in": [
        "counter#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "required_a#0",
        "required_b#0",
        "x#0",
        "y#0",
        "z#1"
      ],
      "op": "txn Sender",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "counter#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "required_a#0",
        "required_b#0",
        "x#0",
        "y#0",
        "z#1",
        "tmp%14#0"
      ]
    },
    "788": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%14#0"
      ],
      "stack_out": [
        "counter#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "required_a#0",
        "required_b#0",
        "x#0",
        "y#0",
        "z#1",
        "tmp%14#0",
        "0"
      ]
    },
    "789": {
      "op": "bytec 6 // \"token_a_deposited\"",
      "defined_out": [
        "\"token_a_deposited\"",
        "0",
        "tmp%14#0"
      ],
      "stack_out": [
        "counter#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "required_a#0",
        "required_b#0",
        "x#0",
        "y#0",
        "z#1",
        "tmp%14#0",
        "0",
        "\"token_a_deposited\""
      ]
    },
    "791": {
      "op": "app_local_get_ex",
      "defined_out": [
        "maybe_exists%7#0",
        "maybe_value%7#0"
      ],
      "stack_out": [
        "counter#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "required_a#0",
        "required_b#0",
        "x#0",
        "y#0",
        "z#1",
        "maybe_value%7#0",
        "maybe_exists%7#0"
      ]
    },
    "792": {
      "error": "check self.token_a_deposited exists for account",
      "op": "assert // check self.token_a_deposited exists for account",
      "stack_out": [
        "counter#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "required_a#0",
        "required_b#0",
        "x#0",
        "y#0",
        "z#1",
        "maybe_value%7#0"
      ]
    },
    "793": {
      "op": "frame_dig -2",
      "defined_out": [
        "amount_a#0 (copy)",
        "maybe_value%7#0"
      ],
      "stack_out": [
        "counter#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "required_a#0",
        "required_b#0",
        "x#0",
        "y#0",
        "z#1",
        "maybe_value%7#0",
        "amount_a#0 (copy)"
      ]
    },
    "795": {
      "op": "+",
      "defined_out": [
        "materialized_values%6#0"
      ],
      "stack_out": [
        "counter#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "required_a#0",
        "required_b#0",
        "x#0",
        "y#0",
        "z#1",
        "materialized_values%6#0"
      ]
    },
    "796": {
      "op": "txn Sender",
      "defined_out": [
        "materialized_values%6#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "counter#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "required_a#0",
        "required_b#0",
        "x#0",
        "y#0",
        "z#1",
        "materialized_values%6#0",
        "tmp%15#0"
      ]
    },
    "798": {
      "op": "bytec 6 // \"token_a_deposited\"",
      "stack_out": [
        "counter#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "required_a#0",
        "required_b#0",
        "x#0",
        "y#0",
        "z#1",
        "materialized_values%6#0",
        "tmp%15#0",
        "\"token_a_deposited\""
      ]
    },
    "800": {
      "op": "uncover 2",
      "stack_out": [
        "counter#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "required_a#0",
        "required_b#0",
        "x#0",
        "y#0",
        "z#1",
        "tmp%15#0",
        "\"token_a_deposited\"",
        "materialized_values%6#0"
      ]
    },
    "802": {
      "op": "app_local_put",
      "stack_out": [
        "counter#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "required_a#0",
        "required_b#0",
        "x#0",
        "y#0",
        "z#1"
      ]
    },
    "803": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "counter#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "required_a#0",
        "required_b#0",
        "x#0",
        "y#0",
        "z#1",
        "tmp%16#0"
      ]
    },
    "805": {
      "op": "intc_0 // 0",
      "stack_out": [
        "counter#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "required_a#0",
        "required_b#0",
        "x#0",
        "y#0",
        "z#1",
        "tmp%16#0",
        "0"
      ]
    },
    "806": {
      "op": "bytec 7 // \"token_b_deposited\"",
      "defined_out": [
        "\"token_b_deposited\"",
        "0",
        "tmp%16#0"
      ],
      "stack_out": [
        "counter#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "required_a#0",
        "required_b#0",
        "x#0",
        "y#0",
        "z#1",
        "tmp%16#0",
        "0",
        "\"token_b_deposited\""
      ]
    },
    "808": {
      "op": "app_local_get_ex",
      "defined_out": [
        "maybe_exists%8#0",
        "maybe_value%8#0"
      ],
      "stack_out": [
        "counter#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "required_a#0",
        "required_b#0",
        "x#0",
        "y#0",
        "z#1",
        "maybe_value%8#0",
        "maybe_exists%8#0"
      ]
    },
    "809": {
      "error": "check self.token_b_deposited exists for account",
      "op": "assert // check self.token_b_deposited exists for account",
      "stack_out": [
        "counter#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "required_a#0",
        "required_b#0",
        "x#0",
        "y#0",
        "z#1",
        "maybe_value%8#0"
      ]
    },
    "810": {
      "op": "frame_dig -1",
      "defined_out": [
        "amount_b#0 (copy)",
        "maybe_value%8#0"
      ],
      "stack_out": [
        "counter#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "required_a#0",
        "required_b#0",
        "x#0",
        "y#0",
        "z#1",
        "maybe_value%8#0",
        "amount_b#0 (copy)"
      ]
    },
    "812": {
      "op": "+",
      "defined_out": [
        "materialized_values%7#0"
      ],
      "stack_out": [
        "counter#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "required_a#0",
        "required_b#0",
        "x#0",
        "y#0",
        "z#1",
        "materialized_values%7#0"
      ]
    },
    "813": {
      "op": "txn Sender",
      "defined_out": [
        "materialized_values%7#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "counter#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "required_a#0",
        "required_b#0",
        "x#0",
        "y#0",
        "z#1",
        "materialized_values%7#0",
        "tmp%17#0"
      ]
    },
    "815": {
      "op": "bytec 7 // \"token_b_deposited\"",
      "stack_out": [
        "counter#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "required_a#0",
        "required_b#0",
        "x#0",
        "y#0",
        "z#1",
        "materialized_values%7#0",
        "tmp%17#0",
        "\"token_b_deposited\""
      ]
    },
    "817": {
      "op": "uncover 2",
      "stack_out": [
        "counter#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "required_a#0",
        "required_b#0",
        "x#0",
        "y#0",
        "z#1",
        "tmp%17#0",
        "\"token_b_deposited\"",
        "materialized_values%7#0"
      ]
    },
    "819": {
      "op": "app_local_put",
      "stack_out": [
        "counter#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "required_a#0",
        "required_b#0",
        "x#0",
        "y#0",
        "z#1"
      ]
    },
    "820": {
      "op": "frame_dig -2",
      "stack_out": [
        "counter#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "required_a#0",
        "required_b#0",
        "x#0",
        "y#0",
        "z#1",
        "amount_a#0 (copy)"
      ]
    },
    "822": {
      "op": "itob",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "counter#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "required_a#0",
        "required_b#0",
        "x#0",
        "y#0",
        "z#1",
        "tmp%18#0"
      ]
    },
    "823": {
      "op": "pushbytes 0x4c6971756964697479206164646564202d20413a20",
      "defined_out": [
        "0x4c6971756964697479206164646564202d20413a20",
        "tmp%18#0"
      ],
      "stack_out": [
        "counter#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "required_a#0",
        "required_b#0",
        "x#0",
        "y#0",
        "z#1",
        "tmp%18#0",
        "0x4c6971756964697479206164646564202d20413a20"
      ]
    },
    "846": {
      "op": "swap",
      "stack_out": [
        "counter#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "required_a#0",
        "required_b#0",
        "x#0",
        "y#0",
        "z#1",
        "0x4c6971756964697479206164646564202d20413a20",
        "tmp%18#0"
      ]
    },
    "847": {
      "op": "concat",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "counter#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "required_a#0",
        "required_b#0",
        "x#0",
        "y#0",
        "z#1",
        "tmp%19#0"
      ]
    },
    "848": {
      "op": "bytec 11 // 0x20423a20",
      "defined_out": [
        "0x20423a20",
        "tmp%19#0"
      ],
      "stack_out": [
        "counter#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "required_a#0",
        "required_b#0",
        "x#0",
        "y#0",
        "z#1",
        "tmp%19#0",
        "0x20423a20"
      ]
    },
    "850": {
      "op": "concat",
      "defined_out": [
        "tmp%20#0"
      ],
      "stack_out": [
        "counter#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "required_a#0",
        "required_b#0",
        "x#0",
        "y#0",
        "z#1",
        "tmp%20#0"
      ]
    },
    "851": {
      "op": "frame_dig -1",
      "stack_out": [
        "counter#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "required_a#0",
        "required_b#0",
        "x#0",
        "y#0",
        "z#1",
        "tmp%20#0",
        "amount_b#0 (copy)"
      ]
    },
    "853": {
      "op": "itob",
      "defined_out": [
        "tmp%20#0",
        "tmp%21#0"
      ],
      "stack_out": [
        "counter#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "required_a#0",
        "required_b#0",
        "x#0",
        "y#0",
        "z#1",
        "tmp%20#0",
        "tmp%21#0"
      ]
    },
    "854": {
      "op": "concat",
      "defined_out": [
        "tmp%22#0"
      ],
      "stack_out": [
        "counter#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "required_a#0",
        "required_b#0",
        "x#0",
        "y#0",
        "z#1",
        "tmp%22#0"
      ]
    },
    "855": {
      "op": "log",
      "stack_out": [
        "counter#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "required_a#0",
        "required_b#0",
        "x#0",
        "y#0",
        "z#1"
      ]
    },
    "856": {
      "op": "pushbytes \"Liquidity added successfully\"",
      "defined_out": [
        "\"Liquidity added successfully\""
      ],
      "stack_out": [
        "counter#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "required_a#0",
        "required_b#0",
        "x#0",
        "y#0",
        "z#1",
        "\"Liquidity added successfully\""
      ]
    },
    "886": {
      "op": "frame_bury 0"
    },
    "888": {
      "retsub": true,
      "op": "retsub"
    },
    "889": {
      "block": "add_liquidity_after_if_else@14",
      "stack_in": [
        "counter#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "required_a#0",
        "required_b#0",
        "x#0",
        "y#0",
        "z#1"
      ],
      "op": "frame_dig 5",
      "defined_out": [
        "x#0"
      ],
      "stack_out": [
        "counter#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "required_a#0",
        "required_b#0",
        "x#0",
        "y#0",
        "z#1",
        "x#0"
      ]
    },
    "891": {
      "op": "dup",
      "defined_out": [
        "x#0",
        "x#0 (copy)"
      ],
      "stack_out": [
        "counter#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "required_a#0",
        "required_b#0",
        "x#0",
        "y#0",
        "z#1",
        "x#0",
        "x#0 (copy)"
      ]
    },
    "892": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "x#0",
        "x#0 (copy)"
      ],
      "stack_out": [
        "counter#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "required_a#0",
        "required_b#0",
        "x#0",
        "y#0",
        "z#1",
        "x#0",
        "x#0 (copy)",
        "1"
      ]
    },
    "893": {
      "op": "+",
      "defined_out": [
        "tmp%1#1",
        "x#0"
      ],
      "stack_out": [
        "counter#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "required_a#0",
        "required_b#0",
        "x#0",
        "y#0",
        "z#1",
        "x#0",
        "tmp%1#1"
      ]
    },
    "894": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2",
        "tmp%1#1",
        "x#0"
      ],
      "stack_out": [
        "counter#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "required_a#0",
        "required_b#0",
        "x#0",
        "y#0",
        "z#1",
        "x#0",
        "tmp%1#1",
        "2"
      ]
    },
    "895": {
      "op": "/",
      "defined_out": [
        "x#0",
        "y#0"
      ],
      "stack_out": [
        "counter#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "required_a#0",
        "required_b#0",
        "x#0",
        "y#0",
        "z#1",
        "x#0",
        "y#0"
      ]
    },
    "896": {
      "op": "frame_bury 6",
      "defined_out": [
        "x#0",
        "y#0"
      ],
      "stack_out": [
        "counter#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "required_a#0",
        "required_b#0",
        "x#0",
        "y#0",
        "z#1",
        "x#0"
      ]
    },
    "898": {
      "op": "intc_0 // 0",
      "defined_out": [
        "counter#0",
        "x#0",
        "y#0"
      ],
      "stack_out": [
        "counter#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "required_a#0",
        "required_b#0",
        "x#0",
        "y#0",
        "z#1",
        "x#0",
        "counter#0"
      ]
    },
    "899": {
      "op": "frame_bury 0",
      "defined_out": [
        "counter#0",
        "x#0",
        "y#0",
        "z#1"
      ],
      "stack_out": [
        "counter#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "required_a#0",
        "required_b#0",
        "x#0",
        "y#0",
        "z#1",
        "z#1"
      ]
    },
    "901": {
      "op": "frame_bury 7",
      "defined_out": [
        "counter#0",
        "x#0",
        "y#0",
        "z#1"
      ],
      "stack_out": [
        "counter#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "required_a#0",
        "required_b#0",
        "x#0",
        "y#0",
        "z#1"
      ]
    },
    "903": {
      "block": "add_liquidity_while_top@15",
      "stack_in": [
        "counter#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "required_a#0",
        "required_b#0",
        "x#0",
        "y#0",
        "z#1"
      ],
      "op": "frame_dig 6",
      "defined_out": [
        "y#0"
      ],
      "stack_out": [
        "counter#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "required_a#0",
        "required_b#0",
        "x#0",
        "y#0",
        "z#1",
        "y#0"
      ]
    },
    "905": {
      "op": "frame_dig 7",
      "defined_out": [
        "y#0",
        "z#1"
      ],
      "stack_out": [
        "counter#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "required_a#0",
        "required_b#0",
        "x#0",
        "y#0",
        "z#1",
        "y#0",
        "z#1"
      ]
    },
    "907": {
      "op": "<",
      "defined_out": [
        "tmp%2#1",
        "y#0",
        "z#1"
      ],
      "stack_out": [
        "counter#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "required_a#0",
        "required_b#0",
        "x#0",
        "y#0",
        "z#1",
        "tmp%2#1"
      ]
    },
    "908": {
      "op": "bz add_liquidity_after_while@18",
      "stack_out": [
        "counter#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "required_a#0",
        "required_b#0",
        "x#0",
        "y#0",
        "z#1"
      ]
    },
    "911": {
      "op": "frame_dig 0",
      "defined_out": [
        "counter#0",
        "y#0",
        "z#1"
      ],
      "stack_out": [
        "counter#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "required_a#0",
        "required_b#0",
        "x#0",
        "y#0",
        "z#1",
        "counter#0"
      ]
    },
    "913": {
      "op": "pushint 10 // 10",
      "defined_out": [
        "10",
        "counter#0",
        "y#0",
        "z#1"
      ],
      "stack_out": [
        "counter#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "required_a#0",
        "required_b#0",
        "x#0",
        "y#0",
        "z#1",
        "counter#0",
        "10"
      ]
    },
    "915": {
      "op": "<",
      "defined_out": [
        "counter#0",
        "tmp%3#1",
        "y#0",
        "z#1"
      ],
      "stack_out": [
        "counter#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "required_a#0",
        "required_b#0",
        "x#0",
        "y#0",
        "z#1",
        "tmp%3#1"
      ]
    },
    "916": {
      "op": "bz add_liquidity_after_while@18",
      "stack_out": [
        "counter#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "required_a#0",
        "required_b#0",
        "x#0",
        "y#0",
        "z#1"
      ]
    },
    "919": {
      "op": "frame_dig 5",
      "defined_out": [
        "counter#0",
        "x#0",
        "y#0",
        "z#1"
      ],
      "stack_out": [
        "counter#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "required_a#0",
        "required_b#0",
        "x#0",
        "y#0",
        "z#1",
        "x#0"
      ]
    },
    "921": {
      "op": "frame_dig 6",
      "stack_out": [
        "counter#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "required_a#0",
        "required_b#0",
        "x#0",
        "y#0",
        "z#1",
        "x#0",
        "y#0"
      ]
    },
    "923": {
      "op": "dup",
      "defined_out": [
        "counter#0",
        "x#0",
        "y#0",
        "y#0 (copy)",
        "z#1"
      ],
      "stack_out": [
        "counter#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "required_a#0",
        "required_b#0",
        "x#0",
        "y#0",
        "z#1",
        "x#0",
        "y#0 (copy)",
        "y#0 (copy)"
      ]
    },
    "924": {
      "op": "cover 2",
      "stack_out": [
        "counter#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "required_a#0",
        "required_b#0",
        "x#0",
        "y#0",
        "z#1",
        "y#0",
        "x#0",
        "y#0 (copy)"
      ]
    },
    "926": {
      "op": "/",
      "defined_out": [
        "counter#0",
        "tmp%4#1",
        "x#0",
        "y#0",
        "z#1"
      ],
      "stack_out": [
        "counter#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "required_a#0",
        "required_b#0",
        "x#0",
        "y#0",
        "z#1",
        "y#0",
        "tmp%4#1"
      ]
    },
    "927": {
      "op": "dig 1",
      "stack_out": [
        "counter#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "required_a#0",
        "required_b#0",
        "x#0",
        "y#0",
        "z#1",
        "y#0",
        "tmp%4#1",
        "y#0 (copy)"
      ]
    },
    "929": {
      "op": "+",
      "defined_out": [
        "counter#0",
        "tmp%5#1",
        "x#0",
        "y#0",
        "z#1"
      ],
      "stack_out": [
        "counter#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "required_a#0",
        "required_b#0",
        "x#0",
        "y#0",
        "z#1",
        "y#0",
        "tmp%5#1"
      ]
    },
    "930": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2",
        "counter#0",
        "tmp%5#1",
        "x#0",
        "y#0",
        "z#1"
      ],
      "stack_out": [
        "counter#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "required_a#0",
        "required_b#0",
        "x#0",
        "y#0",
        "z#1",
        "y#0",
        "tmp%5#1",
        "2"
      ]
    },
    "931": {
      "op": "/",
      "defined_out": [
        "counter#0",
        "x#0",
        "y#0",
        "y#2",
        "z#1"
      ],
      "stack_out": [
        "counter#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "required_a#0",
        "required_b#0",
        "x#0",
        "y#0",
        "z#1",
        "y#0",
        "y#2"
      ]
    },
    "932": {
      "op": "frame_dig 0",
      "stack_out": [
        "counter#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "required_a#0",
        "required_b#0",
        "x#0",
        "y#0",
        "z#1",
        "y#0",
        "y#2",
        "counter#0"
      ]
    },
    "934": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "counter#0",
        "x#0",
        "y#0",
        "y#2",
        "z#1"
      ],
      "stack_out": [
        "counter#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "required_a#0",
        "required_b#0",
        "x#0",
        "y#0",
        "z#1",
        "y#0",
        "y#2",
        "counter#0",
        "1"
      ]
    },
    "935": {
      "op": "+",
      "stack_out": [
        "counter#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "required_a#0",
        "required_b#0",
        "x#0",
        "y#0",
        "z#1",
        "y#0",
        "y#2",
        "counter#0"
      ]
    },
    "936": {
      "op": "frame_bury 0",
      "defined_out": [
        "counter#0",
        "x#0",
        "y#0",
        "y#2",
        "z#1"
      ],
      "stack_out": [
        "counter#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "required_a#0",
        "required_b#0",
        "x#0",
        "y#0",
        "z#1",
        "y#0",
        "y#2"
      ]
    },
    "938": {
      "op": "frame_bury 6"
    },
    "940": {
      "op": "frame_bury 7",
      "defined_out": [
        "counter#0",
        "x#0",
        "y#0",
        "z#1"
      ],
      "stack_out": [
        "counter#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "required_a#0",
        "required_b#0",
        "x#0",
        "y#0",
        "z#1"
      ]
    },
    "942": {
      "op": "b add_liquidity_while_top@15"
    },
    "945": {
      "block": "add_liquidity_after_while@18",
      "stack_in": [
        "counter#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "required_a#0",
        "required_b#0",
        "x#0",
        "y#0",
        "z#1"
      ],
      "op": "frame_dig 7",
      "defined_out": [
        "liquidity_tokens#0"
      ],
      "stack_out": [
        "counter#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "required_a#0",
        "required_b#0",
        "x#0",
        "y#0",
        "z#1",
        "liquidity_tokens#0"
      ]
    },
    "947": {
      "op": "b add_liquidity_after_inlined_smart_contracts.simple_amm.contract.SimpleAMM._sqrt@19"
    },
    "950": {
      "block": "add_liquidity_else_body@7",
      "stack_in": [
        "counter#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "required_a#0",
        "required_b#0",
        "x#0",
        "y#0",
        "z#1"
      ],
      "op": "frame_dig -2",
      "defined_out": [
        "amount_a#0 (copy)"
      ],
      "stack_out": [
        "counter#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "required_a#0",
        "required_b#0",
        "x#0",
        "y#0",
        "z#1",
        "amount_a#0 (copy)"
      ]
    },
    "952": {
      "op": "frame_dig 2",
      "defined_out": [
        "amount_a#0 (copy)",
        "current_reserve_b#0"
      ],
      "stack_out": [
        "counter#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "required_a#0",
        "required_b#0",
        "x#0",
        "y#0",
        "z#1",
        "amount_a#0 (copy)",
        "current_reserve_b#0"
      ]
    },
    "954": {
      "op": "dup",
      "defined_out": [
        "amount_a#0 (copy)",
        "current_reserve_b#0",
        "current_reserve_b#0 (copy)"
      ],
      "stack_out": [
        "counter#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "required_a#0",
        "required_b#0",
        "x#0",
        "y#0",
        "z#1",
        "amount_a#0 (copy)",
        "current_reserve_b#0 (copy)",
        "current_reserve_b#0 (copy)"
      ]
    },
    "955": {
      "op": "cover 2",
      "stack_out": [
        "counter#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "required_a#0",
        "required_b#0",
        "x#0",
        "y#0",
        "z#1",
        "current_reserve_b#0",
        "amount_a#0 (copy)",
        "current_reserve_b#0 (copy)"
      ]
    },
    "957": {
      "op": "*",
      "defined_out": [
        "current_reserve_b#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "counter#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "required_a#0",
        "required_b#0",
        "x#0",
        "y#0",
        "z#1",
        "current_reserve_b#0",
        "tmp%7#0"
      ]
    },
    "958": {
      "op": "frame_dig 1",
      "defined_out": [
        "current_reserve_a#0",
        "current_reserve_b#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "counter#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "required_a#0",
        "required_b#0",
        "x#0",
        "y#0",
        "z#1",
        "current_reserve_b#0",
        "tmp%7#0",
        "current_reserve_a#0"
      ]
    },
    "960": {
      "op": "dup",
      "defined_out": [
        "current_reserve_a#0",
        "current_reserve_a#0 (copy)",
        "current_reserve_b#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "counter#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "required_a#0",
        "required_b#0",
        "x#0",
        "y#0",
        "z#1",
        "current_reserve_b#0",
        "tmp%7#0",
        "current_reserve_a#0 (copy)",
        "current_reserve_a#0 (copy)"
      ]
    },
    "961": {
      "op": "cover 2",
      "stack_out": [
        "counter#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "required_a#0",
        "required_b#0",
        "x#0",
        "y#0",
        "z#1",
        "current_reserve_b#0",
        "current_reserve_a#0",
        "tmp%7#0",
        "current_reserve_a#0 (copy)"
      ]
    },
    "963": {
      "op": "/",
      "defined_out": [
        "current_reserve_a#0",
        "current_reserve_b#0",
        "required_b#0"
      ],
      "stack_out": [
        "counter#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "required_a#0",
        "required_b#0",
        "x#0",
        "y#0",
        "z#1",
        "current_reserve_b#0",
        "current_reserve_a#0",
        "required_b#0"
      ]
    },
    "964": {
      "op": "dup",
      "stack_out": [
        "counter#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "required_a#0",
        "required_b#0",
        "x#0",
        "y#0",
        "z#1",
        "current_reserve_b#0",
        "current_reserve_a#0",
        "required_b#0",
        "required_b#0 (copy)"
      ]
    },
    "965": {
      "op": "cover 2",
      "stack_out": [
        "counter#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "required_a#0",
        "required_b#0",
        "x#0",
        "y#0",
        "z#1",
        "current_reserve_b#0",
        "required_b#0",
        "current_reserve_a#0",
        "required_b#0"
      ]
    },
    "967": {
      "op": "frame_bury 4",
      "defined_out": [
        "current_reserve_a#0",
        "current_reserve_b#0",
        "required_b#0"
      ],
      "stack_out": [
        "counter#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "required_a#0",
        "required_b#0",
        "x#0",
        "y#0",
        "z#1",
        "current_reserve_b#0",
        "required_b#0",
        "current_reserve_a#0"
      ]
    },
    "969": {
      "op": "frame_dig -1",
      "defined_out": [
        "amount_b#0 (copy)",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "required_b#0"
      ],
      "stack_out": [
        "counter#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "required_a#0",
        "required_b#0",
        "x#0",
        "y#0",
        "z#1",
        "current_reserve_b#0",
        "required_b#0",
        "current_reserve_a#0",
        "amount_b#0 (copy)"
      ]
    },
    "971": {
      "op": "*",
      "defined_out": [
        "current_reserve_a#0",
        "current_reserve_b#0",
        "required_b#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "counter#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "required_a#0",
        "required_b#0",
        "x#0",
        "y#0",
        "z#1",
        "current_reserve_b#0",
        "required_b#0",
        "tmp%8#0"
      ]
    },
    "972": {
      "op": "uncover 2",
      "stack_out": [
        "counter#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "required_a#0",
        "required_b#0",
        "x#0",
        "y#0",
        "z#1",
        "required_b#0",
        "tmp%8#0",
        "current_reserve_b#0"
      ]
    },
    "974": {
      "op": "/",
      "defined_out": [
        "current_reserve_a#0",
        "current_reserve_b#0",
        "required_a#0",
        "required_b#0"
      ],
      "stack_out": [
        "counter#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "required_a#0",
        "required_b#0",
        "x#0",
        "y#0",
        "z#1",
        "required_b#0",
        "required_a#0"
      ]
    },
    "975": {
      "op": "frame_bury 3",
      "defined_out": [
        "current_reserve_a#0",
        "current_reserve_b#0",
        "required_a#0",
        "required_b#0"
      ],
      "stack_out": [
        "counter#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "required_a#0",
        "required_b#0",
        "x#0",
        "y#0",
        "z#1",
        "required_b#0"
      ]
    },
    "977": {
      "op": "frame_dig -1",
      "stack_out": [
        "counter#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "required_a#0",
        "required_b#0",
        "x#0",
        "y#0",
        "z#1",
        "required_b#0",
        "amount_b#0 (copy)"
      ]
    },
    "979": {
      "op": "<=",
      "defined_out": [
        "current_reserve_a#0",
        "current_reserve_b#0",
        "required_a#0",
        "required_b#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "counter#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "required_a#0",
        "required_b#0",
        "x#0",
        "y#0",
        "z#1",
        "tmp%9#0"
      ]
    },
    "980": {
      "op": "bz add_liquidity_else_body@9",
      "stack_out": [
        "counter#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "required_a#0",
        "required_b#0",
        "x#0",
        "y#0",
        "z#1"
      ]
    },
    "983": {
      "op": "frame_dig 1",
      "stack_out": [
        "counter#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "required_a#0",
        "required_b#0",
        "x#0",
        "y#0",
        "z#1",
        "current_reserve_a#0"
      ]
    },
    "985": {
      "op": "dup",
      "stack_out": [
        "counter#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "required_a#0",
        "required_b#0",
        "x#0",
        "y#0",
        "z#1",
        "current_reserve_a#0",
        "current_reserve_a#0 (copy)"
      ]
    },
    "986": {
      "op": "frame_dig -2",
      "stack_out": [
        "counter#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "required_a#0",
        "required_b#0",
        "x#0",
        "y#0",
        "z#1",
        "current_reserve_a#0",
        "current_reserve_a#0 (copy)",
        "amount_a#0 (copy)"
      ]
    },
    "988": {
      "op": "+",
      "defined_out": [
        "current_reserve_a#0",
        "current_reserve_b#0",
        "materialized_values%0#0",
        "required_a#0",
        "required_b#0"
      ],
      "stack_out": [
        "counter#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "required_a#0",
        "required_b#0",
        "x#0",
        "y#0",
        "z#1",
        "current_reserve_a#0",
        "materialized_values%0#0"
      ]
    },
    "989": {
      "op": "bytec_0 // \"reserve_a\"",
      "defined_out": [
        "\"reserve_a\"",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "materialized_values%0#0",
        "required_a#0",
        "required_b#0"
      ],
      "stack_out": [
        "counter#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "required_a#0",
        "required_b#0",
        "x#0",
        "y#0",
        "z#1",
        "current_reserve_a#0",
        "materialized_values%0#0",
        "\"reserve_a\""
      ]
    },
    "990": {
      "op": "swap",
      "stack_out": [
        "counter#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "required_a#0",
        "required_b#0",
        "x#0",
        "y#0",
        "z#1",
        "current_reserve_a#0",
        "\"reserve_a\"",
        "materialized_values%0#0"
      ]
    },
    "991": {
      "op": "app_global_put",
      "stack_out": [
        "counter#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "required_a#0",
        "required_b#0",
        "x#0",
        "y#0",
        "z#1",
        "current_reserve_a#0"
      ]
    },
    "992": {
      "op": "frame_dig 2",
      "stack_out": [
        "counter#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "required_a#0",
        "required_b#0",
        "x#0",
        "y#0",
        "z#1",
        "current_reserve_a#0",
        "current_reserve_b#0"
      ]
    },
    "994": {
      "op": "frame_dig 4",
      "stack_out": [
        "counter#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "required_a#0",
        "required_b#0",
        "x#0",
        "y#0",
        "z#1",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "required_b#0"
      ]
    },
    "996": {
      "op": "+",
      "defined_out": [
        "current_reserve_a#0",
        "current_reserve_b#0",
        "materialized_values%1#0",
        "required_a#0",
        "required_b#0"
      ],
      "stack_out": [
        "counter#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "required_a#0",
        "required_b#0",
        "x#0",
        "y#0",
        "z#1",
        "current_reserve_a#0",
        "materialized_values%1#0"
      ]
    },
    "997": {
      "op": "bytec_1 // \"reserve_b\"",
      "defined_out": [
        "\"reserve_b\"",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "materialized_values%1#0",
        "required_a#0",
        "required_b#0"
      ],
      "stack_out": [
        "counter#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "required_a#0",
        "required_b#0",
        "x#0",
        "y#0",
        "z#1",
        "current_reserve_a#0",
        "materialized_values%1#0",
        "\"reserve_b\""
      ]
    },
    "998": {
      "op": "swap",
      "stack_out": [
        "counter#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "required_a#0",
        "required_b#0",
        "x#0",
        "y#0",
        "z#1",
        "current_reserve_a#0",
        "\"reserve_b\"",
        "materialized_values%1#0"
      ]
    },
    "999": {
      "op": "app_global_put",
      "stack_out": [
        "counter#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "required_a#0",
        "required_b#0",
        "x#0",
        "y#0",
        "z#1",
        "current_reserve_a#0"
      ]
    },
    "1000": {
      "op": "intc_0 // 0",
      "stack_out": [
        "counter#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "required_a#0",
        "required_b#0",
        "x#0",
        "y#0",
        "z#1",
        "current_reserve_a#0",
        "0"
      ]
    },
    "1001": {
      "op": "bytec_3 // \"total_liquidity\"",
      "defined_out": [
        "\"total_liquidity\"",
        "0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "required_a#0",
        "required_b#0"
      ],
      "stack_out": [
        "counter#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "required_a#0",
        "required_b#0",
        "x#0",
        "y#0",
        "z#1",
        "current_reserve_a#0",
        "0",
        "\"total_liquidity\""
      ]
    },
    "1002": {
      "op": "app_global_get_ex",
      "defined_out": [
        "current_reserve_a#0",
        "current_reserve_b#0",
        "maybe_exists%3#0",
        "maybe_value%3#0",
        "required_a#0",
        "required_b#0"
      ],
      "stack_out": [
        "counter#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "required_a#0",
        "required_b#0",
        "x#0",
        "y#0",
        "z#1",
        "current_reserve_a#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "1003": {
      "error": "check self.total_liquidity exists",
      "op": "assert // check self.total_liquidity exists",
      "stack_out": [
        "counter#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "required_a#0",
        "required_b#0",
        "x#0",
        "y#0",
        "z#1",
        "current_reserve_a#0",
        "maybe_value%3#0"
      ]
    },
    "1004": {
      "op": "frame_dig -2",
      "stack_out": [
        "counter#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "required_a#0",
        "required_b#0",
        "x#0",
        "y#0",
        "z#1",
        "current_reserve_a#0",
        "maybe_value%3#0",
        "amount_a#0 (copy)"
      ]
    },
    "1006": {
      "op": "*",
      "defined_out": [
        "current_reserve_a#0",
        "current_reserve_b#0",
        "required_a#0",
        "required_b#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "counter#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "required_a#0",
        "required_b#0",
        "x#0",
        "y#0",
        "z#1",
        "current_reserve_a#0",
        "tmp%10#0"
      ]
    },
    "1007": {
      "op": "swap",
      "stack_out": [
        "counter#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "required_a#0",
        "required_b#0",
        "x#0",
        "y#0",
        "z#1",
        "tmp%10#0",
        "current_reserve_a#0"
      ]
    },
    "1008": {
      "op": "/",
      "defined_out": [
        "current_reserve_a#0",
        "current_reserve_b#0",
        "liquidity_tokens#0",
        "required_a#0",
        "required_b#0"
      ],
      "stack_out": [
        "counter#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "required_a#0",
        "required_b#0",
        "x#0",
        "y#0",
        "z#1",
        "liquidity_tokens#0"
      ]
    },
    "1009": {
      "block": "add_liquidity_after_if_else@10",
      "stack_in": [
        "counter#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "required_a#0",
        "required_b#0",
        "x#0",
        "y#0",
        "z#1",
        "liquidity_tokens#0"
      ],
      "op": "txn Sender",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "counter#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "required_a#0",
        "required_b#0",
        "x#0",
        "y#0",
        "z#1",
        "liquidity_tokens#0",
        "tmp%12#0"
      ]
    },
    "1011": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%12#0"
      ],
      "stack_out": [
        "counter#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "required_a#0",
        "required_b#0",
        "x#0",
        "y#0",
        "z#1",
        "liquidity_tokens#0",
        "tmp%12#0",
        "0"
      ]
    },
    "1012": {
      "op": "bytec 5 // \"liquidity_balance\"",
      "defined_out": [
        "\"liquidity_balance\"",
        "0",
        "tmp%12#0"
      ],
      "stack_out": [
        "counter#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "required_a#0",
        "required_b#0",
        "x#0",
        "y#0",
        "z#1",
        "liquidity_tokens#0",
        "tmp%12#0",
        "0",
        "\"liquidity_balance\""
      ]
    },
    "1014": {
      "op": "app_local_get_ex",
      "defined_out": [
        "maybe_exists%5#0",
        "maybe_value%5#0"
      ],
      "stack_out": [
        "counter#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "required_a#0",
        "required_b#0",
        "x#0",
        "y#0",
        "z#1",
        "liquidity_tokens#0",
        "maybe_value%5#0",
        "maybe_exists%5#0"
      ]
    },
    "1015": {
      "error": "check self.liquidity_balance exists for account",
      "op": "assert // check self.liquidity_balance exists for account",
      "stack_out": [
        "counter#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "required_a#0",
        "required_b#0",
        "x#0",
        "y#0",
        "z#1",
        "liquidity_tokens#0",
        "maybe_value%5#0"
      ]
    },
    "1016": {
      "op": "dig 1",
      "defined_out": [
        "liquidity_tokens#0",
        "liquidity_tokens#0 (copy)",
        "maybe_value%5#0"
      ],
      "stack_out": [
        "counter#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "required_a#0",
        "required_b#0",
        "x#0",
        "y#0",
        "z#1",
        "liquidity_tokens#0",
        "maybe_value%5#0",
        "liquidity_tokens#0 (copy)"
      ]
    },
    "1018": {
      "op": "+",
      "defined_out": [
        "liquidity_tokens#0",
        "materialized_values%4#0"
      ],
      "stack_out": [
        "counter#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "required_a#0",
        "required_b#0",
        "x#0",
        "y#0",
        "z#1",
        "liquidity_tokens#0",
        "materialized_values%4#0"
      ]
    },
    "1019": {
      "op": "txn Sender",
      "defined_out": [
        "liquidity_tokens#0",
        "materialized_values%4#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "counter#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "required_a#0",
        "required_b#0",
        "x#0",
        "y#0",
        "z#1",
        "liquidity_tokens#0",
        "materialized_values%4#0",
        "tmp%13#0"
      ]
    },
    "1021": {
      "op": "bytec 5 // \"liquidity_balance\"",
      "stack_out": [
        "counter#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "required_a#0",
        "required_b#0",
        "x#0",
        "y#0",
        "z#1",
        "liquidity_tokens#0",
        "materialized_values%4#0",
        "tmp%13#0",
        "\"liquidity_balance\""
      ]
    },
    "1023": {
      "op": "uncover 2",
      "stack_out": [
        "counter#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "required_a#0",
        "required_b#0",
        "x#0",
        "y#0",
        "z#1",
        "liquidity_tokens#0",
        "tmp%13#0",
        "\"liquidity_balance\"",
        "materialized_values%4#0"
      ]
    },
    "1025": {
      "op": "app_local_put",
      "stack_out": [
        "counter#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "required_a#0",
        "required_b#0",
        "x#0",
        "y#0",
        "z#1",
        "liquidity_tokens#0"
      ]
    },
    "1026": {
      "op": "intc_0 // 0",
      "stack_out": [
        "counter#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "required_a#0",
        "required_b#0",
        "x#0",
        "y#0",
        "z#1",
        "liquidity_tokens#0",
        "0"
      ]
    },
    "1027": {
      "op": "bytec_3 // \"total_liquidity\"",
      "defined_out": [
        "\"total_liquidity\"",
        "0",
        "liquidity_tokens#0"
      ],
      "stack_out": [
        "counter#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "required_a#0",
        "required_b#0",
        "x#0",
        "y#0",
        "z#1",
        "liquidity_tokens#0",
        "0",
        "\"total_liquidity\""
      ]
    },
    "1028": {
      "op": "app_global_get_ex",
      "defined_out": [
        "liquidity_tokens#0",
        "maybe_exists%6#0",
        "maybe_value%6#0"
      ],
      "stack_out": [
        "counter#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "required_a#0",
        "required_b#0",
        "x#0",
        "y#0",
        "z#1",
        "liquidity_tokens#0",
        "maybe_value%6#0",
        "maybe_exists%6#0"
      ]
    },
    "1029": {
      "error": "check self.total_liquidity exists",
      "op": "assert // check self.total_liquidity exists",
      "stack_out": [
        "counter#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "required_a#0",
        "required_b#0",
        "x#0",
        "y#0",
        "z#1",
        "liquidity_tokens#0",
        "maybe_value%6#0"
      ]
    },
    "1030": {
      "op": "+",
      "defined_out": [
        "materialized_values%5#0"
      ],
      "stack_out": [
        "counter#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "required_a#0",
        "required_b#0",
        "x#0",
        "y#0",
        "z#1",
        "materialized_values%5#0"
      ]
    },
    "1031": {
      "op": "bytec_3 // \"total_liquidity\"",
      "stack_out": [
        "counter#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "required_a#0",
        "required_b#0",
        "x#0",
        "y#0",
        "z#1",
        "materialized_values%5#0",
        "\"total_liquidity\""
      ]
    },
    "1032": {
      "op": "swap",
      "stack_out": [
        "counter#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "required_a#0",
        "required_b#0",
        "x#0",
        "y#0",
        "z#1",
        "\"total_liquidity\"",
        "materialized_values%5#0"
      ]
    },
    "1033": {
      "op": "app_global_put",
      "stack_out": [
        "counter#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "required_a#0",
        "required_b#0",
        "x#0",
        "y#0",
        "z#1"
      ]
    },
    "1034": {
      "op": "b add_liquidity_after_if_else@11"
    },
    "1037": {
      "block": "add_liquidity_else_body@9",
      "stack_in": [
        "counter#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "required_a#0",
        "required_b#0",
        "x#0",
        "y#0",
        "z#1"
      ],
      "op": "frame_dig 1",
      "defined_out": [
        "current_reserve_a#0"
      ],
      "stack_out": [
        "counter#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "required_a#0",
        "required_b#0",
        "x#0",
        "y#0",
        "z#1",
        "current_reserve_a#0"
      ]
    },
    "1039": {
      "op": "frame_dig 3",
      "defined_out": [
        "current_reserve_a#0",
        "required_a#0"
      ],
      "stack_out": [
        "counter#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "required_a#0",
        "required_b#0",
        "x#0",
        "y#0",
        "z#1",
        "current_reserve_a#0",
        "required_a#0"
      ]
    },
    "1041": {
      "op": "+",
      "defined_out": [
        "current_reserve_a#0",
        "materialized_values%2#0",
        "required_a#0"
      ],
      "stack_out": [
        "counter#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "required_a#0",
        "required_b#0",
        "x#0",
        "y#0",
        "z#1",
        "materialized_values%2#0"
      ]
    },
    "1042": {
      "op": "bytec_0 // \"reserve_a\"",
      "defined_out": [
        "\"reserve_a\"",
        "current_reserve_a#0",
        "materialized_values%2#0",
        "required_a#0"
      ],
      "stack_out": [
        "counter#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "required_a#0",
        "required_b#0",
        "x#0",
        "y#0",
        "z#1",
        "materialized_values%2#0",
        "\"reserve_a\""
      ]
    },
    "1043": {
      "op": "swap",
      "stack_out": [
        "counter#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "required_a#0",
        "required_b#0",
        "x#0",
        "y#0",
        "z#1",
        "\"reserve_a\"",
        "materialized_values%2#0"
      ]
    },
    "1044": {
      "op": "app_global_put",
      "stack_out": [
        "counter#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "required_a#0",
        "required_b#0",
        "x#0",
        "y#0",
        "z#1"
      ]
    },
    "1045": {
      "op": "frame_dig 2",
      "defined_out": [
        "current_reserve_a#0",
        "current_reserve_b#0",
        "required_a#0"
      ],
      "stack_out": [
        "counter#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "required_a#0",
        "required_b#0",
        "x#0",
        "y#0",
        "z#1",
        "current_reserve_b#0"
      ]
    },
    "1047": {
      "op": "dup",
      "defined_out": [
        "current_reserve_a#0",
        "current_reserve_b#0",
        "current_reserve_b#0 (copy)",
        "required_a#0"
      ],
      "stack_out": [
        "counter#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "required_a#0",
        "required_b#0",
        "x#0",
        "y#0",
        "z#1",
        "current_reserve_b#0",
        "current_reserve_b#0 (copy)"
      ]
    },
    "1048": {
      "op": "frame_dig -1",
      "defined_out": [
        "amount_b#0 (copy)",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "current_reserve_b#0 (copy)",
        "required_a#0"
      ],
      "stack_out": [
        "counter#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "required_a#0",
        "required_b#0",
        "x#0",
        "y#0",
        "z#1",
        "current_reserve_b#0",
        "current_reserve_b#0 (copy)",
        "amount_b#0 (copy)"
      ]
    },
    "1050": {
      "op": "+",
      "defined_out": [
        "current_reserve_a#0",
        "current_reserve_b#0",
        "materialized_values%3#0",
        "required_a#0"
      ],
      "stack_out": [
        "counter#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "required_a#0",
        "required_b#0",
        "x#0",
        "y#0",
        "z#1",
        "current_reserve_b#0",
        "materialized_values%3#0"
      ]
    },
    "1051": {
      "op": "bytec_1 // \"reserve_b\"",
      "defined_out": [
        "\"reserve_b\"",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "materialized_values%3#0",
        "required_a#0"
      ],
      "stack_out": [
        "counter#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "required_a#0",
        "required_b#0",
        "x#0",
        "y#0",
        "z#1",
        "current_reserve_b#0",
        "materialized_values%3#0",
        "\"reserve_b\""
      ]
    },
    "1052": {
      "op": "swap",
      "stack_out": [
        "counter#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "required_a#0",
        "required_b#0",
        "x#0",
        "y#0",
        "z#1",
        "current_reserve_b#0",
        "\"reserve_b\"",
        "materialized_values%3#0"
      ]
    },
    "1053": {
      "op": "app_global_put",
      "stack_out": [
        "counter#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "required_a#0",
        "required_b#0",
        "x#0",
        "y#0",
        "z#1",
        "current_reserve_b#0"
      ]
    },
    "1054": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "required_a#0"
      ],
      "stack_out": [
        "counter#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "required_a#0",
        "required_b#0",
        "x#0",
        "y#0",
        "z#1",
        "current_reserve_b#0",
        "0"
      ]
    },
    "1055": {
      "op": "bytec_3 // \"total_liquidity\"",
      "defined_out": [
        "\"total_liquidity\"",
        "0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "required_a#0"
      ],
      "stack_out": [
        "counter#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "required_a#0",
        "required_b#0",
        "x#0",
        "y#0",
        "z#1",
        "current_reserve_b#0",
        "0",
        "\"total_liquidity\""
      ]
    },
    "1056": {
      "op": "app_global_get_ex",
      "defined_out": [
        "current_reserve_a#0",
        "current_reserve_b#0",
        "maybe_exists%4#0",
        "maybe_value%4#0",
        "required_a#0"
      ],
      "stack_out": [
        "counter#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "required_a#0",
        "required_b#0",
        "x#0",
        "y#0",
        "z#1",
        "current_reserve_b#0",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "1057": {
      "error": "check self.total_liquidity exists",
      "op": "assert // check self.total_liquidity exists",
      "stack_out": [
        "counter#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "required_a#0",
        "required_b#0",
        "x#0",
        "y#0",
        "z#1",
        "current_reserve_b#0",
        "maybe_value%4#0"
      ]
    },
    "1058": {
      "op": "frame_dig -1",
      "stack_out": [
        "counter#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "required_a#0",
        "required_b#0",
        "x#0",
        "y#0",
        "z#1",
        "current_reserve_b#0",
        "maybe_value%4#0",
        "amount_b#0 (copy)"
      ]
    },
    "1060": {
      "op": "*",
      "defined_out": [
        "current_reserve_a#0",
        "current_reserve_b#0",
        "required_a#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "counter#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "required_a#0",
        "required_b#0",
        "x#0",
        "y#0",
        "z#1",
        "current_reserve_b#0",
        "tmp%11#0"
      ]
    },
    "1061": {
      "op": "swap",
      "stack_out": [
        "counter#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "required_a#0",
        "required_b#0",
        "x#0",
        "y#0",
        "z#1",
        "tmp%11#0",
        "current_reserve_b#0"
      ]
    },
    "1062": {
      "op": "/",
      "defined_out": [
        "current_reserve_a#0",
        "current_reserve_b#0",
        "liquidity_tokens#0",
        "required_a#0"
      ],
      "stack_out": [
        "counter#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "required_a#0",
        "required_b#0",
        "x#0",
        "y#0",
        "z#1",
        "liquidity_tokens#0"
      ]
    },
    "1063": {
      "op": "b add_liquidity_after_if_else@10"
    },
    "1066": {
      "block": "add_liquidity_bool_false@3",
      "stack_in": [
        "counter#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "required_a#0",
        "required_b#0",
        "x#0",
        "y#0",
        "z#1"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "counter#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "required_a#0",
        "required_b#0",
        "x#0",
        "y#0",
        "z#1",
        "and_result%0#0"
      ]
    },
    "1067": {
      "op": "b add_liquidity_bool_merge@4"
    },
    "1070": {
      "subroutine": "smart_contracts.simple_amm.contract.SimpleAMM.swap_a_for_b",
      "params": {
        "amount_in#0": "uint64"
      },
      "block": "swap_a_for_b",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "1073": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1074": {
      "op": "bytec 4 // \"is_paused\"",
      "defined_out": [
        "\"is_paused\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"is_paused\""
      ]
    },
    "1076": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1077": {
      "error": "check self.is_paused exists",
      "op": "assert // check self.is_paused exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "1078": {
      "op": "!",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1079": {
      "error": "AMM is paused",
      "op": "assert // AMM is paused",
      "stack_out": []
    },
    "1080": {
      "op": "frame_dig -1",
      "defined_out": [
        "amount_in#0 (copy)"
      ],
      "stack_out": [
        "amount_in#0 (copy)"
      ]
    },
    "1082": {
      "error": "Amount must be positive",
      "op": "assert // Amount must be positive",
      "stack_out": []
    },
    "1083": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "1084": {
      "op": "bytec_0 // \"reserve_a\"",
      "defined_out": [
        "\"reserve_a\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"reserve_a\""
      ]
    },
    "1085": {
      "op": "app_global_get_ex",
      "defined_out": [
        "current_reserve_a#0",
        "maybe_exists%1#0"
      ],
      "stack_out": [
        "current_reserve_a#0",
        "maybe_exists%1#0"
      ]
    },
    "1086": {
      "op": "swap",
      "stack_out": [
        "maybe_exists%1#0",
        "current_reserve_a#0"
      ]
    },
    "1087": {
      "op": "dup",
      "stack_out": [
        "maybe_exists%1#0",
        "current_reserve_a#0",
        "current_reserve_a#0 (copy)"
      ]
    },
    "1088": {
      "op": "uncover 2",
      "defined_out": [
        "current_reserve_a#0",
        "maybe_exists%1#0"
      ],
      "stack_out": [
        "current_reserve_a#0",
        "current_reserve_a#0",
        "maybe_exists%1#0"
      ]
    },
    "1090": {
      "error": "check self.reserve_a exists",
      "op": "assert // check self.reserve_a exists",
      "stack_out": [
        "current_reserve_a#0",
        "current_reserve_a#0"
      ]
    },
    "1091": {
      "op": "intc_0 // 0",
      "stack_out": [
        "current_reserve_a#0",
        "current_reserve_a#0",
        "0"
      ]
    },
    "1092": {
      "op": "bytec_1 // \"reserve_b\"",
      "defined_out": [
        "\"reserve_b\"",
        "0",
        "current_reserve_a#0"
      ],
      "stack_out": [
        "current_reserve_a#0",
        "current_reserve_a#0",
        "0",
        "\"reserve_b\""
      ]
    },
    "1093": {
      "op": "app_global_get_ex",
      "defined_out": [
        "current_reserve_a#0",
        "current_reserve_b#0",
        "maybe_exists%2#0"
      ],
      "stack_out": [
        "current_reserve_a#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "maybe_exists%2#0"
      ]
    },
    "1094": {
      "op": "swap",
      "stack_out": [
        "current_reserve_a#0",
        "current_reserve_a#0",
        "maybe_exists%2#0",
        "current_reserve_b#0"
      ]
    },
    "1095": {
      "op": "cover 2",
      "defined_out": [
        "current_reserve_a#0",
        "current_reserve_b#0",
        "maybe_exists%2#0"
      ],
      "stack_out": [
        "current_reserve_a#0",
        "current_reserve_b#0",
        "current_reserve_a#0",
        "maybe_exists%2#0"
      ]
    },
    "1097": {
      "error": "check self.reserve_b exists",
      "op": "assert // check self.reserve_b exists",
      "stack_out": [
        "current_reserve_a#0",
        "current_reserve_b#0",
        "current_reserve_a#0"
      ]
    },
    "1098": {
      "op": "bz swap_a_for_b_bool_false@3",
      "stack_out": [
        "current_reserve_a#0",
        "current_reserve_b#0"
      ]
    },
    "1101": {
      "op": "frame_dig 1",
      "stack_out": [
        "current_reserve_a#0",
        "current_reserve_b#0",
        "current_reserve_b#0"
      ]
    },
    "1103": {
      "op": "bz swap_a_for_b_bool_false@3",
      "stack_out": [
        "current_reserve_a#0",
        "current_reserve_b#0"
      ]
    },
    "1106": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%0#0",
        "current_reserve_a#0",
        "current_reserve_b#0"
      ],
      "stack_out": [
        "current_reserve_a#0",
        "current_reserve_b#0",
        "and_result%0#0"
      ]
    },
    "1107": {
      "block": "swap_a_for_b_bool_merge@4",
      "stack_in": [
        "current_reserve_a#0",
        "current_reserve_b#0",
        "and_result%0#0"
      ],
      "error": "Insufficient liquidity",
      "op": "assert // Insufficient liquidity",
      "defined_out": [],
      "stack_out": [
        "current_reserve_a#0",
        "current_reserve_b#0"
      ]
    },
    "1108": {
      "op": "frame_dig -1",
      "defined_out": [
        "amount_in#0 (copy)"
      ],
      "stack_out": [
        "current_reserve_a#0",
        "current_reserve_b#0",
        "amount_in#0 (copy)"
      ]
    },
    "1110": {
      "op": "frame_dig 0",
      "defined_out": [
        "amount_in#0 (copy)",
        "current_reserve_a#0"
      ],
      "stack_out": [
        "current_reserve_a#0",
        "current_reserve_b#0",
        "amount_in#0 (copy)",
        "current_reserve_a#0"
      ]
    },
    "1112": {
      "op": "dup",
      "defined_out": [
        "amount_in#0 (copy)",
        "current_reserve_a#0",
        "current_reserve_a#0 (copy)"
      ],
      "stack_out": [
        "current_reserve_a#0",
        "current_reserve_b#0",
        "amount_in#0 (copy)",
        "current_reserve_a#0 (copy)",
        "current_reserve_a#0 (copy)"
      ]
    },
    "1113": {
      "op": "cover 2",
      "stack_out": [
        "current_reserve_a#0",
        "current_reserve_b#0",
        "current_reserve_a#0",
        "amount_in#0 (copy)",
        "current_reserve_a#0 (copy)"
      ]
    },
    "1115": {
      "op": "frame_dig 1",
      "defined_out": [
        "amount_in#0 (copy)",
        "current_reserve_a#0",
        "current_reserve_a#0 (copy)",
        "current_reserve_b#0"
      ],
      "stack_out": [
        "current_reserve_a#0",
        "current_reserve_b#0",
        "current_reserve_a#0",
        "amount_in#0 (copy)",
        "current_reserve_a#0 (copy)",
        "current_reserve_b#0"
      ]
    },
    "1117": {
      "op": "dup",
      "defined_out": [
        "amount_in#0 (copy)",
        "current_reserve_a#0",
        "current_reserve_a#0 (copy)",
        "current_reserve_b#0",
        "current_reserve_b#0 (copy)"
      ],
      "stack_out": [
        "current_reserve_a#0",
        "current_reserve_b#0",
        "current_reserve_a#0",
        "amount_in#0 (copy)",
        "current_reserve_a#0 (copy)",
        "current_reserve_b#0 (copy)",
        "current_reserve_b#0 (copy)"
      ]
    },
    "1118": {
      "op": "cover 3",
      "stack_out": [
        "current_reserve_a#0",
        "current_reserve_b#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "amount_in#0 (copy)",
        "current_reserve_a#0 (copy)",
        "current_reserve_b#0 (copy)"
      ]
    },
    "1120": {
      "callsub": "smart_contracts.simple_amm.contract.SimpleAMM._get_amount_out",
      "op": "callsub _get_amount_out",
      "defined_out": [
        "amount_out#0",
        "current_reserve_a#0",
        "current_reserve_b#0"
      ],
      "stack_out": [
        "current_reserve_a#0",
        "current_reserve_b#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "amount_out#0"
      ]
    },
    "1123": {
      "op": "dup",
      "defined_out": [
        "amount_out#0",
        "amount_out#0 (copy)",
        "current_reserve_a#0",
        "current_reserve_b#0"
      ],
      "stack_out": [
        "current_reserve_a#0",
        "current_reserve_b#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "amount_out#0",
        "amount_out#0 (copy)"
      ]
    },
    "1124": {
      "error": "Insufficient output amount",
      "op": "assert // Insufficient output amount",
      "stack_out": [
        "current_reserve_a#0",
        "current_reserve_b#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "amount_out#0"
      ]
    },
    "1125": {
      "op": "dup",
      "stack_out": [
        "current_reserve_a#0",
        "current_reserve_b#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "amount_out#0",
        "amount_out#0 (copy)"
      ]
    },
    "1126": {
      "op": "dig 2",
      "stack_out": [
        "current_reserve_a#0",
        "current_reserve_b#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "amount_out#0",
        "amount_out#0 (copy)",
        "current_reserve_b#0 (copy)"
      ]
    },
    "1128": {
      "op": "<=",
      "defined_out": [
        "amount_out#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "current_reserve_a#0",
        "current_reserve_b#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "amount_out#0",
        "tmp%5#0"
      ]
    },
    "1129": {
      "error": "Insufficient liquidity",
      "op": "assert // Insufficient liquidity",
      "stack_out": [
        "current_reserve_a#0",
        "current_reserve_b#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "amount_out#0"
      ]
    },
    "1130": {
      "op": "uncover 2",
      "stack_out": [
        "current_reserve_a#0",
        "current_reserve_b#0",
        "current_reserve_b#0",
        "amount_out#0",
        "current_reserve_a#0"
      ]
    },
    "1132": {
      "op": "frame_dig -1",
      "stack_out": [
        "current_reserve_a#0",
        "current_reserve_b#0",
        "current_reserve_b#0",
        "amount_out#0",
        "current_reserve_a#0",
        "amount_in#0 (copy)"
      ]
    },
    "1134": {
      "op": "+",
      "defined_out": [
        "amount_out#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "materialized_values%0#0"
      ],
      "stack_out": [
        "current_reserve_a#0",
        "current_reserve_b#0",
        "current_reserve_b#0",
        "amount_out#0",
        "materialized_values%0#0"
      ]
    },
    "1135": {
      "op": "bytec_0 // \"reserve_a\"",
      "defined_out": [
        "\"reserve_a\"",
        "amount_out#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "materialized_values%0#0"
      ],
      "stack_out": [
        "current_reserve_a#0",
        "current_reserve_b#0",
        "current_reserve_b#0",
        "amount_out#0",
        "materialized_values%0#0",
        "\"reserve_a\""
      ]
    },
    "1136": {
      "op": "swap",
      "stack_out": [
        "current_reserve_a#0",
        "current_reserve_b#0",
        "current_reserve_b#0",
        "amount_out#0",
        "\"reserve_a\"",
        "materialized_values%0#0"
      ]
    },
    "1137": {
      "op": "app_global_put",
      "stack_out": [
        "current_reserve_a#0",
        "current_reserve_b#0",
        "current_reserve_b#0",
        "amount_out#0"
      ]
    },
    "1138": {
      "op": "swap",
      "stack_out": [
        "current_reserve_a#0",
        "current_reserve_b#0",
        "amount_out#0",
        "current_reserve_b#0"
      ]
    },
    "1139": {
      "op": "dig 1",
      "stack_out": [
        "current_reserve_a#0",
        "current_reserve_b#0",
        "amount_out#0",
        "current_reserve_b#0",
        "amount_out#0 (copy)"
      ]
    },
    "1141": {
      "op": "-",
      "defined_out": [
        "amount_out#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "materialized_values%1#0"
      ],
      "stack_out": [
        "current_reserve_a#0",
        "current_reserve_b#0",
        "amount_out#0",
        "materialized_values%1#0"
      ]
    },
    "1142": {
      "op": "bytec_1 // \"reserve_b\"",
      "defined_out": [
        "\"reserve_b\"",
        "amount_out#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "materialized_values%1#0"
      ],
      "stack_out": [
        "current_reserve_a#0",
        "current_reserve_b#0",
        "amount_out#0",
        "materialized_values%1#0",
        "\"reserve_b\""
      ]
    },
    "1143": {
      "op": "swap",
      "stack_out": [
        "current_reserve_a#0",
        "current_reserve_b#0",
        "amount_out#0",
        "\"reserve_b\"",
        "materialized_values%1#0"
      ]
    },
    "1144": {
      "op": "app_global_put",
      "stack_out": [
        "current_reserve_a#0",
        "current_reserve_b#0",
        "amount_out#0"
      ]
    },
    "1145": {
      "op": "frame_dig -1",
      "stack_out": [
        "current_reserve_a#0",
        "current_reserve_b#0",
        "amount_out#0",
        "amount_in#0 (copy)"
      ]
    },
    "1147": {
      "op": "itob",
      "defined_out": [
        "amount_out#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "current_reserve_a#0",
        "current_reserve_b#0",
        "amount_out#0",
        "tmp%6#0"
      ]
    },
    "1148": {
      "op": "pushbytes 0x5377617020412d3e42202d20496e3a20",
      "defined_out": [
        "0x5377617020412d3e42202d20496e3a20",
        "amount_out#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "current_reserve_a#0",
        "current_reserve_b#0",
        "amount_out#0",
        "tmp%6#0",
        "0x5377617020412d3e42202d20496e3a20"
      ]
    },
    "1166": {
      "op": "swap",
      "stack_out": [
        "current_reserve_a#0",
        "current_reserve_b#0",
        "amount_out#0",
        "0x5377617020412d3e42202d20496e3a20",
        "tmp%6#0"
      ]
    },
    "1167": {
      "op": "concat",
      "defined_out": [
        "amount_out#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "current_reserve_a#0",
        "current_reserve_b#0",
        "amount_out#0",
        "tmp%7#0"
      ]
    },
    "1168": {
      "op": "bytec 12 // 0x204f75743a20",
      "defined_out": [
        "0x204f75743a20",
        "amount_out#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "current_reserve_a#0",
        "current_reserve_b#0",
        "amount_out#0",
        "tmp%7#0",
        "0x204f75743a20"
      ]
    },
    "1170": {
      "op": "concat",
      "defined_out": [
        "amount_out#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "current_reserve_a#0",
        "current_reserve_b#0",
        "amount_out#0",
        "tmp%8#0"
      ]
    },
    "1171": {
      "op": "swap",
      "stack_out": [
        "current_reserve_a#0",
        "current_reserve_b#0",
        "tmp%8#0",
        "amount_out#0"
      ]
    },
    "1172": {
      "op": "itob",
      "defined_out": [
        "current_reserve_a#0",
        "current_reserve_b#0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "current_reserve_a#0",
        "current_reserve_b#0",
        "tmp%8#0",
        "tmp%9#0"
      ]
    },
    "1173": {
      "op": "concat",
      "defined_out": [
        "current_reserve_a#0",
        "current_reserve_b#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "current_reserve_a#0",
        "current_reserve_b#0",
        "tmp%10#0"
      ]
    },
    "1174": {
      "op": "log",
      "stack_out": [
        "current_reserve_a#0",
        "current_reserve_b#0"
      ]
    },
    "1175": {
      "op": "bytec 13 // \"Swap completed successfully\"",
      "defined_out": [
        "\"Swap completed successfully\"",
        "current_reserve_a#0",
        "current_reserve_b#0"
      ],
      "stack_out": [
        "current_reserve_a#0",
        "current_reserve_b#0",
        "\"Swap completed successfully\""
      ]
    },
    "1177": {
      "op": "frame_bury 0"
    },
    "1179": {
      "retsub": true,
      "op": "retsub"
    },
    "1180": {
      "block": "swap_a_for_b_bool_false@3",
      "stack_in": [
        "current_reserve_a#0",
        "current_reserve_b#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "current_reserve_a#0",
        "current_reserve_b#0",
        "and_result%0#0"
      ]
    },
    "1181": {
      "op": "b swap_a_for_b_bool_merge@4"
    },
    "1184": {
      "subroutine": "smart_contracts.simple_amm.contract.SimpleAMM.swap_b_for_a",
      "params": {
        "amount_in#0": "uint64"
      },
      "block": "swap_b_for_a",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "1187": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1188": {
      "op": "bytec 4 // \"is_paused\"",
      "defined_out": [
        "\"is_paused\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"is_paused\""
      ]
    },
    "1190": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1191": {
      "error": "check self.is_paused exists",
      "op": "assert // check self.is_paused exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "1192": {
      "op": "!",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1193": {
      "error": "AMM is paused",
      "op": "assert // AMM is paused",
      "stack_out": []
    },
    "1194": {
      "op": "frame_dig -1",
      "defined_out": [
        "amount_in#0 (copy)"
      ],
      "stack_out": [
        "amount_in#0 (copy)"
      ]
    },
    "1196": {
      "error": "Amount must be positive",
      "op": "assert // Amount must be positive",
      "stack_out": []
    },
    "1197": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "1198": {
      "op": "bytec_0 // \"reserve_a\"",
      "defined_out": [
        "\"reserve_a\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"reserve_a\""
      ]
    },
    "1199": {
      "op": "app_global_get_ex",
      "defined_out": [
        "current_reserve_a#0",
        "maybe_exists%1#0"
      ],
      "stack_out": [
        "current_reserve_a#0",
        "maybe_exists%1#0"
      ]
    },
    "1200": {
      "op": "swap",
      "stack_out": [
        "maybe_exists%1#0",
        "current_reserve_a#0"
      ]
    },
    "1201": {
      "op": "dup",
      "stack_out": [
        "maybe_exists%1#0",
        "current_reserve_a#0",
        "current_reserve_a#0 (copy)"
      ]
    },
    "1202": {
      "op": "uncover 2",
      "defined_out": [
        "current_reserve_a#0",
        "maybe_exists%1#0"
      ],
      "stack_out": [
        "current_reserve_a#0",
        "current_reserve_a#0",
        "maybe_exists%1#0"
      ]
    },
    "1204": {
      "error": "check self.reserve_a exists",
      "op": "assert // check self.reserve_a exists",
      "stack_out": [
        "current_reserve_a#0",
        "current_reserve_a#0"
      ]
    },
    "1205": {
      "op": "intc_0 // 0",
      "stack_out": [
        "current_reserve_a#0",
        "current_reserve_a#0",
        "0"
      ]
    },
    "1206": {
      "op": "bytec_1 // \"reserve_b\"",
      "defined_out": [
        "\"reserve_b\"",
        "0",
        "current_reserve_a#0"
      ],
      "stack_out": [
        "current_reserve_a#0",
        "current_reserve_a#0",
        "0",
        "\"reserve_b\""
      ]
    },
    "1207": {
      "op": "app_global_get_ex",
      "defined_out": [
        "current_reserve_a#0",
        "current_reserve_b#0",
        "maybe_exists%2#0"
      ],
      "stack_out": [
        "current_reserve_a#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "maybe_exists%2#0"
      ]
    },
    "1208": {
      "op": "swap",
      "stack_out": [
        "current_reserve_a#0",
        "current_reserve_a#0",
        "maybe_exists%2#0",
        "current_reserve_b#0"
      ]
    },
    "1209": {
      "op": "cover 2",
      "defined_out": [
        "current_reserve_a#0",
        "current_reserve_b#0",
        "maybe_exists%2#0"
      ],
      "stack_out": [
        "current_reserve_a#0",
        "current_reserve_b#0",
        "current_reserve_a#0",
        "maybe_exists%2#0"
      ]
    },
    "1211": {
      "error": "check self.reserve_b exists",
      "op": "assert // check self.reserve_b exists",
      "stack_out": [
        "current_reserve_a#0",
        "current_reserve_b#0",
        "current_reserve_a#0"
      ]
    },
    "1212": {
      "op": "bz swap_b_for_a_bool_false@3",
      "stack_out": [
        "current_reserve_a#0",
        "current_reserve_b#0"
      ]
    },
    "1215": {
      "op": "frame_dig 1",
      "stack_out": [
        "current_reserve_a#0",
        "current_reserve_b#0",
        "current_reserve_b#0"
      ]
    },
    "1217": {
      "op": "bz swap_b_for_a_bool_false@3",
      "stack_out": [
        "current_reserve_a#0",
        "current_reserve_b#0"
      ]
    },
    "1220": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%0#0",
        "current_reserve_a#0",
        "current_reserve_b#0"
      ],
      "stack_out": [
        "current_reserve_a#0",
        "current_reserve_b#0",
        "and_result%0#0"
      ]
    },
    "1221": {
      "block": "swap_b_for_a_bool_merge@4",
      "stack_in": [
        "current_reserve_a#0",
        "current_reserve_b#0",
        "and_result%0#0"
      ],
      "error": "Insufficient liquidity",
      "op": "assert // Insufficient liquidity",
      "defined_out": [],
      "stack_out": [
        "current_reserve_a#0",
        "current_reserve_b#0"
      ]
    },
    "1222": {
      "op": "frame_dig -1",
      "defined_out": [
        "amount_in#0 (copy)"
      ],
      "stack_out": [
        "current_reserve_a#0",
        "current_reserve_b#0",
        "amount_in#0 (copy)"
      ]
    },
    "1224": {
      "op": "frame_dig 1",
      "defined_out": [
        "amount_in#0 (copy)",
        "current_reserve_b#0"
      ],
      "stack_out": [
        "current_reserve_a#0",
        "current_reserve_b#0",
        "amount_in#0 (copy)",
        "current_reserve_b#0"
      ]
    },
    "1226": {
      "op": "dup",
      "defined_out": [
        "amount_in#0 (copy)",
        "current_reserve_b#0",
        "current_reserve_b#0 (copy)"
      ],
      "stack_out": [
        "current_reserve_a#0",
        "current_reserve_b#0",
        "amount_in#0 (copy)",
        "current_reserve_b#0 (copy)",
        "current_reserve_b#0 (copy)"
      ]
    },
    "1227": {
      "op": "cover 2",
      "stack_out": [
        "current_reserve_a#0",
        "current_reserve_b#0",
        "current_reserve_b#0",
        "amount_in#0 (copy)",
        "current_reserve_b#0 (copy)"
      ]
    },
    "1229": {
      "op": "frame_dig 0",
      "defined_out": [
        "amount_in#0 (copy)",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "current_reserve_b#0 (copy)"
      ],
      "stack_out": [
        "current_reserve_a#0",
        "current_reserve_b#0",
        "current_reserve_b#0",
        "amount_in#0 (copy)",
        "current_reserve_b#0 (copy)",
        "current_reserve_a#0"
      ]
    },
    "1231": {
      "op": "dup",
      "defined_out": [
        "amount_in#0 (copy)",
        "current_reserve_a#0",
        "current_reserve_a#0 (copy)",
        "current_reserve_b#0",
        "current_reserve_b#0 (copy)"
      ],
      "stack_out": [
        "current_reserve_a#0",
        "current_reserve_b#0",
        "current_reserve_b#0",
        "amount_in#0 (copy)",
        "current_reserve_b#0 (copy)",
        "current_reserve_a#0 (copy)",
        "current_reserve_a#0 (copy)"
      ]
    },
    "1232": {
      "op": "cover 3",
      "stack_out": [
        "current_reserve_a#0",
        "current_reserve_b#0",
        "current_reserve_b#0",
        "current_reserve_a#0",
        "amount_in#0 (copy)",
        "current_reserve_b#0 (copy)",
        "current_reserve_a#0 (copy)"
      ]
    },
    "1234": {
      "callsub": "smart_contracts.simple_amm.contract.SimpleAMM._get_amount_out",
      "op": "callsub _get_amount_out",
      "defined_out": [
        "amount_out#0",
        "current_reserve_a#0",
        "current_reserve_b#0"
      ],
      "stack_out": [
        "current_reserve_a#0",
        "current_reserve_b#0",
        "current_reserve_b#0",
        "current_reserve_a#0",
        "amount_out#0"
      ]
    },
    "1237": {
      "op": "dup",
      "defined_out": [
        "amount_out#0",
        "amount_out#0 (copy)",
        "current_reserve_a#0",
        "current_reserve_b#0"
      ],
      "stack_out": [
        "current_reserve_a#0",
        "current_reserve_b#0",
        "current_reserve_b#0",
        "current_reserve_a#0",
        "amount_out#0",
        "amount_out#0 (copy)"
      ]
    },
    "1238": {
      "error": "Insufficient output amount",
      "op": "assert // Insufficient output amount",
      "stack_out": [
        "current_reserve_a#0",
        "current_reserve_b#0",
        "current_reserve_b#0",
        "current_reserve_a#0",
        "amount_out#0"
      ]
    },
    "1239": {
      "op": "dup",
      "stack_out": [
        "current_reserve_a#0",
        "current_reserve_b#0",
        "current_reserve_b#0",
        "current_reserve_a#0",
        "amount_out#0",
        "amount_out#0 (copy)"
      ]
    },
    "1240": {
      "op": "dig 2",
      "stack_out": [
        "current_reserve_a#0",
        "current_reserve_b#0",
        "current_reserve_b#0",
        "current_reserve_a#0",
        "amount_out#0",
        "amount_out#0 (copy)",
        "current_reserve_a#0 (copy)"
      ]
    },
    "1242": {
      "op": "<=",
      "defined_out": [
        "amount_out#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "current_reserve_a#0",
        "current_reserve_b#0",
        "current_reserve_b#0",
        "current_reserve_a#0",
        "amount_out#0",
        "tmp%5#0"
      ]
    },
    "1243": {
      "error": "Insufficient liquidity",
      "op": "assert // Insufficient liquidity",
      "stack_out": [
        "current_reserve_a#0",
        "current_reserve_b#0",
        "current_reserve_b#0",
        "current_reserve_a#0",
        "amount_out#0"
      ]
    },
    "1244": {
      "op": "uncover 2",
      "stack_out": [
        "current_reserve_a#0",
        "current_reserve_b#0",
        "current_reserve_a#0",
        "amount_out#0",
        "current_reserve_b#0"
      ]
    },
    "1246": {
      "op": "frame_dig -1",
      "stack_out": [
        "current_reserve_a#0",
        "current_reserve_b#0",
        "current_reserve_a#0",
        "amount_out#0",
        "current_reserve_b#0",
        "amount_in#0 (copy)"
      ]
    },
    "1248": {
      "op": "+",
      "defined_out": [
        "amount_out#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "materialized_values%0#0"
      ],
      "stack_out": [
        "current_reserve_a#0",
        "current_reserve_b#0",
        "current_reserve_a#0",
        "amount_out#0",
        "materialized_values%0#0"
      ]
    },
    "1249": {
      "op": "bytec_1 // \"reserve_b\"",
      "defined_out": [
        "\"reserve_b\"",
        "amount_out#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "materialized_values%0#0"
      ],
      "stack_out": [
        "current_reserve_a#0",
        "current_reserve_b#0",
        "current_reserve_a#0",
        "amount_out#0",
        "materialized_values%0#0",
        "\"reserve_b\""
      ]
    },
    "1250": {
      "op": "swap",
      "stack_out": [
        "current_reserve_a#0",
        "current_reserve_b#0",
        "current_reserve_a#0",
        "amount_out#0",
        "\"reserve_b\"",
        "materialized_values%0#0"
      ]
    },
    "1251": {
      "op": "app_global_put",
      "stack_out": [
        "current_reserve_a#0",
        "current_reserve_b#0",
        "current_reserve_a#0",
        "amount_out#0"
      ]
    },
    "1252": {
      "op": "swap",
      "stack_out": [
        "current_reserve_a#0",
        "current_reserve_b#0",
        "amount_out#0",
        "current_reserve_a#0"
      ]
    },
    "1253": {
      "op": "dig 1",
      "stack_out": [
        "current_reserve_a#0",
        "current_reserve_b#0",
        "amount_out#0",
        "current_reserve_a#0",
        "amount_out#0 (copy)"
      ]
    },
    "1255": {
      "op": "-",
      "defined_out": [
        "amount_out#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "materialized_values%1#0"
      ],
      "stack_out": [
        "current_reserve_a#0",
        "current_reserve_b#0",
        "amount_out#0",
        "materialized_values%1#0"
      ]
    },
    "1256": {
      "op": "bytec_0 // \"reserve_a\"",
      "defined_out": [
        "\"reserve_a\"",
        "amount_out#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "materialized_values%1#0"
      ],
      "stack_out": [
        "current_reserve_a#0",
        "current_reserve_b#0",
        "amount_out#0",
        "materialized_values%1#0",
        "\"reserve_a\""
      ]
    },
    "1257": {
      "op": "swap",
      "stack_out": [
        "current_reserve_a#0",
        "current_reserve_b#0",
        "amount_out#0",
        "\"reserve_a\"",
        "materialized_values%1#0"
      ]
    },
    "1258": {
      "op": "app_global_put",
      "stack_out": [
        "current_reserve_a#0",
        "current_reserve_b#0",
        "amount_out#0"
      ]
    },
    "1259": {
      "op": "frame_dig -1",
      "stack_out": [
        "current_reserve_a#0",
        "current_reserve_b#0",
        "amount_out#0",
        "amount_in#0 (copy)"
      ]
    },
    "1261": {
      "op": "itob",
      "defined_out": [
        "amount_out#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "current_reserve_a#0",
        "current_reserve_b#0",
        "amount_out#0",
        "tmp%6#0"
      ]
    },
    "1262": {
      "op": "pushbytes 0x5377617020422d3e41202d20496e3a20",
      "defined_out": [
        "0x5377617020422d3e41202d20496e3a20",
        "amount_out#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "current_reserve_a#0",
        "current_reserve_b#0",
        "amount_out#0",
        "tmp%6#0",
        "0x5377617020422d3e41202d20496e3a20"
      ]
    },
    "1280": {
      "op": "swap",
      "stack_out": [
        "current_reserve_a#0",
        "current_reserve_b#0",
        "amount_out#0",
        "0x5377617020422d3e41202d20496e3a20",
        "tmp%6#0"
      ]
    },
    "1281": {
      "op": "concat",
      "defined_out": [
        "amount_out#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "current_reserve_a#0",
        "current_reserve_b#0",
        "amount_out#0",
        "tmp%7#0"
      ]
    },
    "1282": {
      "op": "bytec 12 // 0x204f75743a20",
      "defined_out": [
        "0x204f75743a20",
        "amount_out#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "current_reserve_a#0",
        "current_reserve_b#0",
        "amount_out#0",
        "tmp%7#0",
        "0x204f75743a20"
      ]
    },
    "1284": {
      "op": "concat",
      "defined_out": [
        "amount_out#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "current_reserve_a#0",
        "current_reserve_b#0",
        "amount_out#0",
        "tmp%8#0"
      ]
    },
    "1285": {
      "op": "swap",
      "stack_out": [
        "current_reserve_a#0",
        "current_reserve_b#0",
        "tmp%8#0",
        "amount_out#0"
      ]
    },
    "1286": {
      "op": "itob",
      "defined_out": [
        "current_reserve_a#0",
        "current_reserve_b#0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "current_reserve_a#0",
        "current_reserve_b#0",
        "tmp%8#0",
        "tmp%9#0"
      ]
    },
    "1287": {
      "op": "concat",
      "defined_out": [
        "current_reserve_a#0",
        "current_reserve_b#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "current_reserve_a#0",
        "current_reserve_b#0",
        "tmp%10#0"
      ]
    },
    "1288": {
      "op": "log",
      "stack_out": [
        "current_reserve_a#0",
        "current_reserve_b#0"
      ]
    },
    "1289": {
      "op": "bytec 13 // \"Swap completed successfully\"",
      "defined_out": [
        "\"Swap completed successfully\"",
        "current_reserve_a#0",
        "current_reserve_b#0"
      ],
      "stack_out": [
        "current_reserve_a#0",
        "current_reserve_b#0",
        "\"Swap completed successfully\""
      ]
    },
    "1291": {
      "op": "frame_bury 0"
    },
    "1293": {
      "retsub": true,
      "op": "retsub"
    },
    "1294": {
      "block": "swap_b_for_a_bool_false@3",
      "stack_in": [
        "current_reserve_a#0",
        "current_reserve_b#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "current_reserve_a#0",
        "current_reserve_b#0",
        "and_result%0#0"
      ]
    },
    "1295": {
      "op": "b swap_b_for_a_bool_merge@4"
    },
    "1298": {
      "subroutine": "smart_contracts.simple_amm.contract.SimpleAMM.get_reserves",
      "params": {},
      "block": "get_reserves",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1299": {
      "op": "bytec_0 // \"reserve_a\"",
      "defined_out": [
        "\"reserve_a\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"reserve_a\""
      ]
    },
    "1300": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1301": {
      "error": "check self.reserve_a exists",
      "op": "assert // check self.reserve_a exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "1302": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "1303": {
      "op": "intc_0 // 0",
      "stack_out": [
        "val_as_bytes%0#0",
        "0"
      ]
    },
    "1304": {
      "op": "bytec_1 // \"reserve_b\"",
      "defined_out": [
        "\"reserve_b\"",
        "0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "0",
        "\"reserve_b\""
      ]
    },
    "1305": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1306": {
      "error": "check self.reserve_b exists",
      "op": "assert // check self.reserve_b exists",
      "stack_out": [
        "val_as_bytes%0#0",
        "maybe_value%1#0"
      ]
    },
    "1307": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ]
    },
    "1308": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0"
      ]
    },
    "1309": {
      "retsub": true,
      "op": "retsub"
    },
    "1310": {
      "subroutine": "smart_contracts.simple_amm.contract.SimpleAMM.get_amount_out",
      "params": {
        "amount_in#0": "uint64",
        "reserve_in#0": "uint64",
        "reserve_out#0": "uint64"
      },
      "block": "get_amount_out",
      "stack_in": [],
      "op": "proto 3 1"
    },
    "1313": {
      "op": "frame_dig -3",
      "defined_out": [
        "amount_in#0 (copy)"
      ],
      "stack_out": [
        "amount_in#0 (copy)"
      ]
    },
    "1315": {
      "op": "frame_dig -2",
      "defined_out": [
        "amount_in#0 (copy)",
        "reserve_in#0 (copy)"
      ],
      "stack_out": [
        "amount_in#0 (copy)",
        "reserve_in#0 (copy)"
      ]
    },
    "1317": {
      "op": "frame_dig -1",
      "defined_out": [
        "amount_in#0 (copy)",
        "reserve_in#0 (copy)",
        "reserve_out#0 (copy)"
      ],
      "stack_out": [
        "amount_in#0 (copy)",
        "reserve_in#0 (copy)",
        "reserve_out#0 (copy)"
      ]
    },
    "1319": {
      "callsub": "smart_contracts.simple_amm.contract.SimpleAMM._get_amount_out",
      "op": "callsub _get_amount_out",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1322": {
      "retsub": true,
      "op": "retsub"
    },
    "1323": {
      "subroutine": "smart_contracts.simple_amm.contract.SimpleAMM.get_user_liquidity",
      "params": {},
      "block": "get_user_liquidity",
      "stack_in": [],
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1325": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "1326": {
      "op": "bytec 5 // \"liquidity_balance\"",
      "defined_out": [
        "\"liquidity_balance\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"liquidity_balance\""
      ]
    },
    "1328": {
      "op": "app_local_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1329": {
      "error": "check self.liquidity_balance exists for account",
      "op": "assert // check self.liquidity_balance exists for account",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "1330": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "1331": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%1#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "tmp%1#0"
      ]
    },
    "1333": {
      "op": "intc_0 // 0",
      "stack_out": [
        "val_as_bytes%0#0",
        "tmp%1#0",
        "0"
      ]
    },
    "1334": {
      "op": "bytec 6 // \"token_a_deposited\"",
      "defined_out": [
        "\"token_a_deposited\"",
        "0",
        "tmp%1#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "tmp%1#0",
        "0",
        "\"token_a_deposited\""
      ]
    },
    "1336": {
      "op": "app_local_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1337": {
      "error": "check self.token_a_deposited exists for account",
      "op": "assert // check self.token_a_deposited exists for account",
      "stack_out": [
        "val_as_bytes%0#0",
        "maybe_value%1#0"
      ]
    },
    "1338": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ]
    },
    "1339": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%2#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "tmp%2#0"
      ]
    },
    "1341": {
      "op": "intc_0 // 0",
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "tmp%2#0",
        "0"
      ]
    },
    "1342": {
      "op": "bytec 7 // \"token_b_deposited\"",
      "defined_out": [
        "\"token_b_deposited\"",
        "0",
        "tmp%2#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "tmp%2#0",
        "0",
        "\"token_b_deposited\""
      ]
    },
    "1344": {
      "op": "app_local_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "1345": {
      "error": "check self.token_b_deposited exists for account",
      "op": "assert // check self.token_b_deposited exists for account",
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "maybe_value%2#0"
      ]
    },
    "1346": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ]
    },
    "1347": {
      "op": "cover 2",
      "stack_out": [
        "val_as_bytes%2#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ]
    },
    "1349": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "val_as_bytes%2#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "1350": {
      "op": "swap",
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "val_as_bytes%2#0"
      ]
    },
    "1351": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%3#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%3#0"
      ]
    },
    "1352": {
      "retsub": true,
      "op": "retsub"
    },
    "1353": {
      "subroutine": "smart_contracts.simple_amm.contract.SimpleAMM.get_pool_info",
      "params": {},
      "block": "get_pool_info",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1354": {
      "op": "bytec_0 // \"reserve_a\"",
      "defined_out": [
        "\"reserve_a\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"reserve_a\""
      ]
    },
    "1355": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1356": {
      "error": "check self.reserve_a exists",
      "op": "assert // check self.reserve_a exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "1357": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "1358": {
      "op": "intc_0 // 0",
      "stack_out": [
        "val_as_bytes%0#0",
        "0"
      ]
    },
    "1359": {
      "op": "bytec_1 // \"reserve_b\"",
      "defined_out": [
        "\"reserve_b\"",
        "0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "0",
        "\"reserve_b\""
      ]
    },
    "1360": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1361": {
      "error": "check self.reserve_b exists",
      "op": "assert // check self.reserve_b exists",
      "stack_out": [
        "val_as_bytes%0#0",
        "maybe_value%1#0"
      ]
    },
    "1362": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ]
    },
    "1363": {
      "op": "intc_0 // 0",
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "0"
      ]
    },
    "1364": {
      "op": "bytec_3 // \"total_liquidity\"",
      "defined_out": [
        "\"total_liquidity\"",
        "0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "0",
        "\"total_liquidity\""
      ]
    },
    "1365": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "1366": {
      "error": "check self.total_liquidity exists",
      "op": "assert // check self.total_liquidity exists",
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "maybe_value%2#0"
      ]
    },
    "1367": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ]
    },
    "1368": {
      "op": "intc_0 // 0",
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "0"
      ]
    },
    "1369": {
      "op": "bytec 8 // \"fee_rate\"",
      "defined_out": [
        "\"fee_rate\"",
        "0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "0",
        "\"fee_rate\""
      ]
    },
    "1371": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "1372": {
      "error": "check self.fee_rate exists",
      "op": "assert // check self.fee_rate exists",
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "maybe_value%3#0"
      ]
    },
    "1373": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ]
    },
    "1374": {
      "op": "uncover 3",
      "stack_out": [
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%0#0"
      ]
    },
    "1376": {
      "op": "uncover 3",
      "stack_out": [
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ]
    },
    "1378": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "1379": {
      "op": "uncover 2",
      "stack_out": [
        "val_as_bytes%3#0",
        "encoded_tuple_buffer%2#0",
        "val_as_bytes%2#0"
      ]
    },
    "1381": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "val_as_bytes%3#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "1382": {
      "op": "swap",
      "stack_out": [
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%3#0"
      ]
    },
    "1383": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%4#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%4#0"
      ]
    },
    "1384": {
      "retsub": true,
      "op": "retsub"
    },
    "1385": {
      "subroutine": "smart_contracts.simple_amm.contract.SimpleAMM.remove_liquidity",
      "params": {
        "liquidity_amount#0": "uint64"
      },
      "block": "remove_liquidity",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "1388": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1389": {
      "op": "bytec 4 // \"is_paused\"",
      "defined_out": [
        "\"is_paused\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"is_paused\""
      ]
    },
    "1391": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1392": {
      "error": "check self.is_paused exists",
      "op": "assert // check self.is_paused exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "1393": {
      "op": "!",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1394": {
      "error": "AMM is paused",
      "op": "assert // AMM is paused",
      "stack_out": []
    },
    "1395": {
      "op": "frame_dig -1",
      "defined_out": [
        "liquidity_amount#0 (copy)"
      ],
      "stack_out": [
        "liquidity_amount#0 (copy)"
      ]
    },
    "1397": {
      "error": "Amount must be positive",
      "op": "assert // Amount must be positive",
      "stack_out": []
    },
    "1398": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "1400": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%2#0",
        "0"
      ]
    },
    "1401": {
      "op": "bytec 5 // \"liquidity_balance\"",
      "defined_out": [
        "\"liquidity_balance\"",
        "0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "0",
        "\"liquidity_balance\""
      ]
    },
    "1403": {
      "op": "app_local_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "user_liquidity#0"
      ],
      "stack_out": [
        "user_liquidity#0",
        "maybe_exists%1#0"
      ]
    },
    "1404": {
      "error": "check self.liquidity_balance exists for account",
      "op": "assert // check self.liquidity_balance exists for account",
      "stack_out": [
        "user_liquidity#0"
      ]
    },
    "1405": {
      "op": "dup",
      "defined_out": [
        "user_liquidity#0",
        "user_liquidity#0 (copy)"
      ],
      "stack_out": [
        "user_liquidity#0",
        "user_liquidity#0 (copy)"
      ]
    },
    "1406": {
      "op": "frame_dig -1",
      "stack_out": [
        "user_liquidity#0",
        "user_liquidity#0 (copy)",
        "liquidity_amount#0 (copy)"
      ]
    },
    "1408": {
      "op": ">=",
      "defined_out": [
        "tmp%3#0",
        "user_liquidity#0"
      ],
      "stack_out": [
        "user_liquidity#0",
        "tmp%3#0"
      ]
    },
    "1409": {
      "error": "Insufficient liquidity balance",
      "op": "assert // Insufficient liquidity balance",
      "stack_out": [
        "user_liquidity#0"
      ]
    },
    "1410": {
      "op": "intc_0 // 0",
      "stack_out": [
        "user_liquidity#0",
        "0"
      ]
    },
    "1411": {
      "op": "bytec_0 // \"reserve_a\"",
      "defined_out": [
        "\"reserve_a\"",
        "0",
        "user_liquidity#0"
      ],
      "stack_out": [
        "user_liquidity#0",
        "0",
        "\"reserve_a\""
      ]
    },
    "1412": {
      "op": "app_global_get_ex",
      "defined_out": [
        "current_reserve_a#0",
        "maybe_exists%2#0",
        "user_liquidity#0"
      ],
      "stack_out": [
        "user_liquidity#0",
        "current_reserve_a#0",
        "maybe_exists%2#0"
      ]
    },
    "1413": {
      "error": "check self.reserve_a exists",
      "op": "assert // check self.reserve_a exists",
      "stack_out": [
        "user_liquidity#0",
        "current_reserve_a#0"
      ]
    },
    "1414": {
      "op": "intc_0 // 0",
      "stack_out": [
        "user_liquidity#0",
        "current_reserve_a#0",
        "0"
      ]
    },
    "1415": {
      "op": "bytec_1 // \"reserve_b\"",
      "defined_out": [
        "\"reserve_b\"",
        "0",
        "current_reserve_a#0",
        "user_liquidity#0"
      ],
      "stack_out": [
        "user_liquidity#0",
        "current_reserve_a#0",
        "0",
        "\"reserve_b\""
      ]
    },
    "1416": {
      "op": "app_global_get_ex",
      "defined_out": [
        "current_reserve_a#0",
        "current_reserve_b#0",
        "maybe_exists%3#0",
        "user_liquidity#0"
      ],
      "stack_out": [
        "user_liquidity#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "maybe_exists%3#0"
      ]
    },
    "1417": {
      "error": "check self.reserve_b exists",
      "op": "assert // check self.reserve_b exists",
      "stack_out": [
        "user_liquidity#0",
        "current_reserve_a#0",
        "current_reserve_b#0"
      ]
    },
    "1418": {
      "op": "intc_0 // 0",
      "stack_out": [
        "user_liquidity#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "0"
      ]
    },
    "1419": {
      "op": "bytec_3 // \"total_liquidity\"",
      "defined_out": [
        "\"total_liquidity\"",
        "0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "user_liquidity#0"
      ],
      "stack_out": [
        "user_liquidity#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "0",
        "\"total_liquidity\""
      ]
    },
    "1420": {
      "op": "app_global_get_ex",
      "defined_out": [
        "current_reserve_a#0",
        "current_reserve_b#0",
        "maybe_exists%4#0",
        "total_liquidity#0",
        "user_liquidity#0"
      ],
      "stack_out": [
        "user_liquidity#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "total_liquidity#0",
        "maybe_exists%4#0"
      ]
    },
    "1421": {
      "error": "check self.total_liquidity exists",
      "op": "assert // check self.total_liquidity exists",
      "stack_out": [
        "user_liquidity#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "total_liquidity#0"
      ]
    },
    "1422": {
      "op": "frame_dig -1",
      "stack_out": [
        "user_liquidity#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "total_liquidity#0",
        "liquidity_amount#0 (copy)"
      ]
    },
    "1424": {
      "op": "dig 3",
      "defined_out": [
        "current_reserve_a#0",
        "current_reserve_a#0 (copy)",
        "current_reserve_b#0",
        "liquidity_amount#0 (copy)",
        "total_liquidity#0",
        "user_liquidity#0"
      ],
      "stack_out": [
        "user_liquidity#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "total_liquidity#0",
        "liquidity_amount#0 (copy)",
        "current_reserve_a#0 (copy)"
      ]
    },
    "1426": {
      "op": "*",
      "defined_out": [
        "current_reserve_a#0",
        "current_reserve_b#0",
        "tmp%4#0",
        "total_liquidity#0",
        "user_liquidity#0"
      ],
      "stack_out": [
        "user_liquidity#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "total_liquidity#0",
        "tmp%4#0"
      ]
    },
    "1427": {
      "op": "dig 1",
      "defined_out": [
        "current_reserve_a#0",
        "current_reserve_b#0",
        "tmp%4#0",
        "total_liquidity#0",
        "total_liquidity#0 (copy)",
        "user_liquidity#0"
      ],
      "stack_out": [
        "user_liquidity#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "total_liquidity#0",
        "tmp%4#0",
        "total_liquidity#0 (copy)"
      ]
    },
    "1429": {
      "op": "/",
      "defined_out": [
        "amount_a#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "total_liquidity#0",
        "user_liquidity#0"
      ],
      "stack_out": [
        "user_liquidity#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "total_liquidity#0",
        "amount_a#0"
      ]
    },
    "1430": {
      "op": "dup",
      "stack_out": [
        "user_liquidity#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "total_liquidity#0",
        "amount_a#0",
        "amount_a#0 (copy)"
      ]
    },
    "1431": {
      "op": "cover 2",
      "stack_out": [
        "user_liquidity#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "amount_a#0",
        "total_liquidity#0",
        "amount_a#0"
      ]
    },
    "1433": {
      "op": "cover 5",
      "defined_out": [
        "amount_a#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "total_liquidity#0",
        "user_liquidity#0"
      ],
      "stack_out": [
        "amount_a#0",
        "user_liquidity#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "amount_a#0",
        "total_liquidity#0"
      ]
    },
    "1435": {
      "op": "frame_dig -1",
      "stack_out": [
        "amount_a#0",
        "user_liquidity#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "amount_a#0",
        "total_liquidity#0",
        "liquidity_amount#0 (copy)"
      ]
    },
    "1437": {
      "op": "dig 3",
      "defined_out": [
        "amount_a#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "current_reserve_b#0 (copy)",
        "liquidity_amount#0 (copy)",
        "total_liquidity#0",
        "user_liquidity#0"
      ],
      "stack_out": [
        "amount_a#0",
        "user_liquidity#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "amount_a#0",
        "total_liquidity#0",
        "liquidity_amount#0 (copy)",
        "current_reserve_b#0 (copy)"
      ]
    },
    "1439": {
      "op": "*",
      "defined_out": [
        "amount_a#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "tmp%5#0",
        "total_liquidity#0",
        "user_liquidity#0"
      ],
      "stack_out": [
        "amount_a#0",
        "user_liquidity#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "amount_a#0",
        "total_liquidity#0",
        "tmp%5#0"
      ]
    },
    "1440": {
      "op": "dig 1",
      "stack_out": [
        "amount_a#0",
        "user_liquidity#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "amount_a#0",
        "total_liquidity#0",
        "tmp%5#0",
        "total_liquidity#0 (copy)"
      ]
    },
    "1442": {
      "op": "/",
      "defined_out": [
        "amount_a#0",
        "amount_b#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "total_liquidity#0",
        "user_liquidity#0"
      ],
      "stack_out": [
        "amount_a#0",
        "user_liquidity#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "amount_a#0",
        "total_liquidity#0",
        "amount_b#0"
      ]
    },
    "1443": {
      "op": "dup",
      "stack_out": [
        "amount_a#0",
        "user_liquidity#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "amount_a#0",
        "total_liquidity#0",
        "amount_b#0",
        "amount_b#0"
      ]
    },
    "1444": {
      "op": "cover 6",
      "defined_out": [
        "amount_a#0",
        "amount_b#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "total_liquidity#0",
        "user_liquidity#0"
      ],
      "stack_out": [
        "amount_a#0",
        "amount_b#0",
        "user_liquidity#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "amount_a#0",
        "total_liquidity#0",
        "amount_b#0"
      ]
    },
    "1446": {
      "op": "uncover 4",
      "stack_out": [
        "amount_a#0",
        "amount_b#0",
        "user_liquidity#0",
        "current_reserve_b#0",
        "amount_a#0",
        "total_liquidity#0",
        "amount_b#0",
        "current_reserve_a#0"
      ]
    },
    "1448": {
      "op": "dig 3",
      "defined_out": [
        "amount_a#0",
        "amount_a#0 (copy)",
        "amount_b#0",
        "current_reserve_a#0",
        "current_reserve_b#0",
        "total_liquidity#0",
        "user_liquidity#0"
      ],
      "stack_out": [
        "amount_a#0",
        "amount_b#0",
        "user_liquidity#0",
        "current_reserve_b#0",
        "amount_a#0",
        "total_liquidity#0",
        "amount_b#0",
        "current_reserve_a#0",
        "amount_a#0 (copy)"
      ]
    },
    "1450": {
      "op": "-",
      "defined_out": [
        "amount_a#0",
        "amount_b#0",
        "current_reserve_b#0",
        "materialized_values%0#0",
        "total_liquidity#0",
        "user_liquidity#0"
      ],
      "stack_out": [
        "amount_a#0",
        "amount_b#0",
        "user_liquidity#0",
        "current_reserve_b#0",
        "amount_a#0",
        "total_liquidity#0",
        "amount_b#0",
        "materialized_values%0#0"
      ]
    },
    "1451": {
      "op": "bytec_0 // \"reserve_a\"",
      "stack_out": [
        "amount_a#0",
        "amount_b#0",
        "user_liquidity#0",
        "current_reserve_b#0",
        "amount_a#0",
        "total_liquidity#0",
        "amount_b#0",
        "materialized_values%0#0",
        "\"reserve_a\""
      ]
    },
    "1452": {
      "op": "swap",
      "stack_out": [
        "amount_a#0",
        "amount_b#0",
        "user_liquidity#0",
        "current_reserve_b#0",
        "amount_a#0",
        "total_liquidity#0",
        "amount_b#0",
        "\"reserve_a\"",
        "materialized_values%0#0"
      ]
    },
    "1453": {
      "op": "app_global_put",
      "stack_out": [
        "amount_a#0",
        "amount_b#0",
        "user_liquidity#0",
        "current_reserve_b#0",
        "amount_a#0",
        "total_liquidity#0",
        "amount_b#0"
      ]
    },
    "1454": {
      "op": "uncover 3",
      "stack_out": [
        "amount_a#0",
        "amount_b#0",
        "user_liquidity#0",
        "amount_a#0",
        "total_liquidity#0",
        "amount_b#0",
        "current_reserve_b#0"
      ]
    },
    "1456": {
      "op": "swap",
      "stack_out": [
        "amount_a#0",
        "amount_b#0",
        "user_liquidity#0",
        "amount_a#0",
        "total_liquidity#0",
        "current_reserve_b#0",
        "amount_b#0"
      ]
    },
    "1457": {
      "op": "-",
      "defined_out": [
        "amount_a#0",
        "amount_b#0",
        "materialized_values%1#0",
        "total_liquidity#0",
        "user_liquidity#0"
      ],
      "stack_out": [
        "amount_a#0",
        "amount_b#0",
        "user_liquidity#0",
        "amount_a#0",
        "total_liquidity#0",
        "materialized_values%1#0"
      ]
    },
    "1458": {
      "op": "bytec_1 // \"reserve_b\"",
      "stack_out": [
        "amount_a#0",
        "amount_b#0",
        "user_liquidity#0",
        "amount_a#0",
        "total_liquidity#0",
        "materialized_values%1#0",
        "\"reserve_b\""
      ]
    },
    "1459": {
      "op": "swap",
      "stack_out": [
        "amount_a#0",
        "amount_b#0",
        "user_liquidity#0",
        "amount_a#0",
        "total_liquidity#0",
        "\"reserve_b\"",
        "materialized_values%1#0"
      ]
    },
    "1460": {
      "op": "app_global_put",
      "stack_out": [
        "amount_a#0",
        "amount_b#0",
        "user_liquidity#0",
        "amount_a#0",
        "total_liquidity#0"
      ]
    },
    "1461": {
      "op": "uncover 2",
      "stack_out": [
        "amount_a#0",
        "amount_b#0",
        "amount_a#0",
        "total_liquidity#0",
        "user_liquidity#0"
      ]
    },
    "1463": {
      "op": "frame_dig -1",
      "stack_out": [
        "amount_a#0",
        "amount_b#0",
        "amount_a#0",
        "total_liquidity#0",
        "user_liquidity#0",
        "liquidity_amount#0 (copy)"
      ]
    },
    "1465": {
      "op": "-",
      "defined_out": [
        "amount_a#0",
        "amount_b#0",
        "materialized_values%2#0",
        "total_liquidity#0"
      ],
      "stack_out": [
        "amount_a#0",
        "amount_b#0",
        "amount_a#0",
        "total_liquidity#0",
        "materialized_values%2#0"
      ]
    },
    "1466": {
      "op": "txn Sender",
      "defined_out": [
        "amount_a#0",
        "amount_b#0",
        "materialized_values%2#0",
        "tmp%6#0",
        "total_liquidity#0"
      ],
      "stack_out": [
        "amount_a#0",
        "amount_b#0",
        "amount_a#0",
        "total_liquidity#0",
        "materialized_values%2#0",
        "tmp%6#0"
      ]
    },
    "1468": {
      "op": "bytec 5 // \"liquidity_balance\"",
      "stack_out": [
        "amount_a#0",
        "amount_b#0",
        "amount_a#0",
        "total_liquidity#0",
        "materialized_values%2#0",
        "tmp%6#0",
        "\"liquidity_balance\""
      ]
    },
    "1470": {
      "op": "uncover 2",
      "stack_out": [
        "amount_a#0",
        "amount_b#0",
        "amount_a#0",
        "total_liquidity#0",
        "tmp%6#0",
        "\"liquidity_balance\"",
        "materialized_values%2#0"
      ]
    },
    "1472": {
      "op": "app_local_put",
      "stack_out": [
        "amount_a#0",
        "amount_b#0",
        "amount_a#0",
        "total_liquidity#0"
      ]
    },
    "1473": {
      "op": "frame_dig -1",
      "stack_out": [
        "amount_a#0",
        "amount_b#0",
        "amount_a#0",
        "total_liquidity#0",
        "liquidity_amount#0 (copy)"
      ]
    },
    "1475": {
      "op": "-",
      "defined_out": [
        "amount_a#0",
        "amount_b#0",
        "materialized_values%3#0"
      ],
      "stack_out": [
        "amount_a#0",
        "amount_b#0",
        "amount_a#0",
        "materialized_values%3#0"
      ]
    },
    "1476": {
      "op": "bytec_3 // \"total_liquidity\"",
      "stack_out": [
        "amount_a#0",
        "amount_b#0",
        "amount_a#0",
        "materialized_values%3#0",
        "\"total_liquidity\""
      ]
    },
    "1477": {
      "op": "swap",
      "stack_out": [
        "amount_a#0",
        "amount_b#0",
        "amount_a#0",
        "\"total_liquidity\"",
        "materialized_values%3#0"
      ]
    },
    "1478": {
      "op": "app_global_put",
      "stack_out": [
        "amount_a#0",
        "amount_b#0",
        "amount_a#0"
      ]
    },
    "1479": {
      "op": "txn Sender",
      "defined_out": [
        "amount_a#0",
        "amount_b#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "amount_a#0",
        "amount_b#0",
        "amount_a#0",
        "tmp%7#0"
      ]
    },
    "1481": {
      "op": "intc_0 // 0",
      "stack_out": [
        "amount_a#0",
        "amount_b#0",
        "amount_a#0",
        "tmp%7#0",
        "0"
      ]
    },
    "1482": {
      "op": "bytec 6 // \"token_a_deposited\"",
      "defined_out": [
        "\"token_a_deposited\"",
        "0",
        "amount_a#0",
        "amount_b#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "amount_a#0",
        "amount_b#0",
        "amount_a#0",
        "tmp%7#0",
        "0",
        "\"token_a_deposited\""
      ]
    },
    "1484": {
      "op": "app_local_get_ex",
      "defined_out": [
        "amount_a#0",
        "amount_b#0",
        "maybe_exists%5#0",
        "maybe_value%5#0"
      ],
      "stack_out": [
        "amount_a#0",
        "amount_b#0",
        "amount_a#0",
        "maybe_value%5#0",
        "maybe_exists%5#0"
      ]
    },
    "1485": {
      "error": "check self.token_a_deposited exists for account",
      "op": "assert // check self.token_a_deposited exists for account",
      "stack_out": [
        "amount_a#0",
        "amount_b#0",
        "amount_a#0",
        "maybe_value%5#0"
      ]
    },
    "1486": {
      "op": "<=",
      "defined_out": [
        "amount_a#0",
        "amount_b#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "amount_a#0",
        "amount_b#0",
        "tmp%8#0"
      ]
    },
    "1487": {
      "op": "bz remove_liquidity_after_if_else@2",
      "stack_out": [
        "amount_a#0",
        "amount_b#0"
      ]
    },
    "1490": {
      "op": "txn Sender",
      "defined_out": [
        "amount_a#0",
        "amount_b#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "amount_a#0",
        "amount_b#0",
        "tmp%9#0"
      ]
    },
    "1492": {
      "op": "intc_0 // 0",
      "stack_out": [
        "amount_a#0",
        "amount_b#0",
        "tmp%9#0",
        "0"
      ]
    },
    "1493": {
      "op": "bytec 6 // \"token_a_deposited\"",
      "stack_out": [
        "amount_a#0",
        "amount_b#0",
        "tmp%9#0",
        "0",
        "\"token_a_deposited\""
      ]
    },
    "1495": {
      "op": "app_local_get_ex",
      "defined_out": [
        "amount_a#0",
        "amount_b#0",
        "maybe_exists%6#0",
        "maybe_value%6#0"
      ],
      "stack_out": [
        "amount_a#0",
        "amount_b#0",
        "maybe_value%6#0",
        "maybe_exists%6#0"
      ]
    },
    "1496": {
      "error": "check self.token_a_deposited exists for account",
      "op": "assert // check self.token_a_deposited exists for account",
      "stack_out": [
        "amount_a#0",
        "amount_b#0",
        "maybe_value%6#0"
      ]
    },
    "1497": {
      "op": "frame_dig 0",
      "stack_out": [
        "amount_a#0",
        "amount_b#0",
        "maybe_value%6#0",
        "amount_a#0"
      ]
    },
    "1499": {
      "op": "-",
      "defined_out": [
        "amount_a#0",
        "amount_b#0",
        "materialized_values%4#0"
      ],
      "stack_out": [
        "amount_a#0",
        "amount_b#0",
        "materialized_values%4#0"
      ]
    },
    "1500": {
      "op": "txn Sender",
      "defined_out": [
        "amount_a#0",
        "amount_b#0",
        "materialized_values%4#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "amount_a#0",
        "amount_b#0",
        "materialized_values%4#0",
        "tmp%10#0"
      ]
    },
    "1502": {
      "op": "bytec 6 // \"token_a_deposited\"",
      "stack_out": [
        "amount_a#0",
        "amount_b#0",
        "materialized_values%4#0",
        "tmp%10#0",
        "\"token_a_deposited\""
      ]
    },
    "1504": {
      "op": "uncover 2",
      "stack_out": [
        "amount_a#0",
        "amount_b#0",
        "tmp%10#0",
        "\"token_a_deposited\"",
        "materialized_values%4#0"
      ]
    },
    "1506": {
      "op": "app_local_put",
      "stack_out": [
        "amount_a#0",
        "amount_b#0"
      ]
    },
    "1507": {
      "block": "remove_liquidity_after_if_else@2",
      "stack_in": [
        "amount_a#0",
        "amount_b#0"
      ],
      "op": "txn Sender",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "amount_a#0",
        "amount_b#0",
        "tmp%11#0"
      ]
    },
    "1509": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%11#0"
      ],
      "stack_out": [
        "amount_a#0",
        "amount_b#0",
        "tmp%11#0",
        "0"
      ]
    },
    "1510": {
      "op": "bytec 7 // \"token_b_deposited\"",
      "defined_out": [
        "\"token_b_deposited\"",
        "0",
        "tmp%11#0"
      ],
      "stack_out": [
        "amount_a#0",
        "amount_b#0",
        "tmp%11#0",
        "0",
        "\"token_b_deposited\""
      ]
    },
    "1512": {
      "op": "app_local_get_ex",
      "defined_out": [
        "maybe_exists%7#0",
        "maybe_value%7#0"
      ],
      "stack_out": [
        "amount_a#0",
        "amount_b#0",
        "maybe_value%7#0",
        "maybe_exists%7#0"
      ]
    },
    "1513": {
      "error": "check self.token_b_deposited exists for account",
      "op": "assert // check self.token_b_deposited exists for account",
      "stack_out": [
        "amount_a#0",
        "amount_b#0",
        "maybe_value%7#0"
      ]
    },
    "1514": {
      "op": "frame_dig 1",
      "defined_out": [
        "amount_b#0",
        "maybe_value%7#0"
      ],
      "stack_out": [
        "amount_a#0",
        "amount_b#0",
        "maybe_value%7#0",
        "amount_b#0"
      ]
    },
    "1516": {
      "op": ">=",
      "defined_out": [
        "amount_b#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "amount_a#0",
        "amount_b#0",
        "tmp%12#0"
      ]
    },
    "1517": {
      "op": "bz remove_liquidity_after_if_else@4",
      "stack_out": [
        "amount_a#0",
        "amount_b#0"
      ]
    },
    "1520": {
      "op": "txn Sender",
      "defined_out": [
        "amount_b#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "amount_a#0",
        "amount_b#0",
        "tmp%13#0"
      ]
    },
    "1522": {
      "op": "intc_0 // 0",
      "stack_out": [
        "amount_a#0",
        "amount_b#0",
        "tmp%13#0",
        "0"
      ]
    },
    "1523": {
      "op": "bytec 7 // \"token_b_deposited\"",
      "stack_out": [
        "amount_a#0",
        "amount_b#0",
        "tmp%13#0",
        "0",
        "\"token_b_deposited\""
      ]
    },
    "1525": {
      "op": "app_local_get_ex",
      "defined_out": [
        "amount_b#0",
        "maybe_exists%8#0",
        "maybe_value%8#0"
      ],
      "stack_out": [
        "amount_a#0",
        "amount_b#0",
        "maybe_value%8#0",
        "maybe_exists%8#0"
      ]
    },
    "1526": {
      "error": "check self.token_b_deposited exists for account",
      "op": "assert // check self.token_b_deposited exists for account",
      "stack_out": [
        "amount_a#0",
        "amount_b#0",
        "maybe_value%8#0"
      ]
    },
    "1527": {
      "op": "frame_dig 1",
      "stack_out": [
        "amount_a#0",
        "amount_b#0",
        "maybe_value%8#0",
        "amount_b#0"
      ]
    },
    "1529": {
      "op": "-",
      "defined_out": [
        "amount_b#0",
        "materialized_values%5#0"
      ],
      "stack_out": [
        "amount_a#0",
        "amount_b#0",
        "materialized_values%5#0"
      ]
    },
    "1530": {
      "op": "txn Sender",
      "defined_out": [
        "amount_b#0",
        "materialized_values%5#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "amount_a#0",
        "amount_b#0",
        "materialized_values%5#0",
        "tmp%14#0"
      ]
    },
    "1532": {
      "op": "bytec 7 // \"token_b_deposited\"",
      "stack_out": [
        "amount_a#0",
        "amount_b#0",
        "materialized_values%5#0",
        "tmp%14#0",
        "\"token_b_deposited\""
      ]
    },
    "1534": {
      "op": "uncover 2",
      "stack_out": [
        "amount_a#0",
        "amount_b#0",
        "tmp%14#0",
        "\"token_b_deposited\"",
        "materialized_values%5#0"
      ]
    },
    "1536": {
      "op": "app_local_put",
      "stack_out": [
        "amount_a#0",
        "amount_b#0"
      ]
    },
    "1537": {
      "block": "remove_liquidity_after_if_else@4",
      "stack_in": [
        "amount_a#0",
        "amount_b#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "amount_a#0"
      ],
      "stack_out": [
        "amount_a#0",
        "amount_b#0",
        "amount_a#0"
      ]
    },
    "1539": {
      "op": "itob",
      "defined_out": [
        "amount_a#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "amount_a#0",
        "amount_b#0",
        "tmp%15#0"
      ]
    },
    "1540": {
      "op": "pushbytes 0x4c69717569646974792072656d6f766564202d20413a20",
      "defined_out": [
        "0x4c69717569646974792072656d6f766564202d20413a20",
        "amount_a#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "amount_a#0",
        "amount_b#0",
        "tmp%15#0",
        "0x4c69717569646974792072656d6f766564202d20413a20"
      ]
    },
    "1565": {
      "op": "swap",
      "stack_out": [
        "amount_a#0",
        "amount_b#0",
        "0x4c69717569646974792072656d6f766564202d20413a20",
        "tmp%15#0"
      ]
    },
    "1566": {
      "op": "concat",
      "defined_out": [
        "amount_a#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "amount_a#0",
        "amount_b#0",
        "tmp%16#0"
      ]
    },
    "1567": {
      "op": "bytec 11 // 0x20423a20",
      "defined_out": [
        "0x20423a20",
        "amount_a#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "amount_a#0",
        "amount_b#0",
        "tmp%16#0",
        "0x20423a20"
      ]
    },
    "1569": {
      "op": "concat",
      "defined_out": [
        "amount_a#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "amount_a#0",
        "amount_b#0",
        "tmp%17#0"
      ]
    },
    "1570": {
      "op": "frame_dig 1",
      "defined_out": [
        "amount_a#0",
        "amount_b#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "amount_a#0",
        "amount_b#0",
        "tmp%17#0",
        "amount_b#0"
      ]
    },
    "1572": {
      "op": "itob",
      "defined_out": [
        "amount_a#0",
        "amount_b#0",
        "tmp%17#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "amount_a#0",
        "amount_b#0",
        "tmp%17#0",
        "tmp%18#0"
      ]
    },
    "1573": {
      "op": "concat",
      "defined_out": [
        "amount_a#0",
        "amount_b#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "amount_a#0",
        "amount_b#0",
        "tmp%19#0"
      ]
    },
    "1574": {
      "op": "log",
      "stack_out": [
        "amount_a#0",
        "amount_b#0"
      ]
    },
    "1575": {
      "op": "pushbytes \"Liquidity removed successfully\"",
      "defined_out": [
        "\"Liquidity removed successfully\"",
        "amount_a#0",
        "amount_b#0"
      ],
      "stack_out": [
        "amount_a#0",
        "amount_b#0",
        "\"Liquidity removed successfully\""
      ]
    },
    "1607": {
      "op": "frame_bury 0"
    },
    "1609": {
      "retsub": true,
      "op": "retsub"
    },
    "1610": {
      "subroutine": "smart_contracts.simple_amm.contract.SimpleAMM.set_fee_rate",
      "params": {
        "new_fee#0": "uint64"
      },
      "block": "set_fee_rate",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "1613": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1615": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "1616": {
      "op": "bytec 9 // \"admin\"",
      "defined_out": [
        "\"admin\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"admin\""
      ]
    },
    "1618": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1619": {
      "error": "check self.admin exists",
      "op": "assert // check self.admin exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "1620": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1621": {
      "error": "Only admin can set fee",
      "op": "assert // Only admin can set fee",
      "stack_out": []
    },
    "1622": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "1623": {
      "op": "bytec 10 // \"fee_denominator\"",
      "defined_out": [
        "\"fee_denominator\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"fee_denominator\""
      ]
    },
    "1625": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1626": {
      "error": "check self.fee_denominator exists",
      "op": "assert // check self.fee_denominator exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "1627": {
      "op": "frame_dig -1",
      "defined_out": [
        "maybe_value%1#0",
        "new_fee#0 (copy)"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "new_fee#0 (copy)"
      ]
    },
    "1629": {
      "op": ">",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "1630": {
      "error": "Fee too high",
      "op": "assert // Fee too high",
      "stack_out": []
    },
    "1631": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "1632": {
      "op": "bytec 8 // \"fee_rate\"",
      "defined_out": [
        "\"fee_rate\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"fee_rate\""
      ]
    },
    "1634": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "old_fee#0"
      ],
      "stack_out": [
        "old_fee#0",
        "maybe_exists%2#0"
      ]
    },
    "1635": {
      "error": "check self.fee_rate exists",
      "op": "assert // check self.fee_rate exists",
      "stack_out": [
        "old_fee#0"
      ]
    },
    "1636": {
      "op": "bytec 8 // \"fee_rate\"",
      "stack_out": [
        "old_fee#0",
        "\"fee_rate\""
      ]
    },
    "1638": {
      "op": "frame_dig -1",
      "stack_out": [
        "old_fee#0",
        "\"fee_rate\"",
        "new_fee#0 (copy)"
      ]
    },
    "1640": {
      "op": "app_global_put",
      "stack_out": [
        "old_fee#0"
      ]
    },
    "1641": {
      "op": "itob",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "1642": {
      "op": "pushbytes 0x4665652075706461746564202d204f6c643a20",
      "defined_out": [
        "0x4665652075706461746564202d204f6c643a20",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "0x4665652075706461746564202d204f6c643a20"
      ]
    },
    "1663": {
      "op": "swap",
      "stack_out": [
        "0x4665652075706461746564202d204f6c643a20",
        "tmp%3#0"
      ]
    },
    "1664": {
      "op": "concat",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "1665": {
      "op": "pushbytes 0x204e65773a20",
      "defined_out": [
        "0x204e65773a20",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "0x204e65773a20"
      ]
    },
    "1673": {
      "op": "concat",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "1674": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%5#0",
        "new_fee#0 (copy)"
      ]
    },
    "1676": {
      "op": "itob",
      "defined_out": [
        "tmp%5#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "tmp%6#0"
      ]
    },
    "1677": {
      "op": "concat",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "1678": {
      "op": "log",
      "stack_out": []
    },
    "1679": {
      "op": "pushbytes \"Fee rate updated successfully\"",
      "defined_out": [
        "\"Fee rate updated successfully\""
      ],
      "stack_out": [
        "\"Fee rate updated successfully\""
      ]
    },
    "1710": {
      "retsub": true,
      "op": "retsub"
    },
    "1711": {
      "subroutine": "smart_contracts.simple_amm.contract.SimpleAMM.pause_amm",
      "params": {},
      "block": "pause_amm",
      "stack_in": [],
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1713": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "1714": {
      "op": "bytec 9 // \"admin\"",
      "defined_out": [
        "\"admin\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"admin\""
      ]
    },
    "1716": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1717": {
      "error": "check self.admin exists",
      "op": "assert // check self.admin exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "1718": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1719": {
      "error": "Only admin can pause",
      "op": "assert // Only admin can pause",
      "stack_out": []
    },
    "1720": {
      "op": "bytec 4 // \"is_paused\"",
      "defined_out": [
        "\"is_paused\""
      ],
      "stack_out": [
        "\"is_paused\""
      ]
    },
    "1722": {
      "op": "intc_1 // 1",
      "defined_out": [
        "\"is_paused\"",
        "1"
      ],
      "stack_out": [
        "\"is_paused\"",
        "1"
      ]
    },
    "1723": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1724": {
      "op": "bytec 14 // 0x414d4d20706175736564",
      "defined_out": [
        "0x414d4d20706175736564"
      ],
      "stack_out": [
        "0x414d4d20706175736564"
      ]
    },
    "1726": {
      "op": "log",
      "stack_out": []
    },
    "1727": {
      "op": "bytec 14 // \"AMM paused\"",
      "defined_out": [
        "\"AMM paused\""
      ],
      "stack_out": [
        "\"AMM paused\""
      ]
    },
    "1729": {
      "retsub": true,
      "op": "retsub"
    },
    "1730": {
      "subroutine": "smart_contracts.simple_amm.contract.SimpleAMM.unpause_amm",
      "params": {},
      "block": "unpause_amm",
      "stack_in": [],
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1732": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "1733": {
      "op": "bytec 9 // \"admin\"",
      "defined_out": [
        "\"admin\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"admin\""
      ]
    },
    "1735": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1736": {
      "error": "check self.admin exists",
      "op": "assert // check self.admin exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "1737": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1738": {
      "error": "Only admin can unpause",
      "op": "assert // Only admin can unpause",
      "stack_out": []
    },
    "1739": {
      "op": "bytec 4 // \"is_paused\"",
      "defined_out": [
        "\"is_paused\""
      ],
      "stack_out": [
        "\"is_paused\""
      ]
    },
    "1741": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"is_paused\"",
        "0"
      ]
    },
    "1742": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1743": {
      "op": "bytec 15 // 0x414d4d20756e706175736564",
      "defined_out": [
        "0x414d4d20756e706175736564"
      ],
      "stack_out": [
        "0x414d4d20756e706175736564"
      ]
    },
    "1745": {
      "op": "log",
      "stack_out": []
    },
    "1746": {
      "op": "bytec 15 // \"AMM unpaused\"",
      "defined_out": [
        "\"AMM unpaused\""
      ],
      "stack_out": [
        "\"AMM unpaused\""
      ]
    },
    "1748": {
      "retsub": true,
      "op": "retsub"
    },
    "1749": {
      "subroutine": "smart_contracts.simple_amm.contract.SimpleAMM._get_amount_out",
      "params": {
        "amount_in#0": "uint64",
        "reserve_in#0": "uint64",
        "reserve_out#0": "uint64"
      },
      "block": "_get_amount_out",
      "stack_in": [],
      "op": "proto 3 1"
    },
    "1752": {
      "op": "frame_dig -3",
      "defined_out": [
        "amount_in#0 (copy)"
      ],
      "stack_out": [
        "amount_in#0 (copy)"
      ]
    },
    "1754": {
      "error": "Amount must be positive",
      "op": "assert // Amount must be positive",
      "stack_out": []
    },
    "1755": {
      "op": "frame_dig -2",
      "defined_out": [
        "reserve_in#0 (copy)"
      ],
      "stack_out": [
        "reserve_in#0 (copy)"
      ]
    },
    "1757": {
      "op": "bz _get_amount_out_bool_false@3",
      "stack_out": []
    },
    "1760": {
      "op": "frame_dig -1",
      "defined_out": [
        "reserve_out#0 (copy)"
      ],
      "stack_out": [
        "reserve_out#0 (copy)"
      ]
    },
    "1762": {
      "op": "bz _get_amount_out_bool_false@3",
      "stack_out": []
    },
    "1765": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "and_result%0#0"
      ]
    },
    "1766": {
      "block": "_get_amount_out_bool_merge@4",
      "stack_in": [
        "and_result%0#0"
      ],
      "error": "Insufficient liquidity",
      "op": "assert // Insufficient liquidity",
      "defined_out": [],
      "stack_out": []
    },
    "1767": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1768": {
      "op": "bytec 10 // \"fee_denominator\"",
      "defined_out": [
        "\"fee_denominator\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"fee_denominator\""
      ]
    },
    "1770": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1771": {
      "error": "check self.fee_denominator exists",
      "op": "assert // check self.fee_denominator exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "1772": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%0#0",
        "0"
      ]
    },
    "1773": {
      "op": "bytec 8 // \"fee_rate\"",
      "defined_out": [
        "\"fee_rate\"",
        "0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "0",
        "\"fee_rate\""
      ]
    },
    "1775": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%0#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1776": {
      "error": "check self.fee_rate exists",
      "op": "assert // check self.fee_rate exists",
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0"
      ]
    },
    "1777": {
      "op": "dig 1",
      "defined_out": [
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%0#0 (copy)"
      ]
    },
    "1779": {
      "op": "swap",
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)",
        "maybe_value%1#0"
      ]
    },
    "1780": {
      "op": "-",
      "defined_out": [
        "maybe_value%0#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "tmp%3#0"
      ]
    },
    "1781": {
      "op": "frame_dig -3",
      "defined_out": [
        "amount_in#0 (copy)",
        "maybe_value%0#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "tmp%3#0",
        "amount_in#0 (copy)"
      ]
    },
    "1783": {
      "op": "*",
      "defined_out": [
        "amount_in_with_fee#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "amount_in_with_fee#0"
      ]
    },
    "1784": {
      "op": "dup",
      "defined_out": [
        "amount_in_with_fee#0",
        "amount_in_with_fee#0 (copy)",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "amount_in_with_fee#0",
        "amount_in_with_fee#0 (copy)"
      ]
    },
    "1785": {
      "op": "frame_dig -1",
      "defined_out": [
        "amount_in_with_fee#0",
        "amount_in_with_fee#0 (copy)",
        "maybe_value%0#0",
        "reserve_out#0 (copy)"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "amount_in_with_fee#0",
        "amount_in_with_fee#0 (copy)",
        "reserve_out#0 (copy)"
      ]
    },
    "1787": {
      "op": "*",
      "defined_out": [
        "amount_in_with_fee#0",
        "maybe_value%0#0",
        "numerator#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "amount_in_with_fee#0",
        "numerator#0"
      ]
    },
    "1788": {
      "op": "frame_dig -2",
      "defined_out": [
        "amount_in_with_fee#0",
        "maybe_value%0#0",
        "numerator#0",
        "reserve_in#0 (copy)"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "amount_in_with_fee#0",
        "numerator#0",
        "reserve_in#0 (copy)"
      ]
    },
    "1790": {
      "op": "uncover 3",
      "stack_out": [
        "amount_in_with_fee#0",
        "numerator#0",
        "reserve_in#0 (copy)",
        "maybe_value%0#0"
      ]
    },
    "1792": {
      "op": "*",
      "defined_out": [
        "amount_in_with_fee#0",
        "numerator#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "amount_in_with_fee#0",
        "numerator#0",
        "tmp%4#0"
      ]
    },
    "1793": {
      "op": "uncover 2",
      "stack_out": [
        "numerator#0",
        "tmp%4#0",
        "amount_in_with_fee#0"
      ]
    },
    "1795": {
      "op": "+",
      "defined_out": [
        "denominator#0",
        "numerator#0"
      ],
      "stack_out": [
        "numerator#0",
        "denominator#0"
      ]
    },
    "1796": {
      "op": "/",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "1797": {
      "retsub": true,
      "op": "retsub"
    },
    "1798": {
      "block": "_get_amount_out_bool_false@3",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "and_result%0#0"
      ]
    },
    "1799": {
      "op": "b _get_amount_out_bool_merge@4"
    }
  }
}