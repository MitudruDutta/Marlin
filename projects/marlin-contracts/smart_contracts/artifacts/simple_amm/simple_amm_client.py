# flake8: noqa
# fmt: off
# mypy: ignore-errors
# This file was automatically generated by algokit-client-generator.
# DO NOT MODIFY IT BY HAND.
# requires: algokit-utils@^3.0.0

# common
import dataclasses
import typing
# core algosdk
import algosdk
from algosdk.transaction import OnComplete
from algosdk.atomic_transaction_composer import TransactionSigner
from algosdk.source_map import SourceMap
from algosdk.transaction import Transaction
from algosdk.v2client.models import SimulateTraceConfig
# utils
import algokit_utils
from algokit_utils import AlgorandClient as _AlgoKitAlgorandClient

_APP_SPEC_JSON = r"""{"arcs": [22, 28], "bareActions": {"call": [], "create": ["NoOp"]}, "methods": [{"actions": {"call": ["NoOp"], "create": []}, "args": [], "name": "initialize", "returns": {"type": "string"}, "desc": "Initialize the AMM", "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "uint64", "name": "amount_a"}, {"type": "uint64", "name": "amount_b"}], "name": "add_liquidity", "returns": {"type": "string"}, "desc": "Add liquidity to the pool", "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "uint64", "name": "amount_in"}], "name": "swap_a_for_b", "returns": {"type": "string"}, "desc": "Swap token A for token B", "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "uint64", "name": "amount_in"}], "name": "swap_b_for_a", "returns": {"type": "string"}, "desc": "Swap token B for token A", "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [], "name": "get_reserves", "returns": {"type": "(uint64,uint64)"}, "desc": "Get current reserves", "events": [], "readonly": true, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "uint64", "name": "amount_in"}, {"type": "uint64", "name": "reserve_in"}, {"type": "uint64", "name": "reserve_out"}], "name": "get_amount_out", "returns": {"type": "uint64"}, "desc": "Calculate output amount for a given input", "events": [], "readonly": true, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [], "name": "get_user_liquidity", "returns": {"type": "(uint64,uint64,uint64)"}, "desc": "Get user's liquidity position", "events": [], "readonly": true, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [], "name": "get_pool_info", "returns": {"type": "(uint64,uint64,uint64,uint64)"}, "desc": "Get pool information", "events": [], "readonly": true, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "uint64", "name": "liquidity_amount"}], "name": "remove_liquidity", "returns": {"type": "string"}, "desc": "Remove liquidity from the pool", "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "uint64", "name": "new_fee"}], "name": "set_fee_rate", "returns": {"type": "string"}, "desc": "Set swap fee rate (admin only)", "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [], "name": "pause_amm", "returns": {"type": "string"}, "desc": "Pause the AMM (admin only)", "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [], "name": "unpause_amm", "returns": {"type": "string"}, "desc": "Unpause the AMM (admin only)", "events": [], "readonly": false, "recommendations": {}}], "name": "SimpleAMM", "state": {"keys": {"box": {}, "global": {"admin": {"key": "YWRtaW4=", "keyType": "AVMString", "valueType": "AVMBytes"}, "reserve_a": {"key": "cmVzZXJ2ZV9h", "keyType": "AVMString", "valueType": "AVMUint64"}, "reserve_b": {"key": "cmVzZXJ2ZV9i", "keyType": "AVMString", "valueType": "AVMUint64"}, "fee_rate": {"key": "ZmVlX3JhdGU=", "keyType": "AVMString", "valueType": "AVMUint64"}, "is_paused": {"key": "aXNfcGF1c2Vk", "keyType": "AVMString", "valueType": "AVMUint64"}, "total_liquidity": {"key": "dG90YWxfbGlxdWlkaXR5", "keyType": "AVMString", "valueType": "AVMUint64"}, "fee_denominator": {"key": "ZmVlX2Rlbm9taW5hdG9y", "keyType": "AVMString", "valueType": "AVMUint64"}}, "local": {"liquidity_balance": {"key": "bGlxdWlkaXR5X2JhbGFuY2U=", "keyType": "AVMString", "valueType": "AVMUint64"}, "token_a_deposited": {"key": "dG9rZW5fYV9kZXBvc2l0ZWQ=", "keyType": "AVMString", "valueType": "AVMUint64"}, "token_b_deposited": {"key": "dG9rZW5fYl9kZXBvc2l0ZWQ=", "keyType": "AVMString", "valueType": "AVMUint64"}}}, "maps": {"box": {}, "global": {}, "local": {}}, "schema": {"global": {"bytes": 1, "ints": 6}, "local": {"bytes": 0, "ints": 3}}}, "structs": {}, "byteCode": {"approval": "CiADAAECJhAJcmVzZXJ2ZV9hCXJlc2VydmVfYgQVH3x1D3RvdGFsX2xpcXVpZGl0eQlpc19wYXVzZWQRbGlxdWlkaXR5X2JhbGFuY2URdG9rZW5fYV9kZXBvc2l0ZWQRdG9rZW5fYl9kZXBvc2l0ZWQIZmVlX3JhdGUFYWRtaW4PZmVlX2Rlbm9taW5hdG9yBCBCOiAGIE91dDogG1N3YXAgY29tcGxldGVkIHN1Y2Nlc3NmdWxseQpBTU0gcGF1c2VkDEFNTSB1bnBhdXNlZDEYQAAGJwqB6AdnMRtBAYKCDASJetGnBGjV5U8EbF5rywTFUwyaBLWkPusEuZrAqgT75Zl3BEv1XbYEuRYIOgSR8SVDBLin9oAEOGCcmzYaAI4MAQ8A7wDTALcApwCKAHoAagBOADIAGgACIkMxGRREMRhEiAV7SRUWVwYCTFAqTFCwI0MxGRREMRhEiAVQSRUWVwYCTFAqTFCwI0MxGRREMRhENhoBF4gEz0kVFlcGAkxQKkxQsCNDMRkURDEYRDYaAReIA9JJFRZXBgJMUCpMULAjQzEZFEQxGESIA5oqTFCwI0MxGRREMRhEiANsKkxQsCNDMRkURDEYRDYaARc2GgIXNhoDF4gDQxYqTFCwI0MxGRREMRhEiAMmKkxQsCNDMRkURDEYRDYaAReIAqBJFRZXBgJMUCpMULAjQzEZFEQxGEQ2GgEXiAISSRUWVwYCTFAqTFCwI0MxGRREMRhENhoBFzYaAheIAIVJFRZXBgJMUCpMULAjQzEZFEQxGESIABlJFRZXBgJMUCpMULAjQzEZQP7UMRgURCNDMQAyCRJEJwkxAGcoImcpImcnCIEDZycEImcrImeAFVNpbXBsZUFNTSBpbml0aWFsaXplZLCAHEFNTSBpbml0aWFsaXplZCBzdWNjZXNzZnVsbHmJigIBgABHByInBGVEFESL/kEBVov/QQFRI0QiKGVMSU4CjAFEIillTIwCREAAx4sCQADCKIv+ZymL/2eL/ov/C0mMBUAAciIxACcFSwJmK0xnMQAiJwZjRIv+CDEAJwZPAmYxACInB2NEi/8IMQAnB08CZov+FoAVTGlxdWlkaXR5IGFkZGVkIC0gQTogTFAnC1CL/xZQsIAcTGlxdWlkaXR5IGFkZGVkIHN1Y2Nlc3NmdWxseYwAiYsFSSMIJAqMBiKMAIwHiwaLBwxBACKLAIEKDEEAGosFiwZJTgIKSwEIJAqLACMIjACMBowHQv/WiwdC/1KL/osCSU4CC4sBSU4CCklOAowEi/8LTwIKjAOL/w5BADaLAUmL/ggoTGeLAosECClMZyIrZUSL/gtMCjEAIicFY0RLAQgxACcFTwJmIitlRAgrTGdC/wWLAYsDCChMZ4sCSYv/CClMZyIrZUSL/wtMCkL/xyJC/qyKAQEiJwRlRBREi/9EIihlTElPAkQiKWVMTgJEQQBPiwFBAEojRIv/iwBJTgKLAUlOA4gCcklESUsCDkRPAov/CChMZ0xLAQkpTGeL/xaAEFN3YXAgQS0+QiAtIEluOiBMUCcMUEwWULAnDYwAiSJC/7OKAQEiJwRlRBREi/9EIihlTElPAkQiKWVMTgJEQQBPiwFBAEojRIv/iwFJTgKLAElOA4gCAElESUsCDkRPAov/CClMZ0xLAQkoTGeL/xaAEFN3YXAgQi0+QSAtIEluOiBMUCcMUEwWULAnDYwAiSJC/7MiKGVEFiIpZUQWUImKAwGL/Yv+i/+IAauJMQAiJwVjRBYxACInBmNEFjEAIicHY0QWTgJQTFCJIihlRBYiKWVEFiIrZUQWIicIZUQWTwNPA1BPAlBMUImKAQEiJwRlRBREi/9EMQAiJwVjREmL/w9EIihlRCIpZUQiK2VEi/9LAwtLAQpJTgJOBYv/SwMLSwEKSU4GTwRLAwkoTGdPA0wJKUxnTwKL/wkxACcFTwJmi/8JK0xnMQAiJwZjRA5BABExACInBmNEiwAJMQAnBk8CZjEAIicHY0SLAQ9BABExACInB2NEiwEJMQAnB08CZosAFoAXTGlxdWlkaXR5IHJlbW92ZWQgLSBBOiBMUCcLUIsBFlCwgB5MaXF1aWRpdHkgcmVtb3ZlZCBzdWNjZXNzZnVsbHmMAImKAQExACInCWVEEkQiJwplRIv/DUQiJwhlRCcIi/9nFoATRmVlIHVwZGF0ZWQgLSBPbGQ6IExQgAYgTmV3OiBQi/8WULCAHUZlZSByYXRlIHVwZGF0ZWQgc3VjY2Vzc2Z1bGx5iTEAIicJZUQSRCcEI2cnDrAnDokxACInCWVEEkQnBCJnJw+wJw+JigMBi/1Ei/5BACaL/0EAISNEIicKZUQiJwhlREsBTAmL/QtJi/8Li/5PAwtPAggKiSJC/9w=", "clear": "CoEBQw=="}, "desc": "Simple AMM for PT/YT token trading", "events": [], "networks": {}, "source": {"approval": "", "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"}, "sourceInfo": {"approval": {"pcOffsetMethod": "none", "sourceInfo": [{"pc": [718, 1079, 1193, 1394], "errorMessage": "AMM is paused"}, {"pc": [1082, 1196, 1397, 1754], "errorMessage": "Amount must be positive"}, {"pc": [730], "errorMessage": "Amounts must be positive"}, {"pc": [1630], "errorMessage": "Fee too high"}, {"pc": [1107, 1129, 1221, 1243, 1766], "errorMessage": "Insufficient liquidity"}, {"pc": [1409], "errorMessage": "Insufficient liquidity balance"}, {"pc": [1124, 1238], "errorMessage": "Insufficient output amount"}, {"pc": [320, 344, 368, 396, 424, 440, 456, 485, 501, 529, 557, 589], "errorMessage": "OnCompletion is not NoOp"}, {"pc": [1719], "errorMessage": "Only admin can pause"}, {"pc": [1621], "errorMessage": "Only admin can set fee"}, {"pc": [1738], "errorMessage": "Only admin can unpause"}, {"pc": [626], "errorMessage": "Only creator can initialize"}, {"pc": [618], "errorMessage": "can only call when creating"}, {"pc": [323, 347, 371, 399, 427, 443, 459, 488, 504, 532, 560, 592], "errorMessage": "can only call when not creating"}, {"pc": [1619, 1717, 1736], "errorMessage": "check self.admin exists"}, {"pc": [1626, 1771], "errorMessage": "check self.fee_denominator exists"}, {"pc": [1372, 1635, 1776], "errorMessage": "check self.fee_rate exists"}, {"pc": [716, 1077, 1191, 1392], "errorMessage": "check self.is_paused exists"}, {"pc": [1015, 1329, 1404], "errorMessage": "check self.liquidity_balance exists for account"}, {"pc": [740, 1090, 1204, 1301, 1356, 1413], "errorMessage": "check self.reserve_a exists"}, {"pc": [747, 1097, 1211, 1306, 1361, 1417], "errorMessage": "check self.reserve_b exists"}, {"pc": [792, 1337, 1485, 1496], "errorMessage": "check self.token_a_deposited exists for account"}, {"pc": [809, 1345, 1513, 1526], "errorMessage": "check self.token_b_deposited exists for account"}, {"pc": [1003, 1029, 1057, 1366, 1421], "errorMessage": "check self.total_liquidity exists"}]}, "clear": {"pcOffsetMethod": "none", "sourceInfo": []}}, "templateVariables": {}}"""
APP_SPEC = algokit_utils.Arc56Contract.from_json(_APP_SPEC_JSON)

def _parse_abi_args(args: object | None = None) -> list[object] | None:
    """Helper to parse ABI args into the format expected by underlying client"""
    if args is None:
        return None

    def convert_dataclass(value: object) -> object:
        if dataclasses.is_dataclass(value):
            return tuple(convert_dataclass(getattr(value, field.name)) for field in dataclasses.fields(value))
        elif isinstance(value, (list, tuple)):
            return type(value)(convert_dataclass(item) for item in value)
        return value

    match args:
        case tuple():
            method_args = list(args)
        case _ if dataclasses.is_dataclass(args):
            method_args = [getattr(args, field.name) for field in dataclasses.fields(args)]
        case _:
            raise ValueError("Invalid 'args' type. Expected 'tuple' or 'TypedDict' for respective typed arguments.")

    return [
        convert_dataclass(arg) if not isinstance(arg, algokit_utils.AppMethodCallTransactionArgument) else arg
        for arg in method_args
    ] if method_args else None

def _init_dataclass(cls: type, data: dict) -> object:
    """
    Recursively instantiate a dataclass of type `cls` from `data`.

    For each field on the dataclass, if the field type is also a dataclass
    and the corresponding data is a dict, instantiate that field recursively.
    """
    field_values = {}
    for field in dataclasses.fields(cls):
        field_value = data.get(field.name)
        # Check if the field expects another dataclass and the value is a dict.
        if dataclasses.is_dataclass(field.type) and isinstance(field_value, dict):
            field_values[field.name] = _init_dataclass(typing.cast(type, field.type), field_value)
        else:
            field_values[field.name] = field_value
    return cls(**field_values)

@dataclasses.dataclass(frozen=True, kw_only=True)
class AddLiquidityArgs:
    """Dataclass for add_liquidity arguments"""
    amount_a: int
    amount_b: int

    @property
    def abi_method_signature(self) -> str:
        return "add_liquidity(uint64,uint64)string"

@dataclasses.dataclass(frozen=True, kw_only=True)
class SwapAForBArgs:
    """Dataclass for swap_a_for_b arguments"""
    amount_in: int

    @property
    def abi_method_signature(self) -> str:
        return "swap_a_for_b(uint64)string"

@dataclasses.dataclass(frozen=True, kw_only=True)
class SwapBForAArgs:
    """Dataclass for swap_b_for_a arguments"""
    amount_in: int

    @property
    def abi_method_signature(self) -> str:
        return "swap_b_for_a(uint64)string"

@dataclasses.dataclass(frozen=True, kw_only=True)
class GetAmountOutArgs:
    """Dataclass for get_amount_out arguments"""
    amount_in: int
    reserve_in: int
    reserve_out: int

    @property
    def abi_method_signature(self) -> str:
        return "get_amount_out(uint64,uint64,uint64)uint64"

@dataclasses.dataclass(frozen=True, kw_only=True)
class RemoveLiquidityArgs:
    """Dataclass for remove_liquidity arguments"""
    liquidity_amount: int

    @property
    def abi_method_signature(self) -> str:
        return "remove_liquidity(uint64)string"

@dataclasses.dataclass(frozen=True, kw_only=True)
class SetFeeRateArgs:
    """Dataclass for set_fee_rate arguments"""
    new_fee: int

    @property
    def abi_method_signature(self) -> str:
        return "set_fee_rate(uint64)string"


class SimpleAmmParams:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    def initialize(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "initialize()string",
        }))

    def add_liquidity(
        self,
        args: tuple[int, int] | AddLiquidityArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "add_liquidity(uint64,uint64)string",
            "args": method_args,
        }))

    def swap_a_for_b(
        self,
        args: tuple[int] | SwapAForBArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "swap_a_for_b(uint64)string",
            "args": method_args,
        }))

    def swap_b_for_a(
        self,
        args: tuple[int] | SwapBForAArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "swap_b_for_a(uint64)string",
            "args": method_args,
        }))

    def get_reserves(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_reserves()(uint64,uint64)",
        }))

    def get_amount_out(
        self,
        args: tuple[int, int, int] | GetAmountOutArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_amount_out(uint64,uint64,uint64)uint64",
            "args": method_args,
        }))

    def get_user_liquidity(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_user_liquidity()(uint64,uint64,uint64)",
        }))

    def get_pool_info(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_pool_info()(uint64,uint64,uint64,uint64)",
        }))

    def remove_liquidity(
        self,
        args: tuple[int] | RemoveLiquidityArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "remove_liquidity(uint64)string",
            "args": method_args,
        }))

    def set_fee_rate(
        self,
        args: tuple[int] | SetFeeRateArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "set_fee_rate(uint64)string",
            "args": method_args,
        }))

    def pause_amm(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "pause_amm()string",
        }))

    def unpause_amm(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "unpause_amm()string",
        }))

    def clear_state(
        self,
        params: algokit_utils.AppClientBareCallParams | None = None,
        
    ) -> algokit_utils.AppCallParams:
        return self.app_client.params.bare.clear_state(
            params,
            
        )


class SimpleAmmCreateTransactionParams:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    def initialize(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "initialize()string",
        }))

    def add_liquidity(
        self,
        args: tuple[int, int] | AddLiquidityArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "add_liquidity(uint64,uint64)string",
            "args": method_args,
        }))

    def swap_a_for_b(
        self,
        args: tuple[int] | SwapAForBArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "swap_a_for_b(uint64)string",
            "args": method_args,
        }))

    def swap_b_for_a(
        self,
        args: tuple[int] | SwapBForAArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "swap_b_for_a(uint64)string",
            "args": method_args,
        }))

    def get_reserves(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_reserves()(uint64,uint64)",
        }))

    def get_amount_out(
        self,
        args: tuple[int, int, int] | GetAmountOutArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_amount_out(uint64,uint64,uint64)uint64",
            "args": method_args,
        }))

    def get_user_liquidity(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_user_liquidity()(uint64,uint64,uint64)",
        }))

    def get_pool_info(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_pool_info()(uint64,uint64,uint64,uint64)",
        }))

    def remove_liquidity(
        self,
        args: tuple[int] | RemoveLiquidityArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "remove_liquidity(uint64)string",
            "args": method_args,
        }))

    def set_fee_rate(
        self,
        args: tuple[int] | SetFeeRateArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "set_fee_rate(uint64)string",
            "args": method_args,
        }))

    def pause_amm(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "pause_amm()string",
        }))

    def unpause_amm(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "unpause_amm()string",
        }))

    def clear_state(
        self,
        params: algokit_utils.AppClientBareCallParams | None = None,
        
    ) -> Transaction:
        return self.app_client.create_transaction.bare.clear_state(
            params,
            
        )


class SimpleAmmSend:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    def initialize(
        self,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[str]:
    
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "initialize()string",
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[str], parsed_response)

    def add_liquidity(
        self,
        args: tuple[int, int] | AddLiquidityArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[str]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "add_liquidity(uint64,uint64)string",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[str], parsed_response)

    def swap_a_for_b(
        self,
        args: tuple[int] | SwapAForBArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[str]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "swap_a_for_b(uint64)string",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[str], parsed_response)

    def swap_b_for_a(
        self,
        args: tuple[int] | SwapBForAArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[str]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "swap_b_for_a(uint64)string",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[str], parsed_response)

    def get_reserves(
        self,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[tuple[int, int]]:
    
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_reserves()(uint64,uint64)",
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[tuple[int, int]], parsed_response)

    def get_amount_out(
        self,
        args: tuple[int, int, int] | GetAmountOutArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[int]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_amount_out(uint64,uint64,uint64)uint64",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[int], parsed_response)

    def get_user_liquidity(
        self,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[tuple[int, int, int]]:
    
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_user_liquidity()(uint64,uint64,uint64)",
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[tuple[int, int, int]], parsed_response)

    def get_pool_info(
        self,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[tuple[int, int, int, int]]:
    
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_pool_info()(uint64,uint64,uint64,uint64)",
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[tuple[int, int, int, int]], parsed_response)

    def remove_liquidity(
        self,
        args: tuple[int] | RemoveLiquidityArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[str]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "remove_liquidity(uint64)string",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[str], parsed_response)

    def set_fee_rate(
        self,
        args: tuple[int] | SetFeeRateArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[str]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "set_fee_rate(uint64)string",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[str], parsed_response)

    def pause_amm(
        self,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[str]:
    
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "pause_amm()string",
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[str], parsed_response)

    def unpause_amm(
        self,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[str]:
    
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "unpause_amm()string",
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[str], parsed_response)

    def clear_state(
        self,
        params: algokit_utils.AppClientBareCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[algokit_utils.ABIReturn]:
        return self.app_client.send.bare.clear_state(
            params,
            send_params=send_params,
        )


class GlobalStateValue(typing.TypedDict):
    """Shape of global_state state key values"""
    admin: bytes
    reserve_a: int
    reserve_b: int
    fee_rate: int
    is_paused: int
    total_liquidity: int
    fee_denominator: int

class LocalStateValue(typing.TypedDict):
    """Shape of local_state state key values"""
    liquidity_balance: int
    token_a_deposited: int
    token_b_deposited: int

class SimpleAmmState:
    """Methods to access state for the current SimpleAMM app"""

    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    @property
    def global_state(
        self
    ) -> "_GlobalState":
            """Methods to access global_state for the current app"""
            return _GlobalState(self.app_client)

    def local_state(
        self, address: str
    ) -> "_LocalState":
            """Methods to access local_state for the current app"""
            return _LocalState(self.app_client, address)

class _GlobalState:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client
        
        # Pre-generated mapping of value types to their struct classes
        self._struct_classes: dict[str, typing.Type[typing.Any]] = {}

    def get_all(self) -> GlobalStateValue:
        """Get all current keyed values from global_state state"""
        result = self.app_client.state.global_state.get_all()
        if not result:
            return typing.cast(GlobalStateValue, {})

        converted = {}
        for key, value in result.items():
            key_info = self.app_client.app_spec.state.keys.global_state.get(key)
            struct_class = self._struct_classes.get(key_info.value_type) if key_info else None
            converted[key] = (
                _init_dataclass(struct_class, value) if struct_class and isinstance(value, dict)
                else value
            )
        return typing.cast(GlobalStateValue, converted)

    @property
    def admin(self) -> bytes:
        """Get the current value of the admin key in global_state state"""
        value = self.app_client.state.global_state.get_value("admin")
        if isinstance(value, dict) and "AVMBytes" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMBytes"], value)  # type: ignore
        return typing.cast(bytes, value)

    @property
    def reserve_a(self) -> int:
        """Get the current value of the reserve_a key in global_state state"""
        value = self.app_client.state.global_state.get_value("reserve_a")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def reserve_b(self) -> int:
        """Get the current value of the reserve_b key in global_state state"""
        value = self.app_client.state.global_state.get_value("reserve_b")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def fee_rate(self) -> int:
        """Get the current value of the fee_rate key in global_state state"""
        value = self.app_client.state.global_state.get_value("fee_rate")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def is_paused(self) -> int:
        """Get the current value of the is_paused key in global_state state"""
        value = self.app_client.state.global_state.get_value("is_paused")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def total_liquidity(self) -> int:
        """Get the current value of the total_liquidity key in global_state state"""
        value = self.app_client.state.global_state.get_value("total_liquidity")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def fee_denominator(self) -> int:
        """Get the current value of the fee_denominator key in global_state state"""
        value = self.app_client.state.global_state.get_value("fee_denominator")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

class _LocalState:
    def __init__(self, app_client: algokit_utils.AppClient, address: str):
        self.app_client = app_client
        self.address = address
        # Pre-generated mapping of value types to their struct classes
        self._struct_classes: dict[str, typing.Type[typing.Any]] = {}

    def get_all(self) -> LocalStateValue:
        """Get all current keyed values from local_state state"""
        result = self.app_client.state.local_state(self.address).get_all()
        if not result:
            return typing.cast(LocalStateValue, {})

        converted = {}
        for key, value in result.items():
            key_info = self.app_client.app_spec.state.keys.local_state.get(key)
            struct_class = self._struct_classes.get(key_info.value_type) if key_info else None
            converted[key] = (
                _init_dataclass(struct_class, value) if struct_class and isinstance(value, dict)
                else value
            )
        return typing.cast(LocalStateValue, converted)

    @property
    def liquidity_balance(self) -> int:
        """Get the current value of the liquidity_balance key in local_state state"""
        value = self.app_client.state.local_state(self.address).get_value("liquidity_balance")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def token_a_deposited(self) -> int:
        """Get the current value of the token_a_deposited key in local_state state"""
        value = self.app_client.state.local_state(self.address).get_value("token_a_deposited")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def token_b_deposited(self) -> int:
        """Get the current value of the token_b_deposited key in local_state state"""
        value = self.app_client.state.local_state(self.address).get_value("token_b_deposited")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

class SimpleAmmClient:
    """Client for interacting with SimpleAMM smart contract"""

    @typing.overload
    def __init__(self, app_client: algokit_utils.AppClient) -> None: ...
    
    @typing.overload
    def __init__(
        self,
        *,
        algorand: _AlgoKitAlgorandClient,
        app_id: int,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> None: ...

    def __init__(
        self,
        app_client: algokit_utils.AppClient | None = None,
        *,
        algorand: _AlgoKitAlgorandClient | None = None,
        app_id: int | None = None,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> None:
        if app_client:
            self.app_client = app_client
        elif algorand and app_id:
            self.app_client = algokit_utils.AppClient(
                algokit_utils.AppClientParams(
                    algorand=algorand,
                    app_spec=APP_SPEC,
                    app_id=app_id,
                    app_name=app_name,
                    default_sender=default_sender,
                    default_signer=default_signer,
                    approval_source_map=approval_source_map,
                    clear_source_map=clear_source_map,
                )
            )
        else:
            raise ValueError("Either app_client or algorand and app_id must be provided")
    
        self.params = SimpleAmmParams(self.app_client)
        self.create_transaction = SimpleAmmCreateTransactionParams(self.app_client)
        self.send = SimpleAmmSend(self.app_client)
        self.state = SimpleAmmState(self.app_client)

    @staticmethod
    def from_creator_and_name(
        creator_address: str,
        app_name: str,
        algorand: _AlgoKitAlgorandClient,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
        ignore_cache: bool | None = None,
        app_lookup_cache: algokit_utils.ApplicationLookup | None = None,
    ) -> "SimpleAmmClient":
        return SimpleAmmClient(
            algokit_utils.AppClient.from_creator_and_name(
                creator_address=creator_address,
                app_name=app_name,
                app_spec=APP_SPEC,
                algorand=algorand,
                default_sender=default_sender,
                default_signer=default_signer,
                approval_source_map=approval_source_map,
                clear_source_map=clear_source_map,
                ignore_cache=ignore_cache,
                app_lookup_cache=app_lookup_cache,
            )
        )
    
    @staticmethod
    def from_network(
        algorand: _AlgoKitAlgorandClient,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> "SimpleAmmClient":
        return SimpleAmmClient(
            algokit_utils.AppClient.from_network(
                app_spec=APP_SPEC,
                algorand=algorand,
                app_name=app_name,
                default_sender=default_sender,
                default_signer=default_signer,
                approval_source_map=approval_source_map,
                clear_source_map=clear_source_map,
            )
        )

    @property
    def app_id(self) -> int:
        return self.app_client.app_id
    
    @property
    def app_address(self) -> str:
        return self.app_client.app_address
    
    @property
    def app_name(self) -> str:
        return self.app_client.app_name
    
    @property
    def app_spec(self) -> algokit_utils.Arc56Contract:
        return self.app_client.app_spec
    
    @property
    def algorand(self) -> _AlgoKitAlgorandClient:
        return self.app_client.algorand

    def clone(
        self,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> "SimpleAmmClient":
        return SimpleAmmClient(
            self.app_client.clone(
                app_name=app_name,
                default_sender=default_sender,
                default_signer=default_signer,
                approval_source_map=approval_source_map,
                clear_source_map=clear_source_map,
            )
        )

    def new_group(self) -> "SimpleAmmComposer":
        return SimpleAmmComposer(self)

    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["initialize()string"],
        return_value: algokit_utils.ABIReturn | None
    ) -> str | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["add_liquidity(uint64,uint64)string"],
        return_value: algokit_utils.ABIReturn | None
    ) -> str | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["swap_a_for_b(uint64)string"],
        return_value: algokit_utils.ABIReturn | None
    ) -> str | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["swap_b_for_a(uint64)string"],
        return_value: algokit_utils.ABIReturn | None
    ) -> str | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["get_reserves()(uint64,uint64)"],
        return_value: algokit_utils.ABIReturn | None
    ) -> tuple[int, int] | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["get_amount_out(uint64,uint64,uint64)uint64"],
        return_value: algokit_utils.ABIReturn | None
    ) -> int | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["get_user_liquidity()(uint64,uint64,uint64)"],
        return_value: algokit_utils.ABIReturn | None
    ) -> tuple[int, int, int] | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["get_pool_info()(uint64,uint64,uint64,uint64)"],
        return_value: algokit_utils.ABIReturn | None
    ) -> tuple[int, int, int, int] | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["remove_liquidity(uint64)string"],
        return_value: algokit_utils.ABIReturn | None
    ) -> str | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["set_fee_rate(uint64)string"],
        return_value: algokit_utils.ABIReturn | None
    ) -> str | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["pause_amm()string"],
        return_value: algokit_utils.ABIReturn | None
    ) -> str | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["unpause_amm()string"],
        return_value: algokit_utils.ABIReturn | None
    ) -> str | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: str,
        return_value: algokit_utils.ABIReturn | None
    ) -> algokit_utils.ABIValue | algokit_utils.ABIStruct | None: ...

    def decode_return_value(
        self,
        method: str,
        return_value: algokit_utils.ABIReturn | None
    ) -> algokit_utils.ABIValue | algokit_utils.ABIStruct | None | int | str | tuple[int, int, int, int] | tuple[int, int, int] | tuple[int, int]:
        """Decode ABI return value for the given method."""
        if return_value is None:
            return None
    
        arc56_method = self.app_spec.get_arc56_method(method)
        decoded = return_value.get_arc56_value(arc56_method, self.app_spec.structs)
    
        # If method returns a struct, convert the dict to appropriate dataclass
        if (arc56_method and
            arc56_method.returns and
            arc56_method.returns.struct and
            isinstance(decoded, dict)):
            struct_class = globals().get(arc56_method.returns.struct)
            if struct_class:
                return struct_class(**typing.cast(dict, decoded))
        return decoded


@dataclasses.dataclass(frozen=True)
class SimpleAmmBareCallCreateParams(algokit_utils.AppClientBareCallCreateParams):
    """Parameters for creating SimpleAmm contract with bare calls"""
    on_complete: typing.Literal[OnComplete.NoOpOC] | None = None

    def to_algokit_utils_params(self) -> algokit_utils.AppClientBareCallCreateParams:
        return algokit_utils.AppClientBareCallCreateParams(**self.__dict__)

class SimpleAmmFactory(algokit_utils.TypedAppFactoryProtocol[SimpleAmmBareCallCreateParams, None, None]):
    """Factory for deploying and managing SimpleAmmClient smart contracts"""

    def __init__(
        self,
        algorand: _AlgoKitAlgorandClient,
        *,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        version: str | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None,
    ):
        self.app_factory = algokit_utils.AppFactory(
            params=algokit_utils.AppFactoryParams(
                algorand=algorand,
                app_spec=APP_SPEC,
                app_name=app_name,
                default_sender=default_sender,
                default_signer=default_signer,
                version=version,
                compilation_params=compilation_params,
            )
        )
        self.params = SimpleAmmFactoryParams(self.app_factory)
        self.create_transaction = SimpleAmmFactoryCreateTransaction(self.app_factory)
        self.send = SimpleAmmFactorySend(self.app_factory)

    @property
    def app_name(self) -> str:
        return self.app_factory.app_name
    
    @property
    def app_spec(self) -> algokit_utils.Arc56Contract:
        return self.app_factory.app_spec
    
    @property
    def algorand(self) -> _AlgoKitAlgorandClient:
        return self.app_factory.algorand

    def deploy(
        self,
        *,
        on_update: algokit_utils.OnUpdate | None = None,
        on_schema_break: algokit_utils.OnSchemaBreak | None = None,
        create_params: SimpleAmmBareCallCreateParams | None = None,
        update_params: None = None,
        delete_params: None = None,
        existing_deployments: algokit_utils.ApplicationLookup | None = None,
        ignore_cache: bool = False,
        app_name: str | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None,
        send_params: algokit_utils.SendParams | None = None,
    ) -> tuple[SimpleAmmClient, algokit_utils.AppFactoryDeployResult]:
        """Deploy the application"""
        deploy_response = self.app_factory.deploy(
            on_update=on_update,
            on_schema_break=on_schema_break,
            create_params=create_params.to_algokit_utils_params() if create_params else None,
            update_params=update_params,
            delete_params=delete_params,
            existing_deployments=existing_deployments,
            ignore_cache=ignore_cache,
            app_name=app_name,
            compilation_params=compilation_params,
            send_params=send_params,
        )

        return SimpleAmmClient(deploy_response[0]), deploy_response[1]

    def get_app_client_by_creator_and_name(
        self,
        creator_address: str,
        app_name: str,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        ignore_cache: bool | None = None,
        app_lookup_cache: algokit_utils.ApplicationLookup | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> SimpleAmmClient:
        """Get an app client by creator address and name"""
        return SimpleAmmClient(
            self.app_factory.get_app_client_by_creator_and_name(
                creator_address,
                app_name,
                default_sender,
                default_signer,
                ignore_cache,
                app_lookup_cache,
                approval_source_map,
                clear_source_map,
            )
        )

    def get_app_client_by_id(
        self,
        app_id: int,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> SimpleAmmClient:
        """Get an app client by app ID"""
        return SimpleAmmClient(
            self.app_factory.get_app_client_by_id(
                app_id,
                app_name,
                default_sender,
                default_signer,
                approval_source_map,
                clear_source_map,
            )
        )


class SimpleAmmFactoryParams:
    """Parameters for creating transactions for SimpleAmm contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory
        self.create = SimpleAmmFactoryCreateParams(app_factory)
        self.update = SimpleAmmFactoryUpdateParams(app_factory)
        self.delete = SimpleAmmFactoryDeleteParams(app_factory)

class SimpleAmmFactoryCreateParams:
    """Parameters for 'create' operations of SimpleAmm contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateParams:
        """Creates an instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.bare.create(
            algokit_utils.AppFactoryCreateParams(**dataclasses.asdict(params)),
            compilation_params=compilation_params)

    def initialize(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the initialize()string ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "initialize()string",
                "args": None,
                }
            ),
            compilation_params=compilation_params
        )

    def add_liquidity(
        self,
        args: tuple[int, int] | AddLiquidityArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the add_liquidity(uint64,uint64)string ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "add_liquidity(uint64,uint64)string",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def swap_a_for_b(
        self,
        args: tuple[int] | SwapAForBArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the swap_a_for_b(uint64)string ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "swap_a_for_b(uint64)string",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def swap_b_for_a(
        self,
        args: tuple[int] | SwapBForAArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the swap_b_for_a(uint64)string ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "swap_b_for_a(uint64)string",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def get_reserves(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the get_reserves()(uint64,uint64) ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "get_reserves()(uint64,uint64)",
                "args": None,
                }
            ),
            compilation_params=compilation_params
        )

    def get_amount_out(
        self,
        args: tuple[int, int, int] | GetAmountOutArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the get_amount_out(uint64,uint64,uint64)uint64 ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "get_amount_out(uint64,uint64,uint64)uint64",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def get_user_liquidity(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the get_user_liquidity()(uint64,uint64,uint64) ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "get_user_liquidity()(uint64,uint64,uint64)",
                "args": None,
                }
            ),
            compilation_params=compilation_params
        )

    def get_pool_info(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the get_pool_info()(uint64,uint64,uint64,uint64) ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "get_pool_info()(uint64,uint64,uint64,uint64)",
                "args": None,
                }
            ),
            compilation_params=compilation_params
        )

    def remove_liquidity(
        self,
        args: tuple[int] | RemoveLiquidityArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the remove_liquidity(uint64)string ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "remove_liquidity(uint64)string",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def set_fee_rate(
        self,
        args: tuple[int] | SetFeeRateArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the set_fee_rate(uint64)string ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "set_fee_rate(uint64)string",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def pause_amm(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the pause_amm()string ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "pause_amm()string",
                "args": None,
                }
            ),
            compilation_params=compilation_params
        )

    def unpause_amm(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the unpause_amm()string ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "unpause_amm()string",
                "args": None,
                }
            ),
            compilation_params=compilation_params
        )

class SimpleAmmFactoryUpdateParams:
    """Parameters for 'update' operations of SimpleAmm contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        
    ) -> algokit_utils.AppUpdateParams:
        """Updates an instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.bare.deploy_update(
            algokit_utils.AppClientBareCallParams(**dataclasses.asdict(params)),
            )

class SimpleAmmFactoryDeleteParams:
    """Parameters for 'delete' operations of SimpleAmm contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        
    ) -> algokit_utils.AppDeleteParams:
        """Deletes an instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.bare.deploy_delete(
            algokit_utils.AppClientBareCallParams(**dataclasses.asdict(params)),
            )


class SimpleAmmFactoryCreateTransaction:
    """Create transactions for SimpleAmm contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory
        self.create = SimpleAmmFactoryCreateTransactionCreate(app_factory)


class SimpleAmmFactoryCreateTransactionCreate:
    """Create new instances of SimpleAmm contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
    ) -> Transaction:
        """Creates a new instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.create_transaction.bare.create(
            algokit_utils.AppFactoryCreateParams(**dataclasses.asdict(params)),
        )


class SimpleAmmFactorySend:
    """Send calls to SimpleAmm contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory
        self.create = SimpleAmmFactorySendCreate(app_factory)


class SimpleAmmFactorySendCreate:
    """Send create calls to SimpleAmm contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        send_params: algokit_utils.SendParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None,
    ) -> tuple[SimpleAmmClient, algokit_utils.SendAppCreateTransactionResult]:
        """Creates a new instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        result = self.app_factory.send.bare.create(
            algokit_utils.AppFactoryCreateParams(**dataclasses.asdict(params)),
            send_params=send_params,
            compilation_params=compilation_params
        )
        return SimpleAmmClient(result[0]), result[1]


class SimpleAmmComposer:
    """Composer for creating transaction groups for SimpleAmm contract calls"""

    def __init__(self, client: "SimpleAmmClient"):
        self.client = client
        self._composer = client.algorand.new_group()
        self._result_mappers: list[typing.Callable[[algokit_utils.ABIReturn | None], object] | None] = []

    def initialize(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "SimpleAmmComposer":
        self._composer.add_app_call_method_call(
            self.client.params.initialize(
                
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "initialize()string", v
            )
        )
        return self

    def add_liquidity(
        self,
        args: tuple[int, int] | AddLiquidityArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "SimpleAmmComposer":
        self._composer.add_app_call_method_call(
            self.client.params.add_liquidity(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "add_liquidity(uint64,uint64)string", v
            )
        )
        return self

    def swap_a_for_b(
        self,
        args: tuple[int] | SwapAForBArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "SimpleAmmComposer":
        self._composer.add_app_call_method_call(
            self.client.params.swap_a_for_b(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "swap_a_for_b(uint64)string", v
            )
        )
        return self

    def swap_b_for_a(
        self,
        args: tuple[int] | SwapBForAArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "SimpleAmmComposer":
        self._composer.add_app_call_method_call(
            self.client.params.swap_b_for_a(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "swap_b_for_a(uint64)string", v
            )
        )
        return self

    def get_reserves(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "SimpleAmmComposer":
        self._composer.add_app_call_method_call(
            self.client.params.get_reserves(
                
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "get_reserves()(uint64,uint64)", v
            )
        )
        return self

    def get_amount_out(
        self,
        args: tuple[int, int, int] | GetAmountOutArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "SimpleAmmComposer":
        self._composer.add_app_call_method_call(
            self.client.params.get_amount_out(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "get_amount_out(uint64,uint64,uint64)uint64", v
            )
        )
        return self

    def get_user_liquidity(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "SimpleAmmComposer":
        self._composer.add_app_call_method_call(
            self.client.params.get_user_liquidity(
                
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "get_user_liquidity()(uint64,uint64,uint64)", v
            )
        )
        return self

    def get_pool_info(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "SimpleAmmComposer":
        self._composer.add_app_call_method_call(
            self.client.params.get_pool_info(
                
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "get_pool_info()(uint64,uint64,uint64,uint64)", v
            )
        )
        return self

    def remove_liquidity(
        self,
        args: tuple[int] | RemoveLiquidityArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "SimpleAmmComposer":
        self._composer.add_app_call_method_call(
            self.client.params.remove_liquidity(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "remove_liquidity(uint64)string", v
            )
        )
        return self

    def set_fee_rate(
        self,
        args: tuple[int] | SetFeeRateArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "SimpleAmmComposer":
        self._composer.add_app_call_method_call(
            self.client.params.set_fee_rate(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "set_fee_rate(uint64)string", v
            )
        )
        return self

    def pause_amm(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "SimpleAmmComposer":
        self._composer.add_app_call_method_call(
            self.client.params.pause_amm(
                
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "pause_amm()string", v
            )
        )
        return self

    def unpause_amm(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "SimpleAmmComposer":
        self._composer.add_app_call_method_call(
            self.client.params.unpause_amm(
                
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "unpause_amm()string", v
            )
        )
        return self

    def clear_state(
        self,
        *,
        args: list[bytes] | None = None,
        params: algokit_utils.CommonAppCallParams | None = None,
    ) -> "SimpleAmmComposer":
        params=params or algokit_utils.CommonAppCallParams()
        self._composer.add_app_call(
            self.client.params.clear_state(
                algokit_utils.AppClientBareCallParams(
                    **{
                        **dataclasses.asdict(params),
                        "args": args
                    }
                )
            )
        )
        return self
    
    def add_transaction(
        self, txn: Transaction, signer: TransactionSigner | None = None
    ) -> "SimpleAmmComposer":
        self._composer.add_transaction(txn, signer)
        return self
    
    def composer(self) -> algokit_utils.TransactionComposer:
        return self._composer
    
    def simulate(
        self,
        allow_more_logs: bool | None = None,
        allow_empty_signatures: bool | None = None,
        allow_unnamed_resources: bool | None = None,
        extra_opcode_budget: int | None = None,
        exec_trace_config: SimulateTraceConfig | None = None,
        simulation_round: int | None = None,
        skip_signatures: bool | None = None,
    ) -> algokit_utils.SendAtomicTransactionComposerResults:
        return self._composer.simulate(
            allow_more_logs=allow_more_logs,
            allow_empty_signatures=allow_empty_signatures,
            allow_unnamed_resources=allow_unnamed_resources,
            extra_opcode_budget=extra_opcode_budget,
            exec_trace_config=exec_trace_config,
            simulation_round=simulation_round,
            skip_signatures=skip_signatures,
        )
    
    def send(
        self,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAtomicTransactionComposerResults:
        return self._composer.send(send_params)
