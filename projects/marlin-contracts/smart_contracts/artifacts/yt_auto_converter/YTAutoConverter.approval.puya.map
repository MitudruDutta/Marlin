{
  "version": 3,
  "sources": [
    "../../yt_auto_converter/contract.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4CQ;;;;;;;;;;;;;;AAAoB;;;AAApB;AACA;;AAAuB;AAAvB;AAfR;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAyRK;;AAAA;AAAA;AAAA;;AAAA;AAzRL;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAyRK;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAjBA;;AAAA;AAAA;AAAA;;AAAA;AAxQL;;;AAAA;AAAA;;;AAAA;AAwQK;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AA3BA;;AAAA;AAAA;AAAA;;AAAA;AA7OL;;;AAAA;AA6OK;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AARA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AATA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AATA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAZA;;AAAA;AAAA;AAAA;;AAAA;AAvML;;;AAAA;AAuMK;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AARA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAXA;;AAAA;AAAA;AAAA;;AAAA;AApLL;;;AAAA;AAoLK;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAfA;;AAAA;AAAA;AAAA;;AAAA;AArKL;;;AAAA;AAqKK;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AATA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AARA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAVA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAnBA;;AAAA;AAAA;AAAA;;AAAA;AAvHL;;;AAAA;;;AAuHK;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AA5CA;;AAAA;AAAA;AAAA;;AAAA;AA3EL;;;AAAA;;;AAAA;;;AAAA;AAAA;;;AAAA;AA2EK;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAVA;;AAAA;AAAA;AAAA;;AAAA;AAjEL;;;AAAA;AAiEK;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAnBA;;AAAA;AAAA;AAAA;;AAAA;AA9CL;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AA8CK;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AArBA;;AAAA;AAAA;AAAA;;AAAA;AAzBL;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAyBK;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAzBL;;AAAA;;;;;;;;;AAyBA;;;AAQe;;AAAc;;AAAd;AAAP;AAEA;AAAmB;;AAAnB;AACA;;AAAA;;AAAA;AACA;;AAAA;;AAAA;AACA;;AAAA;;AAAA;AACA;AAA4B;;AAA5B;AACA;;AAAuB;AAAvB;AACA;;AAA+B;AAA/B;AAEI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAJ;AACO;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAP;AAER;;;AAQQ;;AAAA;AACO;;AAAW;;AAAX;AAAP;AAEwB;;AAAxB;;AAAA;;AAAA;AACqB;;AAArB;;AAAA;;AAAA;AACmB;;AAAnB;;AAAA;;AAAA;AACyB;;AAAzB;;AAAuC;AAAvC;AAE2C;;AAAA;AAAvC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAA0D;;;;;;;;;;;;;;AAA1D;AAA4E;;AAAA;AAA5E;AAAJ;AACO;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAP;AAER;;;AAGQ;;AAAA;AAE8C;;AAAhB;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAd;;AAAhB;AAAA;;AAAA;AAEwC;;AAAA;AAApC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAJ;AACO;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAP;AAER;;;AAQe;AAAA;;AAAA;AAAA;AAAA;AAAP;AACO;;AAAA;;AAAA;AAAP;AAK+B;;AAAxB;AAAA;;AAAA;AAAA;AAAuC;AAAvC;AAAP;AACgC;;AAAzB;AAAA;;AAAA;AAAA;AAAA;AAAP;AAIsC;;AAArB;AAAA;;AAAA;AAAA;AACjB;AAGkC;;AAAhB;AAAA;AAAA;AAAA;AAClB;AAAA;AAGgC;AAAA;AAAA;AAAA;AAAlB;;AAAA;AAAgD;AAAA;;AAAA;AAAA;AAAjD;AACb;;AAAA;AAAoB;AA0JF;;;AACH;AAA6B;AAA9B;AAEP;AAAA;;AAAA;AAAP;AAvJgB;;AAAhB;AAA8B;AAA9B;AAC8C;;AAAhB;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAd;;AAAhB;;AAAA;;AAAA;AACyB;;AAAzB;;AAAuC;AAAvC;AAG+B;AAAA;;AAAA;AAAA;AAA+B;AAA/B;AAA/B;;AAAA;AAAA;AAEoC;AAAA;AAAhC;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAA2D;;;;;;;AAA3D;AAAsE;AAAA;AAAtE;AAAJ;AACO;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAP;AAER;;;AAImC;;AAAxB;AAAA;;AAAA;AAAA;AAAX;;;AACmB;AAAP;AAEwB;;AAAzB;AAAA;;AAAA;AAAA;AAAwC;AAAxC;AAAX;;;AACmB;AAAP;AAEe;;AAAhB;AAAA;AAAA;AAAA;AAAX;;;AACmB;AAAP;AAEoB;;AAArB;AAAA;;AAAA;AAAA;AAAX;;;AACmB;AAAP;AAGG;AAAP;AAMwC;;AAAxB;AAAA;;AAAA;AAAA;AAAZ;AACiC;;AAArB;AAAA;;AAAA;AAAA;AAAZ;AAC+B;;AAAnB;AAAA;;AAAA;AAAA;AAAZ;AACqC;;AAAzB;AAAA;;AAAA;AAAA;AAAZ;AAJG;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAP;AAWgC;;AAAhB;AAAA;AAAA;AAAA;AAAZ;AAC4B;;AAAhB;AAAA;;AAAA;AAAA;AAAZ;AAFG;AAAP;AASgB;AAAA;AAAA;AAAA;AAAZ;AACY;AAAA;;AAAA;AAAA;AAAZ;AACY;AAAA;;AAAA;AAAA;AAAZ;AAHG;;AAAA;AAAA;AAAA;AAAP;AAMR;;;AAGA;;AAAA;;;AACmB;;;;;;;;;;;;;;;;;;AAAP;AAEsB;AAAA;AAAA;AAAA;AAAZ;;AAAA;AAA0C;AAAA;;AAAA;AAAA;AAA3C;AACb;;AAAA;;AAAoB;AAGD;AAAoB;;AAApB;AAAmC;AAApC;AACJ;AAEK;AAA0B;AAAA;AAAtC;AAAP;AAER;;;AAGe;;AAAW;;AAAX;AAAP;AAGmB;;AAAnB;;AAAA;;AAAA;AAEkC;;AAAA;AAA9B;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAJ;AACO;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAP;AAKmB;;AAAnB;;AAAiC;AAAjC;AAEI;;;;;;;;;;;;;;;;;;AAAJ;AACO;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAP;AAER;;;AAGe;;AAAoB;AAAA;AAAA;AAAA;AAApB;AAAP;AACO;;AAAW;;;AAAX;AAAP;AAEU;AAAA;AAAA;AAAA;AACV;AAAA;;AAAA;AAEwC;AAApC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAuD;;;;;;;;AAAvD;AAAmE;;AAAA;AAAnE;AAAJ;AACO;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAP;AAKO;;AAAoB;AAAA;AAAA;AAAA;AAApB;AAAP;AACA;;AAAuB;AAAvB;AAEI;;AAAJ;AACO;;AAAP;AAKO;;AAAoB;AAAA;AAAA;AAAA;AAApB;AAAP;AACA;;AAAuB;AAAvB;AAEI;;AAAJ;AACO;;AAAP;AAKwB;;AAAxB;;AAAsC;AAAtC;AAEI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAJ;AACO;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAP;AAER;;;AAGQ;;AAAA;AAEqC;;AAAhB;AAAA;;AAAA;AAAA;AACd;AAAA;;AAAA;AAAP;AAE8B;;AAAA;AAAd;;AAAhB;;AAAA;;AAAA;AAEwC;;AAAA;AAApC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAJ;AACO;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAP;AAgBR;;;;;AAGA;;AAAA;;;AACmB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAP;AAAA;AAEkC;;AAArB;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAEd;;AAAA;AAAX;;;AACmB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAP;AAAA;AAEqB;;AAAA;;AAAA;AAAkC;;AAAnC;AAApB;;AAAmB;AACG;;AAAnB;AAAf;;;AACuB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAP;AAAA;AAEO;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAP;AAAA;AAEhB;;;AAQe;;AAAoB;AAAA;AAAA;AAAA;AAApB;AAAP;AAEA;;AAAA;;AAAA;AACA;;AAAA;;AAAA;AACA;;AAAA;;AAAA;AAEI;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAJ;AACO;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAP",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "smart_contracts.yt_auto_converter.contract.YTAutoConverter.__algopy_entrypoint_with_init",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1 10000"
    },
    "7": {
      "op": "bytecblock 0x151f7c75 \"conversion_fee\" \"yt_balance\" \"admin\" \"is_paused\" \"conversion_enabled\" \"threshold_price\" \"conversion_executed\" \"pt_balance\" \"total_conversions\" \"user_maturity\" \"fee_denominator\" \"oracle_address\" \"tokenization_address\" \"amm_address\" 0x436f6e76657274657220706175736564 0x436f6e76657274657220756e706175736564"
    },
    "254": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "256": {
      "op": "bnz main_after_if_else@2",
      "stack_out": []
    },
    "259": {
      "op": "pushbytes \"max_slippage\"",
      "defined_out": [
        "\"max_slippage\""
      ],
      "stack_out": [
        "\"max_slippage\""
      ]
    },
    "273": {
      "op": "pushint 500 // 500",
      "defined_out": [
        "\"max_slippage\"",
        "500"
      ],
      "stack_out": [
        "\"max_slippage\"",
        "500"
      ]
    },
    "276": {
      "op": "app_global_put",
      "stack_out": []
    },
    "277": {
      "op": "bytec 11 // \"fee_denominator\"",
      "defined_out": [
        "\"fee_denominator\""
      ],
      "stack_out": [
        "\"fee_denominator\""
      ]
    },
    "279": {
      "op": "intc_2 // 10000",
      "defined_out": [
        "\"fee_denominator\"",
        "10000"
      ],
      "stack_out": [
        "\"fee_denominator\"",
        "10000"
      ]
    },
    "280": {
      "op": "app_global_put",
      "stack_out": []
    },
    "281": {
      "block": "main_after_if_else@2",
      "stack_in": [],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#2"
      ],
      "stack_out": [
        "tmp%0#2"
      ]
    },
    "283": {
      "op": "bz main_bare_routing@23",
      "stack_out": []
    },
    "286": {
      "op": "pushbytess 0x6a69df5d 0x6b9aaf34 0x39e88c59 0x6ad7c302 0xa657e2f9 0x6676d951 0xfe4edfd9 0x6bd1428c 0x54fbec35 0x5991a301 0xc730d22c 0x1af03700 0x452654b4 0xd3282043 0x11638ec2 0xc0205dad 0x69ff0150 0x7161350f // method \"initialize(byte[],byte[],byte[])string\", method \"configure_conversion(uint64,uint64,uint64)string\", method \"deposit_yt_tokens(uint64)string\", method \"execute_conversion(byte[],uint64,uint64)string\", method \"can_execute_conversion(byte[])uint64\", method \"get_user_config()(uint64,uint64,uint64,uint64)\", method \"get_user_balances()(uint64,uint64)\", method \"get_conversion_info()(uint64,uint64,uint64)\", method \"calculate_conversion_output(uint64)(uint64,uint64)\", method \"add_maturity(uint64)string\", method \"remove_maturity()string\", method \"set_conversion_fee(uint64)string\", method \"pause_converter()string\", method \"unpause_converter()string\", method \"emergency_disable_conversion()string\", method \"withdraw_pt_tokens(uint64)string\", method \"get_ai_recommendation(uint64,uint64)(uint64,string)\", method \"update_addresses(byte[],byte[],byte[])string\"",
      "defined_out": [
        "Method(add_maturity(uint64)string)",
        "Method(calculate_conversion_output(uint64)(uint64,uint64))",
        "Method(can_execute_conversion(byte[])uint64)",
        "Method(configure_conversion(uint64,uint64,uint64)string)",
        "Method(deposit_yt_tokens(uint64)string)",
        "Method(emergency_disable_conversion()string)",
        "Method(execute_conversion(byte[],uint64,uint64)string)",
        "Method(get_ai_recommendation(uint64,uint64)(uint64,string))",
        "Method(get_conversion_info()(uint64,uint64,uint64))",
        "Method(get_user_balances()(uint64,uint64))",
        "Method(get_user_config()(uint64,uint64,uint64,uint64))",
        "Method(initialize(byte[],byte[],byte[])string)",
        "Method(pause_converter()string)",
        "Method(remove_maturity()string)",
        "Method(set_conversion_fee(uint64)string)",
        "Method(unpause_converter()string)",
        "Method(update_addresses(byte[],byte[],byte[])string)",
        "Method(withdraw_pt_tokens(uint64)string)"
      ],
      "stack_out": [
        "Method(initialize(byte[],byte[],byte[])string)",
        "Method(configure_conversion(uint64,uint64,uint64)string)",
        "Method(deposit_yt_tokens(uint64)string)",
        "Method(execute_conversion(byte[],uint64,uint64)string)",
        "Method(can_execute_conversion(byte[])uint64)",
        "Method(get_user_config()(uint64,uint64,uint64,uint64))",
        "Method(get_user_balances()(uint64,uint64))",
        "Method(get_conversion_info()(uint64,uint64,uint64))",
        "Method(calculate_conversion_output(uint64)(uint64,uint64))",
        "Method(add_maturity(uint64)string)",
        "Method(remove_maturity()string)",
        "Method(set_conversion_fee(uint64)string)",
        "Method(pause_converter()string)",
        "Method(unpause_converter()string)",
        "Method(emergency_disable_conversion()string)",
        "Method(withdraw_pt_tokens(uint64)string)",
        "Method(get_ai_recommendation(uint64,uint64)(uint64,string))",
        "Method(update_addresses(byte[],byte[],byte[])string)"
      ]
    },
    "378": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(add_maturity(uint64)string)",
        "Method(calculate_conversion_output(uint64)(uint64,uint64))",
        "Method(can_execute_conversion(byte[])uint64)",
        "Method(configure_conversion(uint64,uint64,uint64)string)",
        "Method(deposit_yt_tokens(uint64)string)",
        "Method(emergency_disable_conversion()string)",
        "Method(execute_conversion(byte[],uint64,uint64)string)",
        "Method(get_ai_recommendation(uint64,uint64)(uint64,string))",
        "Method(get_conversion_info()(uint64,uint64,uint64))",
        "Method(get_user_balances()(uint64,uint64))",
        "Method(get_user_config()(uint64,uint64,uint64,uint64))",
        "Method(initialize(byte[],byte[],byte[])string)",
        "Method(pause_converter()string)",
        "Method(remove_maturity()string)",
        "Method(set_conversion_fee(uint64)string)",
        "Method(unpause_converter()string)",
        "Method(update_addresses(byte[],byte[],byte[])string)",
        "Method(withdraw_pt_tokens(uint64)string)",
        "tmp%2#0"
      ],
      "stack_out": [
        "Method(initialize(byte[],byte[],byte[])string)",
        "Method(configure_conversion(uint64,uint64,uint64)string)",
        "Method(deposit_yt_tokens(uint64)string)",
        "Method(execute_conversion(byte[],uint64,uint64)string)",
        "Method(can_execute_conversion(byte[])uint64)",
        "Method(get_user_config()(uint64,uint64,uint64,uint64))",
        "Method(get_user_balances()(uint64,uint64))",
        "Method(get_conversion_info()(uint64,uint64,uint64))",
        "Method(calculate_conversion_output(uint64)(uint64,uint64))",
        "Method(add_maturity(uint64)string)",
        "Method(remove_maturity()string)",
        "Method(set_conversion_fee(uint64)string)",
        "Method(pause_converter()string)",
        "Method(unpause_converter()string)",
        "Method(emergency_disable_conversion()string)",
        "Method(withdraw_pt_tokens(uint64)string)",
        "Method(get_ai_recommendation(uint64,uint64)(uint64,string))",
        "Method(update_addresses(byte[],byte[],byte[])string)",
        "tmp%2#0"
      ]
    },
    "381": {
      "op": "match main_initialize_route@5 main_configure_conversion_route@6 main_deposit_yt_tokens_route@7 main_execute_conversion_route@8 main_can_execute_conversion_route@9 main_get_user_config_route@10 main_get_user_balances_route@11 main_get_conversion_info_route@12 main_calculate_conversion_output_route@13 main_add_maturity_route@14 main_remove_maturity_route@15 main_set_conversion_fee_route@16 main_pause_converter_route@17 main_unpause_converter_route@18 main_emergency_disable_conversion_route@19 main_withdraw_pt_tokens_route@20 main_get_ai_recommendation_route@21 main_update_addresses_route@22",
      "stack_out": []
    },
    "419": {
      "block": "main_after_if_else@25",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "420": {
      "op": "return",
      "stack_out": []
    },
    "421": {
      "block": "main_update_addresses_route@22",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%115#0"
      ],
      "stack_out": [
        "tmp%115#0"
      ]
    },
    "423": {
      "op": "!",
      "defined_out": [
        "tmp%116#0"
      ],
      "stack_out": [
        "tmp%116#0"
      ]
    },
    "424": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "425": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%117#0"
      ],
      "stack_out": [
        "tmp%117#0"
      ]
    },
    "427": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "428": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%119#0"
      ],
      "stack_out": [
        "tmp%119#0"
      ]
    },
    "431": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%120#0"
      ],
      "stack_out": [
        "tmp%120#0"
      ]
    },
    "434": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%120#0",
        "tmp%121#0"
      ],
      "stack_out": [
        "tmp%120#0",
        "tmp%121#0"
      ]
    },
    "437": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%120#0",
        "tmp%122#0"
      ],
      "stack_out": [
        "tmp%120#0",
        "tmp%122#0"
      ]
    },
    "440": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "tmp%120#0",
        "tmp%122#0",
        "tmp%123#0"
      ],
      "stack_out": [
        "tmp%120#0",
        "tmp%122#0",
        "tmp%123#0"
      ]
    },
    "443": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%120#0",
        "tmp%122#0",
        "tmp%124#0"
      ],
      "stack_out": [
        "tmp%120#0",
        "tmp%122#0",
        "tmp%124#0"
      ]
    },
    "446": {
      "callsub": "smart_contracts.yt_auto_converter.contract.YTAutoConverter.update_addresses",
      "op": "callsub update_addresses",
      "defined_out": [
        "to_encode%12#0"
      ],
      "stack_out": [
        "to_encode%12#0"
      ]
    },
    "449": {
      "op": "dup",
      "defined_out": [
        "to_encode%12#0",
        "to_encode%12#0 (copy)"
      ],
      "stack_out": [
        "to_encode%12#0",
        "to_encode%12#0 (copy)"
      ]
    },
    "450": {
      "op": "len",
      "defined_out": [
        "length%11#0",
        "to_encode%12#0"
      ],
      "stack_out": [
        "to_encode%12#0",
        "length%11#0"
      ]
    },
    "451": {
      "op": "itob",
      "defined_out": [
        "as_bytes%11#0",
        "to_encode%12#0"
      ],
      "stack_out": [
        "to_encode%12#0",
        "as_bytes%11#0"
      ]
    },
    "452": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%11#0",
        "to_encode%12#0"
      ],
      "stack_out": [
        "to_encode%12#0",
        "length_uint16%11#0"
      ]
    },
    "455": {
      "op": "swap",
      "stack_out": [
        "length_uint16%11#0",
        "to_encode%12#0"
      ]
    },
    "456": {
      "op": "concat",
      "defined_out": [
        "encoded_value%11#0"
      ],
      "stack_out": [
        "encoded_value%11#0"
      ]
    },
    "457": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_value%11#0"
      ],
      "stack_out": [
        "encoded_value%11#0",
        "0x151f7c75"
      ]
    },
    "458": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_value%11#0"
      ]
    },
    "459": {
      "op": "concat",
      "defined_out": [
        "tmp%125#0"
      ],
      "stack_out": [
        "tmp%125#0"
      ]
    },
    "460": {
      "op": "log",
      "stack_out": []
    },
    "461": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "462": {
      "op": "return",
      "stack_out": []
    },
    "463": {
      "block": "main_get_ai_recommendation_route@21",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%107#0"
      ],
      "stack_out": [
        "tmp%107#0"
      ]
    },
    "465": {
      "op": "!",
      "defined_out": [
        "tmp%108#0"
      ],
      "stack_out": [
        "tmp%108#0"
      ]
    },
    "466": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "467": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%109#0"
      ],
      "stack_out": [
        "tmp%109#0"
      ]
    },
    "469": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "470": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%10#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%10#0"
      ]
    },
    "473": {
      "op": "btoi",
      "defined_out": [
        "tmp%111#0"
      ],
      "stack_out": [
        "tmp%111#0"
      ]
    },
    "474": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[8]%11#0",
        "tmp%111#0"
      ],
      "stack_out": [
        "tmp%111#0",
        "reinterpret_bytes[8]%11#0"
      ]
    },
    "477": {
      "op": "btoi",
      "defined_out": [
        "tmp%111#0",
        "tmp%112#0"
      ],
      "stack_out": [
        "tmp%111#0",
        "tmp%112#0"
      ]
    },
    "478": {
      "callsub": "smart_contracts.yt_auto_converter.contract.YTAutoConverter.get_ai_recommendation",
      "op": "callsub get_ai_recommendation",
      "defined_out": [
        "tmp%113#0"
      ],
      "stack_out": [
        "tmp%113#0"
      ]
    },
    "481": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%113#0"
      ],
      "stack_out": [
        "tmp%113#0",
        "0x151f7c75"
      ]
    },
    "482": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%113#0"
      ]
    },
    "483": {
      "op": "concat",
      "defined_out": [
        "tmp%114#0"
      ],
      "stack_out": [
        "tmp%114#0"
      ]
    },
    "484": {
      "op": "log",
      "stack_out": []
    },
    "485": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "486": {
      "op": "return",
      "stack_out": []
    },
    "487": {
      "block": "main_withdraw_pt_tokens_route@20",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%101#0"
      ],
      "stack_out": [
        "tmp%101#0"
      ]
    },
    "489": {
      "op": "!",
      "defined_out": [
        "tmp%102#0"
      ],
      "stack_out": [
        "tmp%102#0"
      ]
    },
    "490": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "491": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%103#0"
      ],
      "stack_out": [
        "tmp%103#0"
      ]
    },
    "493": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "494": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%9#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%9#0"
      ]
    },
    "497": {
      "op": "btoi",
      "defined_out": [
        "tmp%105#0"
      ],
      "stack_out": [
        "tmp%105#0"
      ]
    },
    "498": {
      "callsub": "smart_contracts.yt_auto_converter.contract.YTAutoConverter.withdraw_pt_tokens",
      "op": "callsub withdraw_pt_tokens",
      "defined_out": [
        "to_encode%11#0"
      ],
      "stack_out": [
        "to_encode%11#0"
      ]
    },
    "501": {
      "op": "dup",
      "defined_out": [
        "to_encode%11#0",
        "to_encode%11#0 (copy)"
      ],
      "stack_out": [
        "to_encode%11#0",
        "to_encode%11#0 (copy)"
      ]
    },
    "502": {
      "op": "len",
      "defined_out": [
        "length%10#0",
        "to_encode%11#0"
      ],
      "stack_out": [
        "to_encode%11#0",
        "length%10#0"
      ]
    },
    "503": {
      "op": "itob",
      "defined_out": [
        "as_bytes%10#0",
        "to_encode%11#0"
      ],
      "stack_out": [
        "to_encode%11#0",
        "as_bytes%10#0"
      ]
    },
    "504": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%10#0",
        "to_encode%11#0"
      ],
      "stack_out": [
        "to_encode%11#0",
        "length_uint16%10#0"
      ]
    },
    "507": {
      "op": "swap",
      "stack_out": [
        "length_uint16%10#0",
        "to_encode%11#0"
      ]
    },
    "508": {
      "op": "concat",
      "defined_out": [
        "encoded_value%10#0"
      ],
      "stack_out": [
        "encoded_value%10#0"
      ]
    },
    "509": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_value%10#0"
      ],
      "stack_out": [
        "encoded_value%10#0",
        "0x151f7c75"
      ]
    },
    "510": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_value%10#0"
      ]
    },
    "511": {
      "op": "concat",
      "defined_out": [
        "tmp%106#0"
      ],
      "stack_out": [
        "tmp%106#0"
      ]
    },
    "512": {
      "op": "log",
      "stack_out": []
    },
    "513": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "514": {
      "op": "return",
      "stack_out": []
    },
    "515": {
      "block": "main_emergency_disable_conversion_route@19",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%96#0"
      ],
      "stack_out": [
        "tmp%96#0"
      ]
    },
    "517": {
      "op": "!",
      "defined_out": [
        "tmp%97#0"
      ],
      "stack_out": [
        "tmp%97#0"
      ]
    },
    "518": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "519": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%98#0"
      ],
      "stack_out": [
        "tmp%98#0"
      ]
    },
    "521": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "522": {
      "callsub": "smart_contracts.yt_auto_converter.contract.YTAutoConverter.emergency_disable_conversion",
      "op": "callsub emergency_disable_conversion",
      "defined_out": [
        "to_encode%10#0"
      ],
      "stack_out": [
        "to_encode%10#0"
      ]
    },
    "525": {
      "op": "dup",
      "defined_out": [
        "to_encode%10#0",
        "to_encode%10#0 (copy)"
      ],
      "stack_out": [
        "to_encode%10#0",
        "to_encode%10#0 (copy)"
      ]
    },
    "526": {
      "op": "len",
      "defined_out": [
        "length%9#0",
        "to_encode%10#0"
      ],
      "stack_out": [
        "to_encode%10#0",
        "length%9#0"
      ]
    },
    "527": {
      "op": "itob",
      "defined_out": [
        "as_bytes%9#0",
        "to_encode%10#0"
      ],
      "stack_out": [
        "to_encode%10#0",
        "as_bytes%9#0"
      ]
    },
    "528": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%9#0",
        "to_encode%10#0"
      ],
      "stack_out": [
        "to_encode%10#0",
        "length_uint16%9#0"
      ]
    },
    "531": {
      "op": "swap",
      "stack_out": [
        "length_uint16%9#0",
        "to_encode%10#0"
      ]
    },
    "532": {
      "op": "concat",
      "defined_out": [
        "encoded_value%9#0"
      ],
      "stack_out": [
        "encoded_value%9#0"
      ]
    },
    "533": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_value%9#0"
      ],
      "stack_out": [
        "encoded_value%9#0",
        "0x151f7c75"
      ]
    },
    "534": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_value%9#0"
      ]
    },
    "535": {
      "op": "concat",
      "defined_out": [
        "tmp%100#0"
      ],
      "stack_out": [
        "tmp%100#0"
      ]
    },
    "536": {
      "op": "log",
      "stack_out": []
    },
    "537": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "538": {
      "op": "return",
      "stack_out": []
    },
    "539": {
      "block": "main_unpause_converter_route@18",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%91#0"
      ],
      "stack_out": [
        "tmp%91#0"
      ]
    },
    "541": {
      "op": "!",
      "defined_out": [
        "tmp%92#0"
      ],
      "stack_out": [
        "tmp%92#0"
      ]
    },
    "542": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "543": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%93#0"
      ],
      "stack_out": [
        "tmp%93#0"
      ]
    },
    "545": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "546": {
      "callsub": "smart_contracts.yt_auto_converter.contract.YTAutoConverter.unpause_converter",
      "op": "callsub unpause_converter",
      "defined_out": [
        "to_encode%9#0"
      ],
      "stack_out": [
        "to_encode%9#0"
      ]
    },
    "549": {
      "op": "dup",
      "defined_out": [
        "to_encode%9#0",
        "to_encode%9#0 (copy)"
      ],
      "stack_out": [
        "to_encode%9#0",
        "to_encode%9#0 (copy)"
      ]
    },
    "550": {
      "op": "len",
      "defined_out": [
        "length%8#0",
        "to_encode%9#0"
      ],
      "stack_out": [
        "to_encode%9#0",
        "length%8#0"
      ]
    },
    "551": {
      "op": "itob",
      "defined_out": [
        "as_bytes%8#0",
        "to_encode%9#0"
      ],
      "stack_out": [
        "to_encode%9#0",
        "as_bytes%8#0"
      ]
    },
    "552": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%8#0",
        "to_encode%9#0"
      ],
      "stack_out": [
        "to_encode%9#0",
        "length_uint16%8#0"
      ]
    },
    "555": {
      "op": "swap",
      "stack_out": [
        "length_uint16%8#0",
        "to_encode%9#0"
      ]
    },
    "556": {
      "op": "concat",
      "defined_out": [
        "encoded_value%8#0"
      ],
      "stack_out": [
        "encoded_value%8#0"
      ]
    },
    "557": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_value%8#0"
      ],
      "stack_out": [
        "encoded_value%8#0",
        "0x151f7c75"
      ]
    },
    "558": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_value%8#0"
      ]
    },
    "559": {
      "op": "concat",
      "defined_out": [
        "tmp%95#0"
      ],
      "stack_out": [
        "tmp%95#0"
      ]
    },
    "560": {
      "op": "log",
      "stack_out": []
    },
    "561": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "562": {
      "op": "return",
      "stack_out": []
    },
    "563": {
      "block": "main_pause_converter_route@17",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%86#0"
      ],
      "stack_out": [
        "tmp%86#0"
      ]
    },
    "565": {
      "op": "!",
      "defined_out": [
        "tmp%87#0"
      ],
      "stack_out": [
        "tmp%87#0"
      ]
    },
    "566": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "567": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%88#0"
      ],
      "stack_out": [
        "tmp%88#0"
      ]
    },
    "569": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "570": {
      "callsub": "smart_contracts.yt_auto_converter.contract.YTAutoConverter.pause_converter",
      "op": "callsub pause_converter",
      "defined_out": [
        "to_encode%8#0"
      ],
      "stack_out": [
        "to_encode%8#0"
      ]
    },
    "573": {
      "op": "dup",
      "defined_out": [
        "to_encode%8#0",
        "to_encode%8#0 (copy)"
      ],
      "stack_out": [
        "to_encode%8#0",
        "to_encode%8#0 (copy)"
      ]
    },
    "574": {
      "op": "len",
      "defined_out": [
        "length%7#0",
        "to_encode%8#0"
      ],
      "stack_out": [
        "to_encode%8#0",
        "length%7#0"
      ]
    },
    "575": {
      "op": "itob",
      "defined_out": [
        "as_bytes%7#0",
        "to_encode%8#0"
      ],
      "stack_out": [
        "to_encode%8#0",
        "as_bytes%7#0"
      ]
    },
    "576": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%7#0",
        "to_encode%8#0"
      ],
      "stack_out": [
        "to_encode%8#0",
        "length_uint16%7#0"
      ]
    },
    "579": {
      "op": "swap",
      "stack_out": [
        "length_uint16%7#0",
        "to_encode%8#0"
      ]
    },
    "580": {
      "op": "concat",
      "defined_out": [
        "encoded_value%7#0"
      ],
      "stack_out": [
        "encoded_value%7#0"
      ]
    },
    "581": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_value%7#0"
      ],
      "stack_out": [
        "encoded_value%7#0",
        "0x151f7c75"
      ]
    },
    "582": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_value%7#0"
      ]
    },
    "583": {
      "op": "concat",
      "defined_out": [
        "tmp%90#0"
      ],
      "stack_out": [
        "tmp%90#0"
      ]
    },
    "584": {
      "op": "log",
      "stack_out": []
    },
    "585": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "586": {
      "op": "return",
      "stack_out": []
    },
    "587": {
      "block": "main_set_conversion_fee_route@16",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%80#0"
      ],
      "stack_out": [
        "tmp%80#0"
      ]
    },
    "589": {
      "op": "!",
      "defined_out": [
        "tmp%81#0"
      ],
      "stack_out": [
        "tmp%81#0"
      ]
    },
    "590": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "591": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%82#0"
      ],
      "stack_out": [
        "tmp%82#0"
      ]
    },
    "593": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "594": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%8#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%8#0"
      ]
    },
    "597": {
      "op": "btoi",
      "defined_out": [
        "tmp%84#0"
      ],
      "stack_out": [
        "tmp%84#0"
      ]
    },
    "598": {
      "callsub": "smart_contracts.yt_auto_converter.contract.YTAutoConverter.set_conversion_fee",
      "op": "callsub set_conversion_fee",
      "defined_out": [
        "to_encode%7#0"
      ],
      "stack_out": [
        "to_encode%7#0"
      ]
    },
    "601": {
      "op": "dup",
      "defined_out": [
        "to_encode%7#0",
        "to_encode%7#0 (copy)"
      ],
      "stack_out": [
        "to_encode%7#0",
        "to_encode%7#0 (copy)"
      ]
    },
    "602": {
      "op": "len",
      "defined_out": [
        "length%6#0",
        "to_encode%7#0"
      ],
      "stack_out": [
        "to_encode%7#0",
        "length%6#0"
      ]
    },
    "603": {
      "op": "itob",
      "defined_out": [
        "as_bytes%6#0",
        "to_encode%7#0"
      ],
      "stack_out": [
        "to_encode%7#0",
        "as_bytes%6#0"
      ]
    },
    "604": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%6#0",
        "to_encode%7#0"
      ],
      "stack_out": [
        "to_encode%7#0",
        "length_uint16%6#0"
      ]
    },
    "607": {
      "op": "swap",
      "stack_out": [
        "length_uint16%6#0",
        "to_encode%7#0"
      ]
    },
    "608": {
      "op": "concat",
      "defined_out": [
        "encoded_value%6#0"
      ],
      "stack_out": [
        "encoded_value%6#0"
      ]
    },
    "609": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_value%6#0"
      ],
      "stack_out": [
        "encoded_value%6#0",
        "0x151f7c75"
      ]
    },
    "610": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_value%6#0"
      ]
    },
    "611": {
      "op": "concat",
      "defined_out": [
        "tmp%85#0"
      ],
      "stack_out": [
        "tmp%85#0"
      ]
    },
    "612": {
      "op": "log",
      "stack_out": []
    },
    "613": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "614": {
      "op": "return",
      "stack_out": []
    },
    "615": {
      "block": "main_remove_maturity_route@15",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%75#0"
      ],
      "stack_out": [
        "tmp%75#0"
      ]
    },
    "617": {
      "op": "!",
      "defined_out": [
        "tmp%76#0"
      ],
      "stack_out": [
        "tmp%76#0"
      ]
    },
    "618": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "619": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%77#0"
      ],
      "stack_out": [
        "tmp%77#0"
      ]
    },
    "621": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "622": {
      "callsub": "smart_contracts.yt_auto_converter.contract.YTAutoConverter.remove_maturity",
      "op": "callsub remove_maturity",
      "defined_out": [
        "to_encode%6#0"
      ],
      "stack_out": [
        "to_encode%6#0"
      ]
    },
    "625": {
      "op": "dup",
      "defined_out": [
        "to_encode%6#0",
        "to_encode%6#0 (copy)"
      ],
      "stack_out": [
        "to_encode%6#0",
        "to_encode%6#0 (copy)"
      ]
    },
    "626": {
      "op": "len",
      "defined_out": [
        "length%5#0",
        "to_encode%6#0"
      ],
      "stack_out": [
        "to_encode%6#0",
        "length%5#0"
      ]
    },
    "627": {
      "op": "itob",
      "defined_out": [
        "as_bytes%5#0",
        "to_encode%6#0"
      ],
      "stack_out": [
        "to_encode%6#0",
        "as_bytes%5#0"
      ]
    },
    "628": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%5#0",
        "to_encode%6#0"
      ],
      "stack_out": [
        "to_encode%6#0",
        "length_uint16%5#0"
      ]
    },
    "631": {
      "op": "swap",
      "stack_out": [
        "length_uint16%5#0",
        "to_encode%6#0"
      ]
    },
    "632": {
      "op": "concat",
      "defined_out": [
        "encoded_value%5#0"
      ],
      "stack_out": [
        "encoded_value%5#0"
      ]
    },
    "633": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_value%5#0"
      ],
      "stack_out": [
        "encoded_value%5#0",
        "0x151f7c75"
      ]
    },
    "634": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_value%5#0"
      ]
    },
    "635": {
      "op": "concat",
      "defined_out": [
        "tmp%79#0"
      ],
      "stack_out": [
        "tmp%79#0"
      ]
    },
    "636": {
      "op": "log",
      "stack_out": []
    },
    "637": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "638": {
      "op": "return",
      "stack_out": []
    },
    "639": {
      "block": "main_add_maturity_route@14",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%69#0"
      ],
      "stack_out": [
        "tmp%69#0"
      ]
    },
    "641": {
      "op": "!",
      "defined_out": [
        "tmp%70#0"
      ],
      "stack_out": [
        "tmp%70#0"
      ]
    },
    "642": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "643": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%71#0"
      ],
      "stack_out": [
        "tmp%71#0"
      ]
    },
    "645": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "646": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%7#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%7#0"
      ]
    },
    "649": {
      "op": "btoi",
      "defined_out": [
        "tmp%73#0"
      ],
      "stack_out": [
        "tmp%73#0"
      ]
    },
    "650": {
      "callsub": "smart_contracts.yt_auto_converter.contract.YTAutoConverter.add_maturity",
      "op": "callsub add_maturity",
      "defined_out": [
        "to_encode%5#0"
      ],
      "stack_out": [
        "to_encode%5#0"
      ]
    },
    "653": {
      "op": "dup",
      "defined_out": [
        "to_encode%5#0",
        "to_encode%5#0 (copy)"
      ],
      "stack_out": [
        "to_encode%5#0",
        "to_encode%5#0 (copy)"
      ]
    },
    "654": {
      "op": "len",
      "defined_out": [
        "length%4#0",
        "to_encode%5#0"
      ],
      "stack_out": [
        "to_encode%5#0",
        "length%4#0"
      ]
    },
    "655": {
      "op": "itob",
      "defined_out": [
        "as_bytes%4#0",
        "to_encode%5#0"
      ],
      "stack_out": [
        "to_encode%5#0",
        "as_bytes%4#0"
      ]
    },
    "656": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%4#0",
        "to_encode%5#0"
      ],
      "stack_out": [
        "to_encode%5#0",
        "length_uint16%4#0"
      ]
    },
    "659": {
      "op": "swap",
      "stack_out": [
        "length_uint16%4#0",
        "to_encode%5#0"
      ]
    },
    "660": {
      "op": "concat",
      "defined_out": [
        "encoded_value%4#0"
      ],
      "stack_out": [
        "encoded_value%4#0"
      ]
    },
    "661": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_value%4#0"
      ],
      "stack_out": [
        "encoded_value%4#0",
        "0x151f7c75"
      ]
    },
    "662": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_value%4#0"
      ]
    },
    "663": {
      "op": "concat",
      "defined_out": [
        "tmp%74#0"
      ],
      "stack_out": [
        "tmp%74#0"
      ]
    },
    "664": {
      "op": "log",
      "stack_out": []
    },
    "665": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "666": {
      "op": "return",
      "stack_out": []
    },
    "667": {
      "block": "main_calculate_conversion_output_route@13",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%62#0"
      ],
      "stack_out": [
        "tmp%62#0"
      ]
    },
    "669": {
      "op": "!",
      "defined_out": [
        "tmp%63#0"
      ],
      "stack_out": [
        "tmp%63#0"
      ]
    },
    "670": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "671": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%64#0"
      ],
      "stack_out": [
        "tmp%64#0"
      ]
    },
    "673": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "674": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%6#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%6#0"
      ]
    },
    "677": {
      "op": "btoi",
      "defined_out": [
        "tmp%66#0"
      ],
      "stack_out": [
        "tmp%66#0"
      ]
    },
    "678": {
      "callsub": "smart_contracts.yt_auto_converter.contract.YTAutoConverter.calculate_conversion_output",
      "op": "callsub calculate_conversion_output",
      "defined_out": [
        "tmp%67#0"
      ],
      "stack_out": [
        "tmp%67#0"
      ]
    },
    "681": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%67#0"
      ],
      "stack_out": [
        "tmp%67#0",
        "0x151f7c75"
      ]
    },
    "682": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%67#0"
      ]
    },
    "683": {
      "op": "concat",
      "defined_out": [
        "tmp%68#0"
      ],
      "stack_out": [
        "tmp%68#0"
      ]
    },
    "684": {
      "op": "log",
      "stack_out": []
    },
    "685": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "686": {
      "op": "return",
      "stack_out": []
    },
    "687": {
      "block": "main_get_conversion_info_route@12",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%56#0"
      ],
      "stack_out": [
        "tmp%56#0"
      ]
    },
    "689": {
      "op": "!",
      "defined_out": [
        "tmp%57#0"
      ],
      "stack_out": [
        "tmp%57#0"
      ]
    },
    "690": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "691": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%58#0"
      ],
      "stack_out": [
        "tmp%58#0"
      ]
    },
    "693": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "694": {
      "callsub": "smart_contracts.yt_auto_converter.contract.YTAutoConverter.get_conversion_info",
      "op": "callsub get_conversion_info",
      "defined_out": [
        "tmp%60#0"
      ],
      "stack_out": [
        "tmp%60#0"
      ]
    },
    "697": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%60#0"
      ],
      "stack_out": [
        "tmp%60#0",
        "0x151f7c75"
      ]
    },
    "698": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%60#0"
      ]
    },
    "699": {
      "op": "concat",
      "defined_out": [
        "tmp%61#0"
      ],
      "stack_out": [
        "tmp%61#0"
      ]
    },
    "700": {
      "op": "log",
      "stack_out": []
    },
    "701": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "702": {
      "op": "return",
      "stack_out": []
    },
    "703": {
      "block": "main_get_user_balances_route@11",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%50#0"
      ],
      "stack_out": [
        "tmp%50#0"
      ]
    },
    "705": {
      "op": "!",
      "defined_out": [
        "tmp%51#0"
      ],
      "stack_out": [
        "tmp%51#0"
      ]
    },
    "706": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "707": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%52#0"
      ],
      "stack_out": [
        "tmp%52#0"
      ]
    },
    "709": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "710": {
      "callsub": "smart_contracts.yt_auto_converter.contract.YTAutoConverter.get_user_balances",
      "op": "callsub get_user_balances",
      "defined_out": [
        "tmp%54#0"
      ],
      "stack_out": [
        "tmp%54#0"
      ]
    },
    "713": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%54#0"
      ],
      "stack_out": [
        "tmp%54#0",
        "0x151f7c75"
      ]
    },
    "714": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%54#0"
      ]
    },
    "715": {
      "op": "concat",
      "defined_out": [
        "tmp%55#0"
      ],
      "stack_out": [
        "tmp%55#0"
      ]
    },
    "716": {
      "op": "log",
      "stack_out": []
    },
    "717": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "718": {
      "op": "return",
      "stack_out": []
    },
    "719": {
      "block": "main_get_user_config_route@10",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%44#0"
      ],
      "stack_out": [
        "tmp%44#0"
      ]
    },
    "721": {
      "op": "!",
      "defined_out": [
        "tmp%45#0"
      ],
      "stack_out": [
        "tmp%45#0"
      ]
    },
    "722": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "723": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%46#0"
      ],
      "stack_out": [
        "tmp%46#0"
      ]
    },
    "725": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "726": {
      "callsub": "smart_contracts.yt_auto_converter.contract.YTAutoConverter.get_user_config",
      "op": "callsub get_user_config",
      "defined_out": [
        "tmp%48#0"
      ],
      "stack_out": [
        "tmp%48#0"
      ]
    },
    "729": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%48#0"
      ],
      "stack_out": [
        "tmp%48#0",
        "0x151f7c75"
      ]
    },
    "730": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%48#0"
      ]
    },
    "731": {
      "op": "concat",
      "defined_out": [
        "tmp%49#0"
      ],
      "stack_out": [
        "tmp%49#0"
      ]
    },
    "732": {
      "op": "log",
      "stack_out": []
    },
    "733": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "734": {
      "op": "return",
      "stack_out": []
    },
    "735": {
      "block": "main_can_execute_conversion_route@9",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%37#0"
      ],
      "stack_out": [
        "tmp%37#0"
      ]
    },
    "737": {
      "op": "!",
      "defined_out": [
        "tmp%38#0"
      ],
      "stack_out": [
        "tmp%38#0"
      ]
    },
    "738": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "739": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%39#0"
      ]
    },
    "741": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "742": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%41#0"
      ],
      "stack_out": [
        "tmp%41#0"
      ]
    },
    "745": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%42#0"
      ],
      "stack_out": [
        "tmp%42#0"
      ]
    },
    "748": {
      "callsub": "smart_contracts.yt_auto_converter.contract.YTAutoConverter.can_execute_conversion",
      "op": "callsub can_execute_conversion",
      "defined_out": [
        "to_encode%4#0"
      ],
      "stack_out": [
        "to_encode%4#0"
      ]
    },
    "751": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "752": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "0x151f7c75"
      ]
    },
    "753": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%0#0"
      ]
    },
    "754": {
      "op": "concat",
      "defined_out": [
        "tmp%43#0"
      ],
      "stack_out": [
        "tmp%43#0"
      ]
    },
    "755": {
      "op": "log",
      "stack_out": []
    },
    "756": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "757": {
      "op": "return",
      "stack_out": []
    },
    "758": {
      "block": "main_execute_conversion_route@8",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%28#0"
      ],
      "stack_out": [
        "tmp%28#0"
      ]
    },
    "760": {
      "op": "!",
      "defined_out": [
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%29#0"
      ]
    },
    "761": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "762": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%30#0"
      ]
    },
    "764": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "765": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%32#0"
      ],
      "stack_out": [
        "tmp%32#0"
      ]
    },
    "768": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%33#0"
      ],
      "stack_out": [
        "tmp%33#0"
      ]
    },
    "771": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[8]%4#0",
        "tmp%33#0"
      ],
      "stack_out": [
        "tmp%33#0",
        "reinterpret_bytes[8]%4#0"
      ]
    },
    "774": {
      "op": "btoi",
      "defined_out": [
        "tmp%33#0",
        "tmp%34#0"
      ],
      "stack_out": [
        "tmp%33#0",
        "tmp%34#0"
      ]
    },
    "775": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[8]%5#0",
        "tmp%33#0",
        "tmp%34#0"
      ],
      "stack_out": [
        "tmp%33#0",
        "tmp%34#0",
        "reinterpret_bytes[8]%5#0"
      ]
    },
    "778": {
      "op": "btoi",
      "defined_out": [
        "tmp%33#0",
        "tmp%34#0",
        "tmp%35#0"
      ],
      "stack_out": [
        "tmp%33#0",
        "tmp%34#0",
        "tmp%35#0"
      ]
    },
    "779": {
      "callsub": "smart_contracts.yt_auto_converter.contract.YTAutoConverter.execute_conversion",
      "op": "callsub execute_conversion",
      "defined_out": [
        "to_encode%3#0"
      ],
      "stack_out": [
        "to_encode%3#0"
      ]
    },
    "782": {
      "op": "dup",
      "defined_out": [
        "to_encode%3#0",
        "to_encode%3#0 (copy)"
      ],
      "stack_out": [
        "to_encode%3#0",
        "to_encode%3#0 (copy)"
      ]
    },
    "783": {
      "op": "len",
      "defined_out": [
        "length%3#0",
        "to_encode%3#0"
      ],
      "stack_out": [
        "to_encode%3#0",
        "length%3#0"
      ]
    },
    "784": {
      "op": "itob",
      "defined_out": [
        "as_bytes%3#0",
        "to_encode%3#0"
      ],
      "stack_out": [
        "to_encode%3#0",
        "as_bytes%3#0"
      ]
    },
    "785": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%3#0",
        "to_encode%3#0"
      ],
      "stack_out": [
        "to_encode%3#0",
        "length_uint16%3#0"
      ]
    },
    "788": {
      "op": "swap",
      "stack_out": [
        "length_uint16%3#0",
        "to_encode%3#0"
      ]
    },
    "789": {
      "op": "concat",
      "defined_out": [
        "encoded_value%3#0"
      ],
      "stack_out": [
        "encoded_value%3#0"
      ]
    },
    "790": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_value%3#0"
      ],
      "stack_out": [
        "encoded_value%3#0",
        "0x151f7c75"
      ]
    },
    "791": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_value%3#0"
      ]
    },
    "792": {
      "op": "concat",
      "defined_out": [
        "tmp%36#0"
      ],
      "stack_out": [
        "tmp%36#0"
      ]
    },
    "793": {
      "op": "log",
      "stack_out": []
    },
    "794": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "795": {
      "op": "return",
      "stack_out": []
    },
    "796": {
      "block": "main_deposit_yt_tokens_route@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0"
      ]
    },
    "798": {
      "op": "!",
      "defined_out": [
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%23#0"
      ]
    },
    "799": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "800": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%24#0"
      ]
    },
    "802": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "803": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%3#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%3#0"
      ]
    },
    "806": {
      "op": "btoi",
      "defined_out": [
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%26#0"
      ]
    },
    "807": {
      "callsub": "smart_contracts.yt_auto_converter.contract.YTAutoConverter.deposit_yt_tokens",
      "op": "callsub deposit_yt_tokens",
      "defined_out": [
        "to_encode%2#0"
      ],
      "stack_out": [
        "to_encode%2#0"
      ]
    },
    "810": {
      "op": "dup",
      "defined_out": [
        "to_encode%2#0",
        "to_encode%2#0 (copy)"
      ],
      "stack_out": [
        "to_encode%2#0",
        "to_encode%2#0 (copy)"
      ]
    },
    "811": {
      "op": "len",
      "defined_out": [
        "length%2#0",
        "to_encode%2#0"
      ],
      "stack_out": [
        "to_encode%2#0",
        "length%2#0"
      ]
    },
    "812": {
      "op": "itob",
      "defined_out": [
        "as_bytes%2#0",
        "to_encode%2#0"
      ],
      "stack_out": [
        "to_encode%2#0",
        "as_bytes%2#0"
      ]
    },
    "813": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%2#0",
        "to_encode%2#0"
      ],
      "stack_out": [
        "to_encode%2#0",
        "length_uint16%2#0"
      ]
    },
    "816": {
      "op": "swap",
      "stack_out": [
        "length_uint16%2#0",
        "to_encode%2#0"
      ]
    },
    "817": {
      "op": "concat",
      "defined_out": [
        "encoded_value%2#0"
      ],
      "stack_out": [
        "encoded_value%2#0"
      ]
    },
    "818": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_value%2#0"
      ],
      "stack_out": [
        "encoded_value%2#0",
        "0x151f7c75"
      ]
    },
    "819": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_value%2#0"
      ]
    },
    "820": {
      "op": "concat",
      "defined_out": [
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%27#0"
      ]
    },
    "821": {
      "op": "log",
      "stack_out": []
    },
    "822": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "823": {
      "op": "return",
      "stack_out": []
    },
    "824": {
      "block": "main_configure_conversion_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "826": {
      "op": "!",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "827": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "828": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "830": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "831": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%0#0"
      ]
    },
    "834": {
      "op": "btoi",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "835": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[8]%1#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0",
        "reinterpret_bytes[8]%1#0"
      ]
    },
    "838": {
      "op": "btoi",
      "defined_out": [
        "tmp%18#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%18#0",
        "tmp%19#0"
      ]
    },
    "839": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[8]%2#0",
        "tmp%18#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%18#0",
        "tmp%19#0",
        "reinterpret_bytes[8]%2#0"
      ]
    },
    "842": {
      "op": "btoi",
      "defined_out": [
        "tmp%18#0",
        "tmp%19#0",
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%18#0",
        "tmp%19#0",
        "tmp%20#0"
      ]
    },
    "843": {
      "callsub": "smart_contracts.yt_auto_converter.contract.YTAutoConverter.configure_conversion",
      "op": "callsub configure_conversion",
      "defined_out": [
        "to_encode%1#0"
      ],
      "stack_out": [
        "to_encode%1#0"
      ]
    },
    "846": {
      "op": "dup",
      "defined_out": [
        "to_encode%1#0",
        "to_encode%1#0 (copy)"
      ],
      "stack_out": [
        "to_encode%1#0",
        "to_encode%1#0 (copy)"
      ]
    },
    "847": {
      "op": "len",
      "defined_out": [
        "length%1#0",
        "to_encode%1#0"
      ],
      "stack_out": [
        "to_encode%1#0",
        "length%1#0"
      ]
    },
    "848": {
      "op": "itob",
      "defined_out": [
        "as_bytes%1#0",
        "to_encode%1#0"
      ],
      "stack_out": [
        "to_encode%1#0",
        "as_bytes%1#0"
      ]
    },
    "849": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%1#0",
        "to_encode%1#0"
      ],
      "stack_out": [
        "to_encode%1#0",
        "length_uint16%1#0"
      ]
    },
    "852": {
      "op": "swap",
      "stack_out": [
        "length_uint16%1#0",
        "to_encode%1#0"
      ]
    },
    "853": {
      "op": "concat",
      "defined_out": [
        "encoded_value%1#0"
      ],
      "stack_out": [
        "encoded_value%1#0"
      ]
    },
    "854": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_value%1#0"
      ],
      "stack_out": [
        "encoded_value%1#0",
        "0x151f7c75"
      ]
    },
    "855": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_value%1#0"
      ]
    },
    "856": {
      "op": "concat",
      "defined_out": [
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0"
      ]
    },
    "857": {
      "op": "log",
      "stack_out": []
    },
    "858": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "859": {
      "op": "return",
      "stack_out": []
    },
    "860": {
      "block": "main_initialize_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "862": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "863": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "864": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "866": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "867": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "870": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "873": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%9#0"
      ]
    },
    "876": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%10#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%10#0"
      ]
    },
    "879": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "tmp%10#0",
        "tmp%11#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%10#0",
        "tmp%11#0"
      ]
    },
    "882": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%10#0",
        "tmp%12#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%10#0",
        "tmp%12#0"
      ]
    },
    "885": {
      "callsub": "smart_contracts.yt_auto_converter.contract.YTAutoConverter.initialize",
      "op": "callsub initialize",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "888": {
      "op": "dup",
      "defined_out": [
        "to_encode%0#0",
        "to_encode%0#0 (copy)"
      ],
      "stack_out": [
        "to_encode%0#0",
        "to_encode%0#0 (copy)"
      ]
    },
    "889": {
      "op": "len",
      "defined_out": [
        "length%0#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "length%0#0"
      ]
    },
    "890": {
      "op": "itob",
      "defined_out": [
        "as_bytes%0#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "as_bytes%0#0"
      ]
    },
    "891": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%0#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "length_uint16%0#0"
      ]
    },
    "894": {
      "op": "swap",
      "stack_out": [
        "length_uint16%0#0",
        "to_encode%0#0"
      ]
    },
    "895": {
      "op": "concat",
      "defined_out": [
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0"
      ]
    },
    "896": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "0x151f7c75"
      ]
    },
    "897": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_value%0#0"
      ]
    },
    "898": {
      "op": "concat",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "899": {
      "op": "log",
      "stack_out": []
    },
    "900": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "901": {
      "op": "return",
      "stack_out": []
    },
    "902": {
      "block": "main_bare_routing@23",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%126#0"
      ],
      "stack_out": [
        "tmp%126#0"
      ]
    },
    "904": {
      "op": "bnz main_after_if_else@25",
      "stack_out": []
    },
    "907": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%127#0"
      ],
      "stack_out": [
        "tmp%127#0"
      ]
    },
    "909": {
      "op": "!",
      "defined_out": [
        "tmp%128#0"
      ],
      "stack_out": [
        "tmp%128#0"
      ]
    },
    "910": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "911": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "912": {
      "op": "return",
      "stack_out": []
    },
    "913": {
      "subroutine": "smart_contracts.yt_auto_converter.contract.YTAutoConverter.initialize",
      "params": {
        "oracle_address#0": "bytes",
        "tokenization_address#0": "bytes",
        "amm_address#0": "bytes"
      },
      "block": "initialize",
      "stack_in": [],
      "op": "proto 3 1"
    },
    "916": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "918": {
      "op": "global CreatorAddress",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "920": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "921": {
      "error": "Only creator can initialize",
      "op": "assert // Only creator can initialize",
      "stack_out": []
    },
    "922": {
      "op": "bytec_3 // \"admin\"",
      "defined_out": [
        "\"admin\""
      ],
      "stack_out": [
        "\"admin\""
      ]
    },
    "923": {
      "op": "txn Sender",
      "defined_out": [
        "\"admin\"",
        "materialized_values%0#0"
      ],
      "stack_out": [
        "\"admin\"",
        "materialized_values%0#0"
      ]
    },
    "925": {
      "op": "app_global_put",
      "stack_out": []
    },
    "926": {
      "op": "bytec 12 // \"oracle_address\"",
      "defined_out": [
        "\"oracle_address\""
      ],
      "stack_out": [
        "\"oracle_address\""
      ]
    },
    "928": {
      "op": "frame_dig -3",
      "defined_out": [
        "\"oracle_address\"",
        "oracle_address#0 (copy)"
      ],
      "stack_out": [
        "\"oracle_address\"",
        "oracle_address#0 (copy)"
      ]
    },
    "930": {
      "op": "app_global_put",
      "stack_out": []
    },
    "931": {
      "op": "bytec 13 // \"tokenization_address\"",
      "defined_out": [
        "\"tokenization_address\""
      ],
      "stack_out": [
        "\"tokenization_address\""
      ]
    },
    "933": {
      "op": "frame_dig -2",
      "defined_out": [
        "\"tokenization_address\"",
        "tokenization_address#0 (copy)"
      ],
      "stack_out": [
        "\"tokenization_address\"",
        "tokenization_address#0 (copy)"
      ]
    },
    "935": {
      "op": "app_global_put",
      "stack_out": []
    },
    "936": {
      "op": "bytec 14 // \"amm_address\"",
      "defined_out": [
        "\"amm_address\""
      ],
      "stack_out": [
        "\"amm_address\""
      ]
    },
    "938": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"amm_address\"",
        "amm_address#0 (copy)"
      ],
      "stack_out": [
        "\"amm_address\"",
        "amm_address#0 (copy)"
      ]
    },
    "940": {
      "op": "app_global_put",
      "stack_out": []
    },
    "941": {
      "op": "bytec_1 // \"conversion_fee\"",
      "defined_out": [
        "\"conversion_fee\""
      ],
      "stack_out": [
        "\"conversion_fee\""
      ]
    },
    "942": {
      "op": "pushint 30 // 30",
      "defined_out": [
        "\"conversion_fee\"",
        "30"
      ],
      "stack_out": [
        "\"conversion_fee\"",
        "30"
      ]
    },
    "944": {
      "op": "app_global_put",
      "stack_out": []
    },
    "945": {
      "op": "bytec 4 // \"is_paused\"",
      "defined_out": [
        "\"is_paused\""
      ],
      "stack_out": [
        "\"is_paused\""
      ]
    },
    "947": {
      "op": "intc_0 // 0",
      "defined_out": [
        "\"is_paused\"",
        "0"
      ],
      "stack_out": [
        "\"is_paused\"",
        "0"
      ]
    },
    "948": {
      "op": "app_global_put",
      "stack_out": []
    },
    "949": {
      "op": "bytec 9 // \"total_conversions\"",
      "defined_out": [
        "\"total_conversions\""
      ],
      "stack_out": [
        "\"total_conversions\""
      ]
    },
    "951": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"total_conversions\"",
        "0"
      ]
    },
    "952": {
      "op": "app_global_put",
      "stack_out": []
    },
    "953": {
      "op": "pushbytes 0x59544175746f436f6e76657274657220696e697469616c697a6564",
      "defined_out": [
        "0x59544175746f436f6e76657274657220696e697469616c697a6564"
      ],
      "stack_out": [
        "0x59544175746f436f6e76657274657220696e697469616c697a6564"
      ]
    },
    "982": {
      "op": "log",
      "stack_out": []
    },
    "983": {
      "op": "pushbytes \"Auto converter initialized successfully\"",
      "defined_out": [
        "\"Auto converter initialized successfully\""
      ],
      "stack_out": [
        "\"Auto converter initialized successfully\""
      ]
    },
    "1024": {
      "retsub": true,
      "op": "retsub"
    },
    "1025": {
      "subroutine": "smart_contracts.yt_auto_converter.contract.YTAutoConverter.configure_conversion",
      "params": {
        "enabled#0": "uint64",
        "threshold_price#0": "uint64",
        "maturity#0": "uint64"
      },
      "block": "configure_conversion",
      "stack_in": [],
      "op": "proto 3 1"
    },
    "1028": {
      "op": "frame_dig -2",
      "defined_out": [
        "threshold_price#0 (copy)"
      ],
      "stack_out": [
        "threshold_price#0 (copy)"
      ]
    },
    "1030": {
      "error": "Threshold price must be positive",
      "op": "assert // Threshold price must be positive",
      "stack_out": []
    },
    "1031": {
      "op": "frame_dig -1",
      "defined_out": [
        "maturity#0 (copy)"
      ],
      "stack_out": [
        "maturity#0 (copy)"
      ]
    },
    "1033": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "maturity#0 (copy)",
        "tmp%1#0"
      ],
      "stack_out": [
        "maturity#0 (copy)",
        "tmp%1#0"
      ]
    },
    "1035": {
      "op": ">",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "1036": {
      "error": "Maturity must be in future",
      "op": "assert // Maturity must be in future",
      "stack_out": []
    },
    "1037": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "1039": {
      "op": "bytec 5 // \"conversion_enabled\"",
      "defined_out": [
        "\"conversion_enabled\"",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "\"conversion_enabled\""
      ]
    },
    "1041": {
      "op": "frame_dig -3",
      "defined_out": [
        "\"conversion_enabled\"",
        "enabled#0 (copy)",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "\"conversion_enabled\"",
        "enabled#0 (copy)"
      ]
    },
    "1043": {
      "op": "app_local_put",
      "stack_out": []
    },
    "1044": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "1046": {
      "op": "bytec 6 // \"threshold_price\"",
      "defined_out": [
        "\"threshold_price\"",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "\"threshold_price\""
      ]
    },
    "1048": {
      "op": "frame_dig -2",
      "stack_out": [
        "tmp%4#0",
        "\"threshold_price\"",
        "threshold_price#0 (copy)"
      ]
    },
    "1050": {
      "op": "app_local_put",
      "stack_out": []
    },
    "1051": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "1053": {
      "op": "bytec 10 // \"user_maturity\"",
      "defined_out": [
        "\"user_maturity\"",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "\"user_maturity\""
      ]
    },
    "1055": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%5#0",
        "\"user_maturity\"",
        "maturity#0 (copy)"
      ]
    },
    "1057": {
      "op": "app_local_put",
      "stack_out": []
    },
    "1058": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "1060": {
      "op": "bytec 7 // \"conversion_executed\"",
      "defined_out": [
        "\"conversion_executed\"",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "\"conversion_executed\""
      ]
    },
    "1062": {
      "op": "intc_0 // 0",
      "defined_out": [
        "\"conversion_executed\"",
        "0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "\"conversion_executed\"",
        "0"
      ]
    },
    "1063": {
      "op": "app_local_put",
      "stack_out": []
    },
    "1064": {
      "op": "frame_dig -3",
      "stack_out": [
        "enabled#0 (copy)"
      ]
    },
    "1066": {
      "op": "itob",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "1067": {
      "op": "pushbytes 0x436f6e76657273696f6e20636f6e66696775726564202d20456e61626c65643a20",
      "defined_out": [
        "0x436f6e76657273696f6e20636f6e66696775726564202d20456e61626c65643a20",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "0x436f6e76657273696f6e20636f6e66696775726564202d20456e61626c65643a20"
      ]
    },
    "1102": {
      "op": "swap",
      "stack_out": [
        "0x436f6e76657273696f6e20636f6e66696775726564202d20456e61626c65643a20",
        "tmp%7#0"
      ]
    },
    "1103": {
      "op": "concat",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "1104": {
      "op": "pushbytes 0x205468726573686f6c643a20",
      "defined_out": [
        "0x205468726573686f6c643a20",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "0x205468726573686f6c643a20"
      ]
    },
    "1118": {
      "op": "concat",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "1119": {
      "op": "frame_dig -2",
      "stack_out": [
        "tmp%9#0",
        "threshold_price#0 (copy)"
      ]
    },
    "1121": {
      "op": "itob",
      "defined_out": [
        "tmp%10#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "tmp%10#0"
      ]
    },
    "1122": {
      "op": "concat",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "1123": {
      "op": "log",
      "stack_out": []
    },
    "1124": {
      "op": "pushbytes \"Conversion configured successfully\"",
      "defined_out": [
        "\"Conversion configured successfully\""
      ],
      "stack_out": [
        "\"Conversion configured successfully\""
      ]
    },
    "1160": {
      "retsub": true,
      "op": "retsub"
    },
    "1161": {
      "subroutine": "smart_contracts.yt_auto_converter.contract.YTAutoConverter.deposit_yt_tokens",
      "params": {
        "amount#0": "uint64"
      },
      "block": "deposit_yt_tokens",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "1164": {
      "op": "frame_dig -1",
      "defined_out": [
        "amount#0 (copy)"
      ],
      "stack_out": [
        "amount#0 (copy)"
      ]
    },
    "1166": {
      "error": "Amount must be positive",
      "op": "assert // Amount must be positive",
      "stack_out": []
    },
    "1167": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1169": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "0"
      ]
    },
    "1170": {
      "op": "bytec_2 // \"yt_balance\"",
      "defined_out": [
        "\"yt_balance\"",
        "0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "0",
        "\"yt_balance\""
      ]
    },
    "1171": {
      "op": "app_local_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1172": {
      "error": "check self.yt_balance exists for account",
      "op": "assert // check self.yt_balance exists for account",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "1173": {
      "op": "frame_dig -1",
      "stack_out": [
        "maybe_value%0#0",
        "amount#0 (copy)"
      ]
    },
    "1175": {
      "op": "+",
      "defined_out": [
        "materialized_values%0#0"
      ],
      "stack_out": [
        "materialized_values%0#0"
      ]
    },
    "1176": {
      "op": "txn Sender",
      "defined_out": [
        "materialized_values%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "materialized_values%0#0",
        "tmp%2#0"
      ]
    },
    "1178": {
      "op": "bytec_2 // \"yt_balance\"",
      "stack_out": [
        "materialized_values%0#0",
        "tmp%2#0",
        "\"yt_balance\""
      ]
    },
    "1179": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%2#0",
        "\"yt_balance\"",
        "materialized_values%0#0"
      ]
    },
    "1181": {
      "op": "app_local_put",
      "stack_out": []
    },
    "1182": {
      "op": "frame_dig -1",
      "stack_out": [
        "amount#0 (copy)"
      ]
    },
    "1184": {
      "op": "itob",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "1185": {
      "op": "pushbytes 0x595420746f6b656e73206465706f7369746564202d20416d6f756e743a20",
      "defined_out": [
        "0x595420746f6b656e73206465706f7369746564202d20416d6f756e743a20",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "0x595420746f6b656e73206465706f7369746564202d20416d6f756e743a20"
      ]
    },
    "1217": {
      "op": "swap",
      "stack_out": [
        "0x595420746f6b656e73206465706f7369746564202d20416d6f756e743a20",
        "tmp%3#0"
      ]
    },
    "1218": {
      "op": "concat",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "1219": {
      "op": "log",
      "stack_out": []
    },
    "1220": {
      "op": "pushbytes \"YT tokens deposited successfully\"",
      "defined_out": [
        "\"YT tokens deposited successfully\""
      ],
      "stack_out": [
        "\"YT tokens deposited successfully\""
      ]
    },
    "1254": {
      "retsub": true,
      "op": "retsub"
    },
    "1255": {
      "subroutine": "smart_contracts.yt_auto_converter.contract.YTAutoConverter.execute_conversion",
      "params": {
        "user#0": "bytes",
        "min_pt_amount#0": "uint64",
        "deadline#0": "uint64"
      },
      "block": "execute_conversion",
      "stack_in": [],
      "op": "proto 3 1"
    },
    "1258": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1259": {
      "op": "bytec 4 // \"is_paused\"",
      "defined_out": [
        "\"is_paused\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"is_paused\""
      ]
    },
    "1261": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1262": {
      "error": "check self.is_paused exists",
      "op": "assert // check self.is_paused exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "1263": {
      "op": "!",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1264": {
      "error": "Converter is paused",
      "op": "assert // Converter is paused",
      "stack_out": []
    },
    "1265": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1267": {
      "op": "frame_dig -1",
      "defined_out": [
        "deadline#0 (copy)",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "deadline#0 (copy)"
      ]
    },
    "1269": {
      "op": "<=",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "1270": {
      "error": "Transaction expired",
      "op": "assert // Transaction expired",
      "stack_out": []
    },
    "1271": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "1273": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%3#0",
        "0"
      ]
    },
    "1274": {
      "op": "bytec 5 // \"conversion_enabled\"",
      "defined_out": [
        "\"conversion_enabled\"",
        "0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "0",
        "\"conversion_enabled\""
      ]
    },
    "1276": {
      "op": "app_local_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1277": {
      "error": "check self.conversion_enabled exists for account",
      "op": "assert // check self.conversion_enabled exists for account",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "1278": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "1"
      ]
    },
    "1279": {
      "op": "==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "1280": {
      "error": "Conversion not enabled",
      "op": "assert // Conversion not enabled",
      "stack_out": []
    },
    "1281": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "1283": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%5#0",
        "0"
      ]
    },
    "1284": {
      "op": "bytec 7 // \"conversion_executed\"",
      "defined_out": [
        "\"conversion_executed\"",
        "0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "0",
        "\"conversion_executed\""
      ]
    },
    "1286": {
      "op": "app_local_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "1287": {
      "error": "check self.conversion_executed exists for account",
      "op": "assert // check self.conversion_executed exists for account",
      "stack_out": [
        "maybe_value%2#0"
      ]
    },
    "1288": {
      "op": "!",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "1289": {
      "error": "Conversion already executed",
      "op": "assert // Conversion already executed",
      "stack_out": []
    },
    "1290": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "1292": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%7#0",
        "0"
      ]
    },
    "1293": {
      "op": "bytec 6 // \"threshold_price\"",
      "defined_out": [
        "\"threshold_price\"",
        "0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "0",
        "\"threshold_price\""
      ]
    },
    "1295": {
      "op": "app_local_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "user_threshold#0"
      ],
      "stack_out": [
        "user_threshold#0",
        "maybe_exists%3#0"
      ]
    },
    "1296": {
      "error": "check self.threshold_price exists for account",
      "op": "assert // check self.threshold_price exists for account",
      "stack_out": [
        "user_threshold#0"
      ]
    },
    "1297": {
      "error": "Threshold not reached",
      "op": "assert // Threshold not reached",
      "stack_out": []
    },
    "1298": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "1300": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%9#0",
        "0"
      ]
    },
    "1301": {
      "op": "bytec_2 // \"yt_balance\"",
      "defined_out": [
        "\"yt_balance\"",
        "0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "0",
        "\"yt_balance\""
      ]
    },
    "1302": {
      "op": "app_local_get_ex",
      "defined_out": [
        "maybe_exists%4#0",
        "user_yt_balance#0"
      ],
      "stack_out": [
        "user_yt_balance#0",
        "maybe_exists%4#0"
      ]
    },
    "1303": {
      "error": "check self.yt_balance exists for account",
      "op": "assert // check self.yt_balance exists for account",
      "stack_out": [
        "user_yt_balance#0"
      ]
    },
    "1304": {
      "op": "dup",
      "defined_out": [
        "user_yt_balance#0",
        "user_yt_balance#0 (copy)"
      ],
      "stack_out": [
        "user_yt_balance#0",
        "user_yt_balance#0 (copy)"
      ]
    },
    "1305": {
      "error": "No YT tokens to convert",
      "op": "assert // No YT tokens to convert",
      "stack_out": [
        "user_yt_balance#0"
      ]
    },
    "1306": {
      "op": "intc_0 // 0",
      "stack_out": [
        "user_yt_balance#0",
        "0"
      ]
    },
    "1307": {
      "op": "bytec_1 // \"conversion_fee\"",
      "defined_out": [
        "\"conversion_fee\"",
        "0",
        "user_yt_balance#0"
      ],
      "stack_out": [
        "user_yt_balance#0",
        "0",
        "\"conversion_fee\""
      ]
    },
    "1308": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%5#0",
        "maybe_value%5#0",
        "user_yt_balance#0"
      ],
      "stack_out": [
        "user_yt_balance#0",
        "maybe_value%5#0",
        "maybe_exists%5#0"
      ]
    },
    "1309": {
      "error": "check self.conversion_fee exists",
      "op": "assert // check self.conversion_fee exists",
      "stack_out": [
        "user_yt_balance#0",
        "maybe_value%5#0"
      ]
    },
    "1310": {
      "op": "dig 1",
      "stack_out": [
        "user_yt_balance#0",
        "maybe_value%5#0",
        "user_yt_balance#0 (copy)"
      ]
    },
    "1312": {
      "op": "*",
      "defined_out": [
        "tmp%11#0",
        "user_yt_balance#0"
      ],
      "stack_out": [
        "user_yt_balance#0",
        "tmp%11#0"
      ]
    },
    "1313": {
      "op": "intc_0 // 0",
      "stack_out": [
        "user_yt_balance#0",
        "tmp%11#0",
        "0"
      ]
    },
    "1314": {
      "op": "bytec 11 // \"fee_denominator\"",
      "defined_out": [
        "\"fee_denominator\"",
        "0",
        "tmp%11#0",
        "user_yt_balance#0"
      ],
      "stack_out": [
        "user_yt_balance#0",
        "tmp%11#0",
        "0",
        "\"fee_denominator\""
      ]
    },
    "1316": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%6#0",
        "maybe_value%6#0",
        "tmp%11#0",
        "user_yt_balance#0"
      ],
      "stack_out": [
        "user_yt_balance#0",
        "tmp%11#0",
        "maybe_value%6#0",
        "maybe_exists%6#0"
      ]
    },
    "1317": {
      "error": "check self.fee_denominator exists",
      "op": "assert // check self.fee_denominator exists",
      "stack_out": [
        "user_yt_balance#0",
        "tmp%11#0",
        "maybe_value%6#0"
      ]
    },
    "1318": {
      "op": "/",
      "defined_out": [
        "fee_amount#0",
        "user_yt_balance#0"
      ],
      "stack_out": [
        "user_yt_balance#0",
        "fee_amount#0"
      ]
    },
    "1319": {
      "op": "dig 1",
      "stack_out": [
        "user_yt_balance#0",
        "fee_amount#0",
        "user_yt_balance#0 (copy)"
      ]
    },
    "1321": {
      "op": "swap",
      "stack_out": [
        "user_yt_balance#0",
        "user_yt_balance#0 (copy)",
        "fee_amount#0"
      ]
    },
    "1322": {
      "op": "-",
      "defined_out": [
        "conversion_amount#0",
        "user_yt_balance#0"
      ],
      "stack_out": [
        "user_yt_balance#0",
        "conversion_amount#0"
      ]
    },
    "1323": {
      "op": "pushint 9950 // 9950",
      "defined_out": [
        "9950",
        "conversion_amount#0",
        "user_yt_balance#0"
      ],
      "stack_out": [
        "user_yt_balance#0",
        "conversion_amount#0",
        "9950"
      ]
    },
    "1326": {
      "op": "*",
      "defined_out": [
        "tmp%0#1",
        "user_yt_balance#0"
      ],
      "stack_out": [
        "user_yt_balance#0",
        "tmp%0#1"
      ]
    },
    "1327": {
      "op": "intc_2 // 10000",
      "defined_out": [
        "10000",
        "tmp%0#1",
        "user_yt_balance#0"
      ],
      "stack_out": [
        "user_yt_balance#0",
        "tmp%0#1",
        "10000"
      ]
    },
    "1328": {
      "op": "/",
      "defined_out": [
        "market_rate#0",
        "user_yt_balance#0"
      ],
      "stack_out": [
        "user_yt_balance#0",
        "market_rate#0"
      ]
    },
    "1329": {
      "op": "dup",
      "defined_out": [
        "market_rate#0",
        "market_rate#0 (copy)",
        "user_yt_balance#0"
      ],
      "stack_out": [
        "user_yt_balance#0",
        "market_rate#0",
        "market_rate#0 (copy)"
      ]
    },
    "1330": {
      "op": "frame_dig -2",
      "defined_out": [
        "market_rate#0",
        "market_rate#0 (copy)",
        "min_pt_amount#0 (copy)",
        "user_yt_balance#0"
      ],
      "stack_out": [
        "user_yt_balance#0",
        "market_rate#0",
        "market_rate#0 (copy)",
        "min_pt_amount#0 (copy)"
      ]
    },
    "1332": {
      "op": ">=",
      "defined_out": [
        "market_rate#0",
        "tmp%1#1",
        "user_yt_balance#0"
      ],
      "stack_out": [
        "user_yt_balance#0",
        "market_rate#0",
        "tmp%1#1"
      ]
    },
    "1333": {
      "error": "Insufficient output amount",
      "op": "assert // Insufficient output amount",
      "stack_out": [
        "user_yt_balance#0",
        "market_rate#0"
      ]
    },
    "1334": {
      "op": "txn Sender",
      "defined_out": [
        "market_rate#0",
        "tmp%12#0",
        "user_yt_balance#0"
      ],
      "stack_out": [
        "user_yt_balance#0",
        "market_rate#0",
        "tmp%12#0"
      ]
    },
    "1336": {
      "op": "bytec_2 // \"yt_balance\"",
      "stack_out": [
        "user_yt_balance#0",
        "market_rate#0",
        "tmp%12#0",
        "\"yt_balance\""
      ]
    },
    "1337": {
      "op": "intc_0 // 0",
      "stack_out": [
        "user_yt_balance#0",
        "market_rate#0",
        "tmp%12#0",
        "\"yt_balance\"",
        "0"
      ]
    },
    "1338": {
      "op": "app_local_put",
      "stack_out": [
        "user_yt_balance#0",
        "market_rate#0"
      ]
    },
    "1339": {
      "op": "txn Sender",
      "defined_out": [
        "market_rate#0",
        "tmp%13#0",
        "user_yt_balance#0"
      ],
      "stack_out": [
        "user_yt_balance#0",
        "market_rate#0",
        "tmp%13#0"
      ]
    },
    "1341": {
      "op": "intc_0 // 0",
      "stack_out": [
        "user_yt_balance#0",
        "market_rate#0",
        "tmp%13#0",
        "0"
      ]
    },
    "1342": {
      "op": "bytec 8 // \"pt_balance\"",
      "defined_out": [
        "\"pt_balance\"",
        "0",
        "market_rate#0",
        "tmp%13#0",
        "user_yt_balance#0"
      ],
      "stack_out": [
        "user_yt_balance#0",
        "market_rate#0",
        "tmp%13#0",
        "0",
        "\"pt_balance\""
      ]
    },
    "1344": {
      "op": "app_local_get_ex",
      "defined_out": [
        "market_rate#0",
        "maybe_exists%7#0",
        "maybe_value%7#0",
        "user_yt_balance#0"
      ],
      "stack_out": [
        "user_yt_balance#0",
        "market_rate#0",
        "maybe_value%7#0",
        "maybe_exists%7#0"
      ]
    },
    "1345": {
      "error": "check self.pt_balance exists for account",
      "op": "assert // check self.pt_balance exists for account",
      "stack_out": [
        "user_yt_balance#0",
        "market_rate#0",
        "maybe_value%7#0"
      ]
    },
    "1346": {
      "op": "dig 1",
      "stack_out": [
        "user_yt_balance#0",
        "market_rate#0",
        "maybe_value%7#0",
        "market_rate#0 (copy)"
      ]
    },
    "1348": {
      "op": "+",
      "defined_out": [
        "market_rate#0",
        "materialized_values%0#0",
        "user_yt_balance#0"
      ],
      "stack_out": [
        "user_yt_balance#0",
        "market_rate#0",
        "materialized_values%0#0"
      ]
    },
    "1349": {
      "op": "txn Sender",
      "defined_out": [
        "market_rate#0",
        "materialized_values%0#0",
        "tmp%14#0",
        "user_yt_balance#0"
      ],
      "stack_out": [
        "user_yt_balance#0",
        "market_rate#0",
        "materialized_values%0#0",
        "tmp%14#0"
      ]
    },
    "1351": {
      "op": "bytec 8 // \"pt_balance\"",
      "stack_out": [
        "user_yt_balance#0",
        "market_rate#0",
        "materialized_values%0#0",
        "tmp%14#0",
        "\"pt_balance\""
      ]
    },
    "1353": {
      "op": "uncover 2",
      "stack_out": [
        "user_yt_balance#0",
        "market_rate#0",
        "tmp%14#0",
        "\"pt_balance\"",
        "materialized_values%0#0"
      ]
    },
    "1355": {
      "op": "app_local_put",
      "stack_out": [
        "user_yt_balance#0",
        "market_rate#0"
      ]
    },
    "1356": {
      "op": "txn Sender",
      "defined_out": [
        "market_rate#0",
        "tmp%15#0",
        "user_yt_balance#0"
      ],
      "stack_out": [
        "user_yt_balance#0",
        "market_rate#0",
        "tmp%15#0"
      ]
    },
    "1358": {
      "op": "bytec 7 // \"conversion_executed\"",
      "stack_out": [
        "user_yt_balance#0",
        "market_rate#0",
        "tmp%15#0",
        "\"conversion_executed\""
      ]
    },
    "1360": {
      "op": "intc_1 // 1",
      "stack_out": [
        "user_yt_balance#0",
        "market_rate#0",
        "tmp%15#0",
        "\"conversion_executed\"",
        "1"
      ]
    },
    "1361": {
      "op": "app_local_put",
      "stack_out": [
        "user_yt_balance#0",
        "market_rate#0"
      ]
    },
    "1362": {
      "op": "intc_0 // 0",
      "stack_out": [
        "user_yt_balance#0",
        "market_rate#0",
        "0"
      ]
    },
    "1363": {
      "op": "bytec 9 // \"total_conversions\"",
      "defined_out": [
        "\"total_conversions\"",
        "0",
        "market_rate#0",
        "user_yt_balance#0"
      ],
      "stack_out": [
        "user_yt_balance#0",
        "market_rate#0",
        "0",
        "\"total_conversions\""
      ]
    },
    "1365": {
      "op": "app_global_get_ex",
      "defined_out": [
        "market_rate#0",
        "maybe_exists%8#0",
        "maybe_value%8#0",
        "user_yt_balance#0"
      ],
      "stack_out": [
        "user_yt_balance#0",
        "market_rate#0",
        "maybe_value%8#0",
        "maybe_exists%8#0"
      ]
    },
    "1366": {
      "error": "check self.total_conversions exists",
      "op": "assert // check self.total_conversions exists",
      "stack_out": [
        "user_yt_balance#0",
        "market_rate#0",
        "maybe_value%8#0"
      ]
    },
    "1367": {
      "op": "intc_1 // 1",
      "stack_out": [
        "user_yt_balance#0",
        "market_rate#0",
        "maybe_value%8#0",
        "1"
      ]
    },
    "1368": {
      "op": "+",
      "defined_out": [
        "market_rate#0",
        "materialized_values%1#0",
        "user_yt_balance#0"
      ],
      "stack_out": [
        "user_yt_balance#0",
        "market_rate#0",
        "materialized_values%1#0"
      ]
    },
    "1369": {
      "op": "bytec 9 // \"total_conversions\"",
      "stack_out": [
        "user_yt_balance#0",
        "market_rate#0",
        "materialized_values%1#0",
        "\"total_conversions\""
      ]
    },
    "1371": {
      "op": "swap",
      "stack_out": [
        "user_yt_balance#0",
        "market_rate#0",
        "\"total_conversions\"",
        "materialized_values%1#0"
      ]
    },
    "1372": {
      "op": "app_global_put",
      "stack_out": [
        "user_yt_balance#0",
        "market_rate#0"
      ]
    },
    "1373": {
      "op": "swap",
      "stack_out": [
        "market_rate#0",
        "user_yt_balance#0"
      ]
    },
    "1374": {
      "op": "itob",
      "defined_out": [
        "market_rate#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "market_rate#0",
        "tmp%16#0"
      ]
    },
    "1375": {
      "op": "pushbytes 0x436f6e76657273696f6e206578656375746564202d2059543a20",
      "defined_out": [
        "0x436f6e76657273696f6e206578656375746564202d2059543a20",
        "market_rate#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "market_rate#0",
        "tmp%16#0",
        "0x436f6e76657273696f6e206578656375746564202d2059543a20"
      ]
    },
    "1403": {
      "op": "swap",
      "stack_out": [
        "market_rate#0",
        "0x436f6e76657273696f6e206578656375746564202d2059543a20",
        "tmp%16#0"
      ]
    },
    "1404": {
      "op": "concat",
      "defined_out": [
        "market_rate#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "market_rate#0",
        "tmp%17#0"
      ]
    },
    "1405": {
      "op": "pushbytes 0x2050543a20",
      "defined_out": [
        "0x2050543a20",
        "market_rate#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "market_rate#0",
        "tmp%17#0",
        "0x2050543a20"
      ]
    },
    "1412": {
      "op": "concat",
      "defined_out": [
        "market_rate#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "market_rate#0",
        "tmp%18#0"
      ]
    },
    "1413": {
      "op": "swap",
      "stack_out": [
        "tmp%18#0",
        "market_rate#0"
      ]
    },
    "1414": {
      "op": "itob",
      "defined_out": [
        "tmp%18#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%18#0",
        "tmp%19#0"
      ]
    },
    "1415": {
      "op": "concat",
      "defined_out": [
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0"
      ]
    },
    "1416": {
      "op": "log",
      "stack_out": []
    },
    "1417": {
      "op": "pushbytes \"Conversion executed successfully\"",
      "defined_out": [
        "\"Conversion executed successfully\""
      ],
      "stack_out": [
        "\"Conversion executed successfully\""
      ]
    },
    "1451": {
      "retsub": true,
      "op": "retsub"
    },
    "1452": {
      "subroutine": "smart_contracts.yt_auto_converter.contract.YTAutoConverter.can_execute_conversion",
      "params": {
        "user#0": "bytes"
      },
      "block": "can_execute_conversion",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "1455": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1457": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "1458": {
      "op": "bytec 5 // \"conversion_enabled\"",
      "defined_out": [
        "\"conversion_enabled\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"conversion_enabled\""
      ]
    },
    "1460": {
      "op": "app_local_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1461": {
      "error": "check self.conversion_enabled exists for account",
      "op": "assert // check self.conversion_enabled exists for account",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "1462": {
      "op": "bnz can_execute_conversion_after_if_else@2",
      "stack_out": []
    },
    "1465": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "1466": {
      "retsub": true,
      "op": "retsub"
    },
    "1467": {
      "block": "can_execute_conversion_after_if_else@2",
      "stack_in": [],
      "op": "txn Sender",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "1469": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "0"
      ]
    },
    "1470": {
      "op": "bytec 7 // \"conversion_executed\"",
      "defined_out": [
        "\"conversion_executed\"",
        "0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "0",
        "\"conversion_executed\""
      ]
    },
    "1472": {
      "op": "app_local_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1473": {
      "error": "check self.conversion_executed exists for account",
      "op": "assert // check self.conversion_executed exists for account",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "1474": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "1"
      ]
    },
    "1475": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "1476": {
      "op": "bz can_execute_conversion_after_if_else@4",
      "stack_out": []
    },
    "1479": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "1480": {
      "retsub": true,
      "op": "retsub"
    },
    "1481": {
      "block": "can_execute_conversion_after_if_else@4",
      "stack_in": [],
      "op": "txn Sender",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "1483": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "0"
      ]
    },
    "1484": {
      "op": "bytec_2 // \"yt_balance\"",
      "defined_out": [
        "\"yt_balance\"",
        "0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "0",
        "\"yt_balance\""
      ]
    },
    "1485": {
      "op": "app_local_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "1486": {
      "error": "check self.yt_balance exists for account",
      "op": "assert // check self.yt_balance exists for account",
      "stack_out": [
        "maybe_value%2#0"
      ]
    },
    "1487": {
      "op": "bnz can_execute_conversion_after_if_else@6",
      "stack_out": []
    },
    "1490": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "1491": {
      "retsub": true,
      "op": "retsub"
    },
    "1492": {
      "block": "can_execute_conversion_after_if_else@6",
      "stack_in": [],
      "op": "txn Sender",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "1494": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "0"
      ]
    },
    "1495": {
      "op": "bytec 6 // \"threshold_price\"",
      "defined_out": [
        "\"threshold_price\"",
        "0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "0",
        "\"threshold_price\""
      ]
    },
    "1497": {
      "op": "app_local_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "1498": {
      "error": "check self.threshold_price exists for account",
      "op": "assert // check self.threshold_price exists for account",
      "stack_out": [
        "maybe_value%3#0"
      ]
    },
    "1499": {
      "op": "bnz can_execute_conversion_after_if_else@8",
      "stack_out": []
    },
    "1502": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "1503": {
      "retsub": true,
      "op": "retsub"
    },
    "1504": {
      "block": "can_execute_conversion_after_if_else@8",
      "stack_in": [],
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "1505": {
      "retsub": true,
      "op": "retsub"
    },
    "1506": {
      "subroutine": "smart_contracts.yt_auto_converter.contract.YTAutoConverter.get_user_config",
      "params": {},
      "block": "get_user_config",
      "stack_in": [],
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1508": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "1509": {
      "op": "bytec 5 // \"conversion_enabled\"",
      "defined_out": [
        "\"conversion_enabled\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"conversion_enabled\""
      ]
    },
    "1511": {
      "op": "app_local_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1512": {
      "error": "check self.conversion_enabled exists for account",
      "op": "assert // check self.conversion_enabled exists for account",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "1513": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "1514": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%1#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "tmp%1#0"
      ]
    },
    "1516": {
      "op": "intc_0 // 0",
      "stack_out": [
        "val_as_bytes%0#0",
        "tmp%1#0",
        "0"
      ]
    },
    "1517": {
      "op": "bytec 6 // \"threshold_price\"",
      "defined_out": [
        "\"threshold_price\"",
        "0",
        "tmp%1#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "tmp%1#0",
        "0",
        "\"threshold_price\""
      ]
    },
    "1519": {
      "op": "app_local_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1520": {
      "error": "check self.threshold_price exists for account",
      "op": "assert // check self.threshold_price exists for account",
      "stack_out": [
        "val_as_bytes%0#0",
        "maybe_value%1#0"
      ]
    },
    "1521": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ]
    },
    "1522": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%2#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "tmp%2#0"
      ]
    },
    "1524": {
      "op": "intc_0 // 0",
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "tmp%2#0",
        "0"
      ]
    },
    "1525": {
      "op": "bytec 10 // \"user_maturity\"",
      "defined_out": [
        "\"user_maturity\"",
        "0",
        "tmp%2#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "tmp%2#0",
        "0",
        "\"user_maturity\""
      ]
    },
    "1527": {
      "op": "app_local_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "1528": {
      "error": "check self.user_maturity exists for account",
      "op": "assert // check self.user_maturity exists for account",
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "maybe_value%2#0"
      ]
    },
    "1529": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ]
    },
    "1530": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%3#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "tmp%3#0"
      ]
    },
    "1532": {
      "op": "intc_0 // 0",
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "tmp%3#0",
        "0"
      ]
    },
    "1533": {
      "op": "bytec 7 // \"conversion_executed\"",
      "defined_out": [
        "\"conversion_executed\"",
        "0",
        "tmp%3#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "tmp%3#0",
        "0",
        "\"conversion_executed\""
      ]
    },
    "1535": {
      "op": "app_local_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "1536": {
      "error": "check self.conversion_executed exists for account",
      "op": "assert // check self.conversion_executed exists for account",
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "maybe_value%3#0"
      ]
    },
    "1537": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ]
    },
    "1538": {
      "op": "uncover 3",
      "stack_out": [
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%0#0"
      ]
    },
    "1540": {
      "op": "uncover 3",
      "stack_out": [
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ]
    },
    "1542": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "1543": {
      "op": "uncover 2",
      "stack_out": [
        "val_as_bytes%3#0",
        "encoded_tuple_buffer%2#0",
        "val_as_bytes%2#0"
      ]
    },
    "1545": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "val_as_bytes%3#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "1546": {
      "op": "swap",
      "stack_out": [
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%3#0"
      ]
    },
    "1547": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%4#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%4#0"
      ]
    },
    "1548": {
      "retsub": true,
      "op": "retsub"
    },
    "1549": {
      "subroutine": "smart_contracts.yt_auto_converter.contract.YTAutoConverter.get_user_balances",
      "params": {},
      "block": "get_user_balances",
      "stack_in": [],
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1551": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "1552": {
      "op": "bytec_2 // \"yt_balance\"",
      "defined_out": [
        "\"yt_balance\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"yt_balance\""
      ]
    },
    "1553": {
      "op": "app_local_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1554": {
      "error": "check self.yt_balance exists for account",
      "op": "assert // check self.yt_balance exists for account",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "1555": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "1556": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%1#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "tmp%1#0"
      ]
    },
    "1558": {
      "op": "intc_0 // 0",
      "stack_out": [
        "val_as_bytes%0#0",
        "tmp%1#0",
        "0"
      ]
    },
    "1559": {
      "op": "bytec 8 // \"pt_balance\"",
      "defined_out": [
        "\"pt_balance\"",
        "0",
        "tmp%1#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "tmp%1#0",
        "0",
        "\"pt_balance\""
      ]
    },
    "1561": {
      "op": "app_local_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1562": {
      "error": "check self.pt_balance exists for account",
      "op": "assert // check self.pt_balance exists for account",
      "stack_out": [
        "val_as_bytes%0#0",
        "maybe_value%1#0"
      ]
    },
    "1563": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ]
    },
    "1564": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0"
      ]
    },
    "1565": {
      "retsub": true,
      "op": "retsub"
    },
    "1566": {
      "subroutine": "smart_contracts.yt_auto_converter.contract.YTAutoConverter.get_conversion_info",
      "params": {},
      "block": "get_conversion_info",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1567": {
      "op": "bytec_1 // \"conversion_fee\"",
      "defined_out": [
        "\"conversion_fee\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"conversion_fee\""
      ]
    },
    "1568": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1569": {
      "error": "check self.conversion_fee exists",
      "op": "assert // check self.conversion_fee exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "1570": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "1571": {
      "op": "intc_0 // 0",
      "stack_out": [
        "val_as_bytes%0#0",
        "0"
      ]
    },
    "1572": {
      "op": "bytec 9 // \"total_conversions\"",
      "defined_out": [
        "\"total_conversions\"",
        "0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "0",
        "\"total_conversions\""
      ]
    },
    "1574": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1575": {
      "error": "check self.total_conversions exists",
      "op": "assert // check self.total_conversions exists",
      "stack_out": [
        "val_as_bytes%0#0",
        "maybe_value%1#0"
      ]
    },
    "1576": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ]
    },
    "1577": {
      "op": "intc_0 // 0",
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "0"
      ]
    },
    "1578": {
      "op": "bytec 4 // \"is_paused\"",
      "defined_out": [
        "\"is_paused\"",
        "0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "0",
        "\"is_paused\""
      ]
    },
    "1580": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "1581": {
      "error": "check self.is_paused exists",
      "op": "assert // check self.is_paused exists",
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "maybe_value%2#0"
      ]
    },
    "1582": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ]
    },
    "1583": {
      "op": "cover 2",
      "stack_out": [
        "val_as_bytes%2#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ]
    },
    "1585": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "val_as_bytes%2#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "1586": {
      "op": "swap",
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "val_as_bytes%2#0"
      ]
    },
    "1587": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%3#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%3#0"
      ]
    },
    "1588": {
      "retsub": true,
      "op": "retsub"
    },
    "1589": {
      "subroutine": "smart_contracts.yt_auto_converter.contract.YTAutoConverter.calculate_conversion_output",
      "params": {
        "yt_amount#0": "uint64"
      },
      "block": "calculate_conversion_output",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "1592": {
      "op": "frame_dig -1",
      "defined_out": [
        "yt_amount#0 (copy)"
      ],
      "stack_out": [
        "yt_amount#0 (copy)"
      ]
    },
    "1594": {
      "op": "bnz calculate_conversion_output_after_if_else@2",
      "stack_out": []
    },
    "1597": {
      "op": "pushbytes 0x00000000000000000000000000000000",
      "defined_out": [
        "0x00000000000000000000000000000000"
      ],
      "stack_out": [
        "0x00000000000000000000000000000000"
      ]
    },
    "1615": {
      "retsub": true,
      "op": "retsub"
    },
    "1616": {
      "block": "calculate_conversion_output_after_if_else@2",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1617": {
      "op": "bytec_1 // \"conversion_fee\"",
      "defined_out": [
        "\"conversion_fee\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"conversion_fee\""
      ]
    },
    "1618": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1619": {
      "error": "check self.conversion_fee exists",
      "op": "assert // check self.conversion_fee exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "1620": {
      "op": "frame_dig -1",
      "defined_out": [
        "maybe_value%0#0",
        "yt_amount#0 (copy)"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "yt_amount#0 (copy)"
      ]
    },
    "1622": {
      "op": "*",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1623": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%1#0",
        "0"
      ]
    },
    "1624": {
      "op": "bytec 11 // \"fee_denominator\"",
      "defined_out": [
        "\"fee_denominator\"",
        "0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "0",
        "\"fee_denominator\""
      ]
    },
    "1626": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1627": {
      "error": "check self.fee_denominator exists",
      "op": "assert // check self.fee_denominator exists",
      "stack_out": [
        "tmp%1#0",
        "maybe_value%1#0"
      ]
    },
    "1628": {
      "op": "/",
      "defined_out": [
        "fee_amount#0"
      ],
      "stack_out": [
        "fee_amount#0"
      ]
    },
    "1629": {
      "op": "frame_dig -1",
      "stack_out": [
        "fee_amount#0",
        "yt_amount#0 (copy)"
      ]
    },
    "1631": {
      "op": "dig 1",
      "defined_out": [
        "fee_amount#0",
        "fee_amount#0 (copy)",
        "yt_amount#0 (copy)"
      ],
      "stack_out": [
        "fee_amount#0",
        "yt_amount#0 (copy)",
        "fee_amount#0 (copy)"
      ]
    },
    "1633": {
      "op": "-",
      "defined_out": [
        "conversion_amount#0",
        "fee_amount#0"
      ],
      "stack_out": [
        "fee_amount#0",
        "conversion_amount#0"
      ]
    },
    "1634": {
      "op": "dup",
      "defined_out": [
        "conversion_amount#0",
        "conversion_amount#0 (copy)",
        "fee_amount#0"
      ],
      "stack_out": [
        "fee_amount#0",
        "conversion_amount#0",
        "conversion_amount#0 (copy)"
      ]
    },
    "1635": {
      "op": "pushint 50 // 50",
      "defined_out": [
        "50",
        "conversion_amount#0",
        "conversion_amount#0 (copy)",
        "fee_amount#0"
      ],
      "stack_out": [
        "fee_amount#0",
        "conversion_amount#0",
        "conversion_amount#0 (copy)",
        "50"
      ]
    },
    "1637": {
      "op": "*",
      "defined_out": [
        "conversion_amount#0",
        "fee_amount#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "fee_amount#0",
        "conversion_amount#0",
        "tmp%2#0"
      ]
    },
    "1638": {
      "op": "intc_2 // 10000",
      "defined_out": [
        "10000",
        "conversion_amount#0",
        "fee_amount#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "fee_amount#0",
        "conversion_amount#0",
        "tmp%2#0",
        "10000"
      ]
    },
    "1639": {
      "op": "/",
      "defined_out": [
        "conversion_amount#0",
        "fee_amount#0",
        "slippage_amount#0"
      ],
      "stack_out": [
        "fee_amount#0",
        "conversion_amount#0",
        "slippage_amount#0"
      ]
    },
    "1640": {
      "op": "-",
      "defined_out": [
        "expected_pt#0",
        "fee_amount#0"
      ],
      "stack_out": [
        "fee_amount#0",
        "expected_pt#0"
      ]
    },
    "1641": {
      "op": "itob",
      "defined_out": [
        "fee_amount#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "fee_amount#0",
        "val_as_bytes%0#0"
      ]
    },
    "1642": {
      "op": "swap",
      "stack_out": [
        "val_as_bytes%0#0",
        "fee_amount#0"
      ]
    },
    "1643": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ]
    },
    "1644": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%5#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%5#0"
      ]
    },
    "1645": {
      "retsub": true,
      "op": "retsub"
    },
    "1646": {
      "subroutine": "smart_contracts.yt_auto_converter.contract.YTAutoConverter.add_maturity",
      "params": {
        "maturity#0": "uint64"
      },
      "block": "add_maturity",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "1649": {
      "op": "frame_dig -1",
      "defined_out": [
        "maturity#0 (copy)"
      ],
      "stack_out": [
        "maturity#0 (copy)"
      ]
    },
    "1651": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "maturity#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "maturity#0 (copy)",
        "tmp%0#0"
      ]
    },
    "1653": {
      "op": ">",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1654": {
      "error": "Maturity must be in future",
      "op": "assert // Maturity must be in future",
      "stack_out": []
    },
    "1655": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "1657": {
      "op": "bytec 10 // \"user_maturity\"",
      "defined_out": [
        "\"user_maturity\"",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "\"user_maturity\""
      ]
    },
    "1659": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%2#0",
        "\"user_maturity\"",
        "maturity#0 (copy)"
      ]
    },
    "1661": {
      "op": "app_local_put",
      "stack_out": []
    },
    "1662": {
      "op": "frame_dig -1",
      "stack_out": [
        "maturity#0 (copy)"
      ]
    },
    "1664": {
      "op": "itob",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "1665": {
      "op": "pushbytes 0x4d61747572697479206164646564202d2056616c75653a20",
      "defined_out": [
        "0x4d61747572697479206164646564202d2056616c75653a20",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "0x4d61747572697479206164646564202d2056616c75653a20"
      ]
    },
    "1691": {
      "op": "swap",
      "stack_out": [
        "0x4d61747572697479206164646564202d2056616c75653a20",
        "tmp%3#0"
      ]
    },
    "1692": {
      "op": "concat",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "1693": {
      "op": "log",
      "stack_out": []
    },
    "1694": {
      "op": "pushbytes \"Maturity added successfully\"",
      "defined_out": [
        "\"Maturity added successfully\""
      ],
      "stack_out": [
        "\"Maturity added successfully\""
      ]
    },
    "1723": {
      "retsub": true,
      "op": "retsub"
    },
    "1724": {
      "subroutine": "smart_contracts.yt_auto_converter.contract.YTAutoConverter.remove_maturity",
      "params": {},
      "block": "remove_maturity",
      "stack_in": [],
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1726": {
      "op": "bytec 10 // \"user_maturity\"",
      "defined_out": [
        "\"user_maturity\"",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "\"user_maturity\""
      ]
    },
    "1728": {
      "op": "intc_0 // 0",
      "defined_out": [
        "\"user_maturity\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "\"user_maturity\"",
        "0"
      ]
    },
    "1729": {
      "op": "app_local_put",
      "stack_out": []
    },
    "1730": {
      "op": "pushbytes 0x4d617475726974792072656d6f766564",
      "defined_out": [
        "0x4d617475726974792072656d6f766564"
      ],
      "stack_out": [
        "0x4d617475726974792072656d6f766564"
      ]
    },
    "1748": {
      "op": "log",
      "stack_out": []
    },
    "1749": {
      "op": "pushbytes \"Maturity removed successfully\"",
      "defined_out": [
        "\"Maturity removed successfully\""
      ],
      "stack_out": [
        "\"Maturity removed successfully\""
      ]
    },
    "1780": {
      "retsub": true,
      "op": "retsub"
    },
    "1781": {
      "subroutine": "smart_contracts.yt_auto_converter.contract.YTAutoConverter.set_conversion_fee",
      "params": {
        "new_fee#0": "uint64"
      },
      "block": "set_conversion_fee",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "1784": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1786": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "1787": {
      "op": "bytec_3 // \"admin\"",
      "defined_out": [
        "\"admin\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"admin\""
      ]
    },
    "1788": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1789": {
      "error": "check self.admin exists",
      "op": "assert // check self.admin exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "1790": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1791": {
      "error": "Only admin can set fee",
      "op": "assert // Only admin can set fee",
      "stack_out": []
    },
    "1792": {
      "op": "frame_dig -1",
      "defined_out": [
        "new_fee#0 (copy)"
      ],
      "stack_out": [
        "new_fee#0 (copy)"
      ]
    },
    "1794": {
      "op": "pushint 1000 // 1000",
      "defined_out": [
        "1000",
        "new_fee#0 (copy)"
      ],
      "stack_out": [
        "new_fee#0 (copy)",
        "1000"
      ]
    },
    "1797": {
      "op": "<=",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "1798": {
      "error": "Fee too high (max 10%)",
      "op": "assert // Fee too high (max 10%)",
      "stack_out": []
    },
    "1799": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "1800": {
      "op": "bytec_1 // \"conversion_fee\"",
      "defined_out": [
        "\"conversion_fee\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"conversion_fee\""
      ]
    },
    "1801": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "old_fee#0"
      ],
      "stack_out": [
        "old_fee#0",
        "maybe_exists%1#0"
      ]
    },
    "1802": {
      "error": "check self.conversion_fee exists",
      "op": "assert // check self.conversion_fee exists",
      "stack_out": [
        "old_fee#0"
      ]
    },
    "1803": {
      "op": "bytec_1 // \"conversion_fee\"",
      "stack_out": [
        "old_fee#0",
        "\"conversion_fee\""
      ]
    },
    "1804": {
      "op": "frame_dig -1",
      "stack_out": [
        "old_fee#0",
        "\"conversion_fee\"",
        "new_fee#0 (copy)"
      ]
    },
    "1806": {
      "op": "app_global_put",
      "stack_out": [
        "old_fee#0"
      ]
    },
    "1807": {
      "op": "itob",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "1808": {
      "op": "pushbytes 0x436f6e76657273696f6e206665652075706461746564202d204f6c643a20",
      "defined_out": [
        "0x436f6e76657273696f6e206665652075706461746564202d204f6c643a20",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "0x436f6e76657273696f6e206665652075706461746564202d204f6c643a20"
      ]
    },
    "1840": {
      "op": "swap",
      "stack_out": [
        "0x436f6e76657273696f6e206665652075706461746564202d204f6c643a20",
        "tmp%3#0"
      ]
    },
    "1841": {
      "op": "concat",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "1842": {
      "op": "pushbytes 0x204e65773a20",
      "defined_out": [
        "0x204e65773a20",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "0x204e65773a20"
      ]
    },
    "1850": {
      "op": "concat",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "1851": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%5#0",
        "new_fee#0 (copy)"
      ]
    },
    "1853": {
      "op": "itob",
      "defined_out": [
        "tmp%5#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "tmp%6#0"
      ]
    },
    "1854": {
      "op": "concat",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "1855": {
      "op": "log",
      "stack_out": []
    },
    "1856": {
      "op": "pushbytes \"Conversion fee updated successfully\"",
      "defined_out": [
        "\"Conversion fee updated successfully\""
      ],
      "stack_out": [
        "\"Conversion fee updated successfully\""
      ]
    },
    "1893": {
      "retsub": true,
      "op": "retsub"
    },
    "1894": {
      "subroutine": "smart_contracts.yt_auto_converter.contract.YTAutoConverter.pause_converter",
      "params": {},
      "block": "pause_converter",
      "stack_in": [],
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1896": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "1897": {
      "op": "bytec_3 // \"admin\"",
      "defined_out": [
        "\"admin\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"admin\""
      ]
    },
    "1898": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1899": {
      "error": "check self.admin exists",
      "op": "assert // check self.admin exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "1900": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1901": {
      "error": "Only admin can pause",
      "op": "assert // Only admin can pause",
      "stack_out": []
    },
    "1902": {
      "op": "bytec 4 // \"is_paused\"",
      "defined_out": [
        "\"is_paused\""
      ],
      "stack_out": [
        "\"is_paused\""
      ]
    },
    "1904": {
      "op": "intc_1 // 1",
      "defined_out": [
        "\"is_paused\"",
        "1"
      ],
      "stack_out": [
        "\"is_paused\"",
        "1"
      ]
    },
    "1905": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1906": {
      "op": "bytec 15 // 0x436f6e76657274657220706175736564",
      "defined_out": [
        "0x436f6e76657274657220706175736564"
      ],
      "stack_out": [
        "0x436f6e76657274657220706175736564"
      ]
    },
    "1908": {
      "op": "log",
      "stack_out": []
    },
    "1909": {
      "op": "bytec 15 // \"Converter paused\"",
      "defined_out": [
        "\"Converter paused\""
      ],
      "stack_out": [
        "\"Converter paused\""
      ]
    },
    "1911": {
      "retsub": true,
      "op": "retsub"
    },
    "1912": {
      "subroutine": "smart_contracts.yt_auto_converter.contract.YTAutoConverter.unpause_converter",
      "params": {},
      "block": "unpause_converter",
      "stack_in": [],
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1914": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "1915": {
      "op": "bytec_3 // \"admin\"",
      "defined_out": [
        "\"admin\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"admin\""
      ]
    },
    "1916": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1917": {
      "error": "check self.admin exists",
      "op": "assert // check self.admin exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "1918": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1919": {
      "error": "Only admin can unpause",
      "op": "assert // Only admin can unpause",
      "stack_out": []
    },
    "1920": {
      "op": "bytec 4 // \"is_paused\"",
      "defined_out": [
        "\"is_paused\""
      ],
      "stack_out": [
        "\"is_paused\""
      ]
    },
    "1922": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"is_paused\"",
        "0"
      ]
    },
    "1923": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1924": {
      "op": "bytec 16 // 0x436f6e76657274657220756e706175736564",
      "defined_out": [
        "0x436f6e76657274657220756e706175736564"
      ],
      "stack_out": [
        "0x436f6e76657274657220756e706175736564"
      ]
    },
    "1926": {
      "op": "log",
      "stack_out": []
    },
    "1927": {
      "op": "bytec 16 // \"Converter unpaused\"",
      "defined_out": [
        "\"Converter unpaused\""
      ],
      "stack_out": [
        "\"Converter unpaused\""
      ]
    },
    "1929": {
      "retsub": true,
      "op": "retsub"
    },
    "1930": {
      "subroutine": "smart_contracts.yt_auto_converter.contract.YTAutoConverter.emergency_disable_conversion",
      "params": {},
      "block": "emergency_disable_conversion",
      "stack_in": [],
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1932": {
      "op": "bytec 5 // \"conversion_enabled\"",
      "defined_out": [
        "\"conversion_enabled\"",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "\"conversion_enabled\""
      ]
    },
    "1934": {
      "op": "intc_0 // 0",
      "defined_out": [
        "\"conversion_enabled\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "\"conversion_enabled\"",
        "0"
      ]
    },
    "1935": {
      "op": "app_local_put",
      "stack_out": []
    },
    "1936": {
      "op": "pushbytes 0x436f6e76657273696f6e20656d657267656e63792064697361626c6564",
      "defined_out": [
        "0x436f6e76657273696f6e20656d657267656e63792064697361626c6564"
      ],
      "stack_out": [
        "0x436f6e76657273696f6e20656d657267656e63792064697361626c6564"
      ]
    },
    "1967": {
      "op": "log",
      "stack_out": []
    },
    "1968": {
      "op": "pushbytes \"Conversion disabled for emergency\"",
      "defined_out": [
        "\"Conversion disabled for emergency\""
      ],
      "stack_out": [
        "\"Conversion disabled for emergency\""
      ]
    },
    "2003": {
      "retsub": true,
      "op": "retsub"
    },
    "2004": {
      "subroutine": "smart_contracts.yt_auto_converter.contract.YTAutoConverter.withdraw_pt_tokens",
      "params": {
        "amount#0": "uint64"
      },
      "block": "withdraw_pt_tokens",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "2007": {
      "op": "frame_dig -1",
      "defined_out": [
        "amount#0 (copy)"
      ],
      "stack_out": [
        "amount#0 (copy)"
      ]
    },
    "2009": {
      "error": "Amount must be positive",
      "op": "assert // Amount must be positive",
      "stack_out": []
    },
    "2010": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "2012": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "0"
      ]
    },
    "2013": {
      "op": "bytec 8 // \"pt_balance\"",
      "defined_out": [
        "\"pt_balance\"",
        "0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "0",
        "\"pt_balance\""
      ]
    },
    "2015": {
      "op": "app_local_get_ex",
      "defined_out": [
        "current_pt_balance#0",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "current_pt_balance#0",
        "maybe_exists%0#0"
      ]
    },
    "2016": {
      "error": "check self.pt_balance exists for account",
      "op": "assert // check self.pt_balance exists for account",
      "stack_out": [
        "current_pt_balance#0"
      ]
    },
    "2017": {
      "op": "dup",
      "defined_out": [
        "current_pt_balance#0",
        "current_pt_balance#0 (copy)"
      ],
      "stack_out": [
        "current_pt_balance#0",
        "current_pt_balance#0 (copy)"
      ]
    },
    "2018": {
      "op": "frame_dig -1",
      "stack_out": [
        "current_pt_balance#0",
        "current_pt_balance#0 (copy)",
        "amount#0 (copy)"
      ]
    },
    "2020": {
      "op": ">=",
      "defined_out": [
        "current_pt_balance#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "current_pt_balance#0",
        "tmp%2#0"
      ]
    },
    "2021": {
      "error": "Insufficient PT balance",
      "op": "assert // Insufficient PT balance",
      "stack_out": [
        "current_pt_balance#0"
      ]
    },
    "2022": {
      "op": "frame_dig -1",
      "stack_out": [
        "current_pt_balance#0",
        "amount#0 (copy)"
      ]
    },
    "2024": {
      "op": "-",
      "defined_out": [
        "materialized_values%0#0"
      ],
      "stack_out": [
        "materialized_values%0#0"
      ]
    },
    "2025": {
      "op": "txn Sender",
      "defined_out": [
        "materialized_values%0#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "materialized_values%0#0",
        "tmp%3#0"
      ]
    },
    "2027": {
      "op": "bytec 8 // \"pt_balance\"",
      "stack_out": [
        "materialized_values%0#0",
        "tmp%3#0",
        "\"pt_balance\""
      ]
    },
    "2029": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%3#0",
        "\"pt_balance\"",
        "materialized_values%0#0"
      ]
    },
    "2031": {
      "op": "app_local_put",
      "stack_out": []
    },
    "2032": {
      "op": "frame_dig -1",
      "stack_out": [
        "amount#0 (copy)"
      ]
    },
    "2034": {
      "op": "itob",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "2035": {
      "op": "pushbytes 0x505420746f6b656e732077697468647261776e202d20416d6f756e743a20",
      "defined_out": [
        "0x505420746f6b656e732077697468647261776e202d20416d6f756e743a20",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "0x505420746f6b656e732077697468647261776e202d20416d6f756e743a20"
      ]
    },
    "2067": {
      "op": "swap",
      "stack_out": [
        "0x505420746f6b656e732077697468647261776e202d20416d6f756e743a20",
        "tmp%4#0"
      ]
    },
    "2068": {
      "op": "concat",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "2069": {
      "op": "log",
      "stack_out": []
    },
    "2070": {
      "op": "pushbytes \"PT tokens withdrawn successfully\"",
      "defined_out": [
        "\"PT tokens withdrawn successfully\""
      ],
      "stack_out": [
        "\"PT tokens withdrawn successfully\""
      ]
    },
    "2104": {
      "retsub": true,
      "op": "retsub"
    },
    "2105": {
      "subroutine": "smart_contracts.yt_auto_converter.contract.YTAutoConverter.get_ai_recommendation",
      "params": {
        "yt_amount#0": "uint64",
        "current_price#0": "uint64"
      },
      "block": "get_ai_recommendation",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "2108": {
      "op": "pushbytes \"\"",
      "stack_out": [
        "user_threshold#0"
      ]
    },
    "2110": {
      "op": "frame_dig -2",
      "defined_out": [
        "yt_amount#0 (copy)"
      ],
      "stack_out": [
        "user_threshold#0",
        "yt_amount#0 (copy)"
      ]
    },
    "2112": {
      "op": "bnz get_ai_recommendation_after_if_else@2",
      "stack_out": [
        "user_threshold#0"
      ]
    },
    "2115": {
      "op": "pushbytes 0x0000000000000000000a00174e6f20595420746f6b656e7320746f20636f6e76657274",
      "defined_out": [
        "0x0000000000000000000a00174e6f20595420746f6b656e7320746f20636f6e76657274"
      ],
      "stack_out": [
        "user_threshold#0",
        "0x0000000000000000000a00174e6f20595420746f6b656e7320746f20636f6e76657274"
      ]
    },
    "2152": {
      "op": "swap"
    },
    "2153": {
      "retsub": true,
      "op": "retsub"
    },
    "2154": {
      "block": "get_ai_recommendation_after_if_else@2",
      "stack_in": [
        "user_threshold#0"
      ],
      "op": "txn Sender",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "user_threshold#0",
        "tmp%1#0"
      ]
    },
    "2156": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%1#0"
      ],
      "stack_out": [
        "user_threshold#0",
        "tmp%1#0",
        "0"
      ]
    },
    "2157": {
      "op": "bytec 6 // \"threshold_price\"",
      "defined_out": [
        "\"threshold_price\"",
        "0",
        "tmp%1#0"
      ],
      "stack_out": [
        "user_threshold#0",
        "tmp%1#0",
        "0",
        "\"threshold_price\""
      ]
    },
    "2159": {
      "op": "app_local_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "user_threshold#0"
      ],
      "stack_out": [
        "user_threshold#0",
        "user_threshold#0",
        "maybe_exists%0#0"
      ]
    },
    "2160": {
      "op": "swap",
      "stack_out": [
        "user_threshold#0",
        "maybe_exists%0#0",
        "user_threshold#0"
      ]
    },
    "2161": {
      "op": "dup",
      "stack_out": [
        "user_threshold#0",
        "maybe_exists%0#0",
        "user_threshold#0",
        "user_threshold#0 (copy)"
      ]
    },
    "2162": {
      "op": "cover 2",
      "stack_out": [
        "user_threshold#0",
        "user_threshold#0",
        "maybe_exists%0#0",
        "user_threshold#0"
      ]
    },
    "2164": {
      "op": "frame_bury 0",
      "defined_out": [
        "maybe_exists%0#0",
        "user_threshold#0"
      ],
      "stack_out": [
        "user_threshold#0",
        "user_threshold#0",
        "maybe_exists%0#0"
      ]
    },
    "2166": {
      "error": "check self.threshold_price exists for account",
      "op": "assert // check self.threshold_price exists for account",
      "stack_out": [
        "user_threshold#0",
        "user_threshold#0"
      ]
    },
    "2167": {
      "op": "frame_dig -1",
      "defined_out": [
        "current_price#0 (copy)",
        "user_threshold#0"
      ],
      "stack_out": [
        "user_threshold#0",
        "user_threshold#0",
        "current_price#0 (copy)"
      ]
    },
    "2169": {
      "op": "<=",
      "defined_out": [
        "tmp%2#0",
        "user_threshold#0"
      ],
      "stack_out": [
        "user_threshold#0",
        "tmp%2#0"
      ]
    },
    "2170": {
      "op": "bz get_ai_recommendation_else_body@4",
      "stack_out": [
        "user_threshold#0"
      ]
    },
    "2173": {
      "op": "pushbytes 0x0000000000000001000a00285265636f6d6d656e6420636f6e76657273696f6e202d207468726573686f6c642072656163686564",
      "defined_out": [
        "0x0000000000000001000a00285265636f6d6d656e6420636f6e76657273696f6e202d207468726573686f6c642072656163686564",
        "user_threshold#0"
      ],
      "stack_out": [
        "user_threshold#0",
        "0x0000000000000001000a00285265636f6d6d656e6420636f6e76657273696f6e202d207468726573686f6c642072656163686564"
      ]
    },
    "2227": {
      "op": "swap"
    },
    "2228": {
      "retsub": true,
      "op": "retsub"
    },
    "2229": {
      "block": "get_ai_recommendation_else_body@4",
      "stack_in": [
        "user_threshold#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "user_threshold#0"
      ],
      "stack_out": [
        "user_threshold#0",
        "user_threshold#0"
      ]
    },
    "2231": {
      "op": "frame_dig -1",
      "defined_out": [
        "current_price#0 (copy)",
        "user_threshold#0"
      ],
      "stack_out": [
        "user_threshold#0",
        "user_threshold#0",
        "current_price#0 (copy)"
      ]
    },
    "2233": {
      "op": "-",
      "defined_out": [
        "tmp%3#0",
        "user_threshold#0"
      ],
      "stack_out": [
        "user_threshold#0",
        "tmp%3#0"
      ]
    },
    "2234": {
      "op": "pushint 100 // 100",
      "defined_out": [
        "100",
        "tmp%3#0",
        "user_threshold#0"
      ],
      "stack_out": [
        "user_threshold#0",
        "tmp%3#0",
        "100"
      ]
    },
    "2236": {
      "op": "*",
      "defined_out": [
        "tmp%4#0",
        "user_threshold#0"
      ],
      "stack_out": [
        "user_threshold#0",
        "tmp%4#0"
      ]
    },
    "2237": {
      "op": "frame_dig -1",
      "stack_out": [
        "user_threshold#0",
        "tmp%4#0",
        "current_price#0 (copy)"
      ]
    },
    "2239": {
      "op": "/",
      "defined_out": [
        "remaining_upside#0",
        "user_threshold#0"
      ],
      "stack_out": [
        "user_threshold#0",
        "remaining_upside#0"
      ]
    },
    "2240": {
      "op": "pushint 5 // 5",
      "defined_out": [
        "5",
        "remaining_upside#0",
        "user_threshold#0"
      ],
      "stack_out": [
        "user_threshold#0",
        "remaining_upside#0",
        "5"
      ]
    },
    "2242": {
      "op": "<",
      "defined_out": [
        "tmp%5#0",
        "user_threshold#0"
      ],
      "stack_out": [
        "user_threshold#0",
        "tmp%5#0"
      ]
    },
    "2243": {
      "op": "bz get_ai_recommendation_else_body@6",
      "stack_out": [
        "user_threshold#0"
      ]
    },
    "2246": {
      "op": "pushbytes 0x0000000000000001000a00295265636f6d6d656e6420636f6e76657273696f6e202d20636c6f736520746f207468726573686f6c64",
      "defined_out": [
        "0x0000000000000001000a00295265636f6d6d656e6420636f6e76657273696f6e202d20636c6f736520746f207468726573686f6c64",
        "user_threshold#0"
      ],
      "stack_out": [
        "user_threshold#0",
        "0x0000000000000001000a00295265636f6d6d656e6420636f6e76657273696f6e202d20636c6f736520746f207468726573686f6c64"
      ]
    },
    "2301": {
      "op": "swap"
    },
    "2302": {
      "retsub": true,
      "op": "retsub"
    },
    "2303": {
      "block": "get_ai_recommendation_else_body@6",
      "stack_in": [
        "user_threshold#0"
      ],
      "op": "pushbytes 0x0000000000000000000a0026486f6c6420595420746f6b656e73202d207468726573686f6c64206e6f742072656163686564",
      "defined_out": [
        "0x0000000000000000000a0026486f6c6420595420746f6b656e73202d207468726573686f6c64206e6f742072656163686564"
      ],
      "stack_out": [
        "user_threshold#0",
        "0x0000000000000000000a0026486f6c6420595420746f6b656e73202d207468726573686f6c64206e6f742072656163686564"
      ]
    },
    "2355": {
      "op": "swap"
    },
    "2356": {
      "retsub": true,
      "op": "retsub"
    },
    "2357": {
      "subroutine": "smart_contracts.yt_auto_converter.contract.YTAutoConverter.update_addresses",
      "params": {
        "oracle_address#0": "bytes",
        "tokenization_address#0": "bytes",
        "amm_address#0": "bytes"
      },
      "block": "update_addresses",
      "stack_in": [],
      "op": "proto 3 1"
    },
    "2360": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2362": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "2363": {
      "op": "bytec_3 // \"admin\"",
      "defined_out": [
        "\"admin\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"admin\""
      ]
    },
    "2364": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2365": {
      "error": "check self.admin exists",
      "op": "assert // check self.admin exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "2366": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "2367": {
      "error": "Only admin can update addresses",
      "op": "assert // Only admin can update addresses",
      "stack_out": []
    },
    "2368": {
      "op": "bytec 12 // \"oracle_address\"",
      "defined_out": [
        "\"oracle_address\""
      ],
      "stack_out": [
        "\"oracle_address\""
      ]
    },
    "2370": {
      "op": "frame_dig -3",
      "defined_out": [
        "\"oracle_address\"",
        "oracle_address#0 (copy)"
      ],
      "stack_out": [
        "\"oracle_address\"",
        "oracle_address#0 (copy)"
      ]
    },
    "2372": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2373": {
      "op": "bytec 13 // \"tokenization_address\"",
      "defined_out": [
        "\"tokenization_address\""
      ],
      "stack_out": [
        "\"tokenization_address\""
      ]
    },
    "2375": {
      "op": "frame_dig -2",
      "defined_out": [
        "\"tokenization_address\"",
        "tokenization_address#0 (copy)"
      ],
      "stack_out": [
        "\"tokenization_address\"",
        "tokenization_address#0 (copy)"
      ]
    },
    "2377": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2378": {
      "op": "bytec 14 // \"amm_address\"",
      "defined_out": [
        "\"amm_address\""
      ],
      "stack_out": [
        "\"amm_address\""
      ]
    },
    "2380": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"amm_address\"",
        "amm_address#0 (copy)"
      ],
      "stack_out": [
        "\"amm_address\"",
        "amm_address#0 (copy)"
      ]
    },
    "2382": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2383": {
      "op": "pushbytes 0x436f6e7472616374206164647265737365732075706461746564",
      "defined_out": [
        "0x436f6e7472616374206164647265737365732075706461746564"
      ],
      "stack_out": [
        "0x436f6e7472616374206164647265737365732075706461746564"
      ]
    },
    "2411": {
      "op": "log",
      "stack_out": []
    },
    "2412": {
      "op": "pushbytes \"Contract addresses updated successfully\"",
      "defined_out": [
        "\"Contract addresses updated successfully\""
      ],
      "stack_out": [
        "\"Contract addresses updated successfully\""
      ]
    },
    "2453": {
      "retsub": true,
      "op": "retsub"
    }
  }
}