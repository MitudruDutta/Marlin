# flake8: noqa
# fmt: off
# mypy: ignore-errors
# This file was automatically generated by algokit-client-generator.
# DO NOT MODIFY IT BY HAND.
# requires: algokit-utils@^3.0.0

# common
import dataclasses
import typing
# core algosdk
import algosdk
from algosdk.transaction import OnComplete
from algosdk.atomic_transaction_composer import TransactionSigner
from algosdk.source_map import SourceMap
from algosdk.transaction import Transaction
from algosdk.v2client.models import SimulateTraceConfig
# utils
import algokit_utils
from algokit_utils import AlgorandClient as _AlgoKitAlgorandClient

_APP_SPEC_JSON = r"""{"arcs": [22, 28], "bareActions": {"call": [], "create": ["NoOp"]}, "methods": [{"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "string", "name": "name"}, {"type": "string", "name": "symbol"}, {"type": "uint64", "name": "maturity_timestamp"}], "name": "initialize", "returns": {"type": "string"}, "desc": "Initialize YT token with maturity", "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "byte[]", "name": "to"}, {"type": "uint64", "name": "amount"}], "name": "mint", "returns": {"type": "string"}, "desc": "Mint YT tokens to an address (owner only)", "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "uint64", "name": "amount"}], "name": "burn", "returns": {"type": "string"}, "desc": "Burn YT tokens from sender's balance", "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "byte[]", "name": "to"}, {"type": "uint64", "name": "amount"}], "name": "transfer", "returns": {"type": "string"}, "desc": "Transfer YT tokens to another address", "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "byte[]", "name": "account"}], "name": "balance_of", "returns": {"type": "uint64"}, "desc": "Get balance of an account", "events": [], "readonly": true, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [], "name": "get_total_supply", "returns": {"type": "uint64"}, "desc": "Get total supply of YT tokens", "events": [], "readonly": true, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [], "name": "get_maturity", "returns": {"type": "uint64"}, "desc": "Get maturity timestamp", "events": [], "readonly": true, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [], "name": "is_mature", "returns": {"type": "uint64"}, "desc": "Check if token has reached maturity", "events": [], "readonly": true, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [], "name": "is_accruing_yield", "returns": {"type": "uint64"}, "desc": "Check if yield is still accruing (before maturity)", "events": [], "readonly": true, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [], "name": "get_token_info", "returns": {"type": "(string,string,uint64,uint64)"}, "desc": "Get token information", "events": [], "readonly": true, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [], "name": "get_yield_status", "returns": {"type": "(uint64,uint64,uint64)"}, "desc": "Get yield status information", "events": [], "readonly": true, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "byte[]", "name": "spender"}, {"type": "uint64", "name": "amount"}], "name": "approve", "returns": {"type": "string"}, "desc": "Approve spender to spend tokens on behalf of sender", "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "byte[]", "name": "owner"}, {"type": "byte[]", "name": "spender"}], "name": "get_allowance", "returns": {"type": "uint64"}, "desc": "Get allowance for spender", "events": [], "readonly": true, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "byte[]", "name": "from_addr"}, {"type": "byte[]", "name": "to"}, {"type": "uint64", "name": "amount"}], "name": "transfer_from", "returns": {"type": "string"}, "desc": "Transfer tokens from one address to another using allowance", "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "uint64", "name": "base_amount"}, {"type": "uint64", "name": "yield_rate"}], "name": "calculate_yield_value", "returns": {"type": "uint64"}, "desc": "Calculate potential yield value based on time remaining", "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "byte[]", "name": "new_owner"}], "name": "update_owner", "returns": {"type": "string"}, "desc": "Update contract owner (current owner only)", "events": [], "readonly": false, "recommendations": {}}], "name": "YTToken", "state": {"keys": {"box": {}, "global": {"owner": {"key": "b3duZXI=", "keyType": "AVMString", "valueType": "AVMBytes"}, "name": {"key": "bmFtZQ==", "keyType": "AVMString", "valueType": "AVMString"}, "symbol": {"key": "c3ltYm9s", "keyType": "AVMString", "valueType": "AVMString"}, "maturity": {"key": "bWF0dXJpdHk=", "keyType": "AVMString", "valueType": "AVMUint64"}, "total_supply": {"key": "dG90YWxfc3VwcGx5", "keyType": "AVMString", "valueType": "AVMUint64"}, "decimals": {"key": "ZGVjaW1hbHM=", "keyType": "AVMString", "valueType": "AVMUint64"}}, "local": {"balance": {"key": "YmFsYW5jZQ==", "keyType": "AVMString", "valueType": "AVMUint64"}, "allowance": {"key": "YWxsb3dhbmNl", "keyType": "AVMString", "valueType": "AVMUint64"}}}, "maps": {"box": {}, "global": {}, "local": {}}, "schema": {"global": {"bytes": 3, "ints": 3}, "local": {"bytes": 0, "ints": 2}}}, "structs": {}, "byteCode": {"approval": "CiACAAEmCQQVH3x1B2JhbGFuY2UMdG90YWxfc3VwcGx5CG1hdHVyaXR5BW93bmVyCWFsbG93YW5jZQRuYW1lBnN5bWJvbAhkZWNpbWFsczEbQQIaghAES5htOgR5LaHKBHI8FTsEe19vVwRgpVzmBEaQk1UETzc+iASErFitBORwVd0ERmOv0QS02X+MBFsfl/4EKhXJiATJVf2DBFMPQOkEvu7mGTYaAI4QAXsBWQE9ARsBBADzAOIA0QDAALAAoAB+AGEAOQAgAAIiQzEZFEQxGEQ2GgFXAgCIBORJFRZXBgJMUChMULAjQzEZFEQxGEQ2GgEXNhoCF4gElhYoTFCwI0MxGRREMRhENhoBVwIANhoCVwIANhoDF4gD+UkVFlcGAkxQKExQsCNDMRkURDEYRDYaAVcCADYaAlcCAIgDyhYoTFCwI0MxGRREMRhENhoBVwIANhoCF4gDakkVFlcGAkxQKExQsCNDMRkURDEYRIgDJChMULAjQzEZFEQxGESIAtQoTFCwI0MxGRREMRhEiAK2FihMULAjQzEZFEQxGESIApcWKExQsCNDMRkURDEYRIgCgRYoTFCwI0MxGRREMRhEiAJrFihMULAjQzEZFEQxGEQ2GgFXAgCIAkoWKExQsCNDMRkURDEYRDYaAVcCADYaAheIAchJFRZXBgJMUChMULAjQzEZFEQxGEQ2GgEXiAFFSRUWVwYCTFAoTFCwI0MxGRREMRhENhoBVwIANhoCF4gAuEkVFlcGAkxQKExQsCNDMRkURDEYRDYaAVcCADYaAlcCADYaAxeIABlJFRZXBgJMUChMULAjQzEZQP5YMRgURCNDigMBMQAyCRJEi/8yBw1EJwQxAGcnBov9ZycHi/5nK4v/ZyoiZycIgQhni/8WgCFZVCBUb2tlbiBpbml0aWFsaXplZCAtIE1hdHVyaXR5OiBMULCAIVlUIFRva2VuIGluaXRpYWxpemVkIHN1Y2Nlc3NmdWxseYmKAgExACInBGVEEkSL/0QiKmVEi/8IKkxnMQAiKWNEi/8IMQApTwJmi/8WgBtZVCB0b2tlbnMgbWludGVkIC0gQW1vdW50OiBMULCAHVlUIHRva2VucyBtaW50ZWQgc3VjY2Vzc2Z1bGx5iYoBAYv/RDEAIiljREmL/w9Ei/8JMQApTwJmIiplRIv/CSpMZ4v/FoAbWVQgdG9rZW5zIGJ1cm5lZCAtIEFtb3VudDogTFCwgB1ZVCB0b2tlbnMgYnVybmVkIHN1Y2Nlc3NmdWxseYmKAgGL/0QxACIpY0RJi/8PRIv/CTEAKU8CZov/FoAgWVQgdG9rZW5zIHRyYW5zZmVycmVkIC0gQW1vdW50OiBMULCAIllUIHRva2VucyB0cmFuc2ZlcnJlZCBzdWNjZXNzZnVsbHmJigEBMQAiKWNEiSIqZUSJIitlRIkyByIrZUQPQQACI4kiiTIHIitlRAxBAAIjiSKJIicGZURJFRZXBgJMUCInB2VESRUWVwYCTFAiJwhlRBYiKmVEFksDFYEUCBZXBgKAAgAUTFBPAlBMUE8CUExQiYoAATIHSSIrZUxJTgJOA0QMSUEAFYsBiwAJiwIWTBaLARZOAlBMUIwAiSJC/+yKAgExACcFi/9mi/8WgBdBcHByb3ZhbCBzZXQgLSBBbW91bnQ6IExQsIAZQXBwcm92YWwgc2V0IHN1Y2Nlc3NmdWxseYmKAgExACInBWNEiYoDAYv/RDEAIicFY0RJi/8PRDEAIiljREmL/w9Ei/8JMQApTwJmi/8JMQAnBU8CZov/FoAiVG9rZW5zIHRyYW5zZmVycmVkIGZyb20gLSBBbW91bnQ6IExQsIAfVG9rZW5zIHRyYW5zZmVycmVkIHN1Y2Nlc3NmdWxseYmKAgEyB0kiK2VMSU4CTgNED0EABCKMAImLAYsACYv+i/8LC4GA8K7nlgkKjACJigEBMQAiJwRlRBJEJwSL/2eADU93bmVyIHVwZGF0ZWSwgBpPd25lciB1cGRhdGVkIHN1Y2Nlc3NmdWxseYk=", "clear": "CoEBQw=="}, "desc": "Yield Token contract for yield tokenization", "events": [], "networks": {}, "source": {"approval": "", "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"}, "sourceInfo": {"approval": {"pcOffsetMethod": "none", "sourceInfo": [{"pc": [766, 864, 967, 1308], "errorMessage": "Amount must be positive"}, {"pc": [1320], "errorMessage": "Insufficient allowance"}, {"pc": [875, 978, 1331], "errorMessage": "Insufficient balance"}, {"pc": [647], "errorMessage": "Maturity must be in future"}, {"pc": [208, 238, 263, 303, 332, 366, 382, 398, 415, 432, 449, 466, 489, 523, 551, 585], "errorMessage": "OnCompletion is not NoOp"}, {"pc": [641], "errorMessage": "Only creator can initialize"}, {"pc": [763], "errorMessage": "Only owner can mint"}, {"pc": [1484], "errorMessage": "Only owner can update"}, {"pc": [630], "errorMessage": "can only call when creating"}, {"pc": [211, 241, 266, 306, 335, 369, 385, 401, 418, 435, 452, 469, 492, 526, 554, 588], "errorMessage": "can only call when not creating"}, {"pc": [1301, 1315], "errorMessage": "check self.allowance exists for account"}, {"pc": [782, 870, 973, 1073, 1326], "errorMessage": "check self.balance exists for account"}, {"pc": [1143], "errorMessage": "check self.decimals exists"}, {"pc": [1083, 1090, 1104, 1192, 1442], "errorMessage": "check self.maturity exists"}, {"pc": [1117], "errorMessage": "check self.name exists"}, {"pc": [761, 1482], "errorMessage": "check self.owner exists"}, {"pc": [1130], "errorMessage": "check self.symbol exists"}, {"pc": [770, 888, 1078, 1148], "errorMessage": "check self.total_supply exists"}]}, "clear": {"pcOffsetMethod": "none", "sourceInfo": []}}, "templateVariables": {}}"""
APP_SPEC = algokit_utils.Arc56Contract.from_json(_APP_SPEC_JSON)

def _parse_abi_args(args: object | None = None) -> list[object] | None:
    """Helper to parse ABI args into the format expected by underlying client"""
    if args is None:
        return None

    def convert_dataclass(value: object) -> object:
        if dataclasses.is_dataclass(value):
            return tuple(convert_dataclass(getattr(value, field.name)) for field in dataclasses.fields(value))
        elif isinstance(value, (list, tuple)):
            return type(value)(convert_dataclass(item) for item in value)
        return value

    match args:
        case tuple():
            method_args = list(args)
        case _ if dataclasses.is_dataclass(args):
            method_args = [getattr(args, field.name) for field in dataclasses.fields(args)]
        case _:
            raise ValueError("Invalid 'args' type. Expected 'tuple' or 'TypedDict' for respective typed arguments.")

    return [
        convert_dataclass(arg) if not isinstance(arg, algokit_utils.AppMethodCallTransactionArgument) else arg
        for arg in method_args
    ] if method_args else None

def _init_dataclass(cls: type, data: dict) -> object:
    """
    Recursively instantiate a dataclass of type `cls` from `data`.

    For each field on the dataclass, if the field type is also a dataclass
    and the corresponding data is a dict, instantiate that field recursively.
    """
    field_values = {}
    for field in dataclasses.fields(cls):
        field_value = data.get(field.name)
        # Check if the field expects another dataclass and the value is a dict.
        if dataclasses.is_dataclass(field.type) and isinstance(field_value, dict):
            field_values[field.name] = _init_dataclass(typing.cast(type, field.type), field_value)
        else:
            field_values[field.name] = field_value
    return cls(**field_values)

@dataclasses.dataclass(frozen=True, kw_only=True)
class InitializeArgs:
    """Dataclass for initialize arguments"""
    name: str
    symbol: str
    maturity_timestamp: int

    @property
    def abi_method_signature(self) -> str:
        return "initialize(string,string,uint64)string"

@dataclasses.dataclass(frozen=True, kw_only=True)
class MintArgs:
    """Dataclass for mint arguments"""
    to: bytes | str
    amount: int

    @property
    def abi_method_signature(self) -> str:
        return "mint(byte[],uint64)string"

@dataclasses.dataclass(frozen=True, kw_only=True)
class BurnArgs:
    """Dataclass for burn arguments"""
    amount: int

    @property
    def abi_method_signature(self) -> str:
        return "burn(uint64)string"

@dataclasses.dataclass(frozen=True, kw_only=True)
class TransferArgs:
    """Dataclass for transfer arguments"""
    to: bytes | str
    amount: int

    @property
    def abi_method_signature(self) -> str:
        return "transfer(byte[],uint64)string"

@dataclasses.dataclass(frozen=True, kw_only=True)
class BalanceOfArgs:
    """Dataclass for balance_of arguments"""
    account: bytes | str

    @property
    def abi_method_signature(self) -> str:
        return "balance_of(byte[])uint64"

@dataclasses.dataclass(frozen=True, kw_only=True)
class ApproveArgs:
    """Dataclass for approve arguments"""
    spender: bytes | str
    amount: int

    @property
    def abi_method_signature(self) -> str:
        return "approve(byte[],uint64)string"

@dataclasses.dataclass(frozen=True, kw_only=True)
class GetAllowanceArgs:
    """Dataclass for get_allowance arguments"""
    owner: bytes | str
    spender: bytes | str

    @property
    def abi_method_signature(self) -> str:
        return "get_allowance(byte[],byte[])uint64"

@dataclasses.dataclass(frozen=True, kw_only=True)
class TransferFromArgs:
    """Dataclass for transfer_from arguments"""
    from_addr: bytes | str
    to: bytes | str
    amount: int

    @property
    def abi_method_signature(self) -> str:
        return "transfer_from(byte[],byte[],uint64)string"

@dataclasses.dataclass(frozen=True, kw_only=True)
class CalculateYieldValueArgs:
    """Dataclass for calculate_yield_value arguments"""
    base_amount: int
    yield_rate: int

    @property
    def abi_method_signature(self) -> str:
        return "calculate_yield_value(uint64,uint64)uint64"

@dataclasses.dataclass(frozen=True, kw_only=True)
class UpdateOwnerArgs:
    """Dataclass for update_owner arguments"""
    new_owner: bytes | str

    @property
    def abi_method_signature(self) -> str:
        return "update_owner(byte[])string"


class YtTokenParams:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    def initialize(
        self,
        args: tuple[str, str, int] | InitializeArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "initialize(string,string,uint64)string",
            "args": method_args,
        }))

    def mint(
        self,
        args: tuple[bytes | str, int] | MintArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "mint(byte[],uint64)string",
            "args": method_args,
        }))

    def burn(
        self,
        args: tuple[int] | BurnArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "burn(uint64)string",
            "args": method_args,
        }))

    def transfer(
        self,
        args: tuple[bytes | str, int] | TransferArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "transfer(byte[],uint64)string",
            "args": method_args,
        }))

    def balance_of(
        self,
        args: tuple[bytes | str] | BalanceOfArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "balance_of(byte[])uint64",
            "args": method_args,
        }))

    def get_total_supply(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_total_supply()uint64",
        }))

    def get_maturity(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_maturity()uint64",
        }))

    def is_mature(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "is_mature()uint64",
        }))

    def is_accruing_yield(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "is_accruing_yield()uint64",
        }))

    def get_token_info(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_token_info()(string,string,uint64,uint64)",
        }))

    def get_yield_status(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_yield_status()(uint64,uint64,uint64)",
        }))

    def approve(
        self,
        args: tuple[bytes | str, int] | ApproveArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "approve(byte[],uint64)string",
            "args": method_args,
        }))

    def get_allowance(
        self,
        args: tuple[bytes | str, bytes | str] | GetAllowanceArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_allowance(byte[],byte[])uint64",
            "args": method_args,
        }))

    def transfer_from(
        self,
        args: tuple[bytes | str, bytes | str, int] | TransferFromArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "transfer_from(byte[],byte[],uint64)string",
            "args": method_args,
        }))

    def calculate_yield_value(
        self,
        args: tuple[int, int] | CalculateYieldValueArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "calculate_yield_value(uint64,uint64)uint64",
            "args": method_args,
        }))

    def update_owner(
        self,
        args: tuple[bytes | str] | UpdateOwnerArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "update_owner(byte[])string",
            "args": method_args,
        }))

    def clear_state(
        self,
        params: algokit_utils.AppClientBareCallParams | None = None,
        
    ) -> algokit_utils.AppCallParams:
        return self.app_client.params.bare.clear_state(
            params,
            
        )


class YtTokenCreateTransactionParams:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    def initialize(
        self,
        args: tuple[str, str, int] | InitializeArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "initialize(string,string,uint64)string",
            "args": method_args,
        }))

    def mint(
        self,
        args: tuple[bytes | str, int] | MintArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "mint(byte[],uint64)string",
            "args": method_args,
        }))

    def burn(
        self,
        args: tuple[int] | BurnArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "burn(uint64)string",
            "args": method_args,
        }))

    def transfer(
        self,
        args: tuple[bytes | str, int] | TransferArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "transfer(byte[],uint64)string",
            "args": method_args,
        }))

    def balance_of(
        self,
        args: tuple[bytes | str] | BalanceOfArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "balance_of(byte[])uint64",
            "args": method_args,
        }))

    def get_total_supply(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_total_supply()uint64",
        }))

    def get_maturity(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_maturity()uint64",
        }))

    def is_mature(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "is_mature()uint64",
        }))

    def is_accruing_yield(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "is_accruing_yield()uint64",
        }))

    def get_token_info(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_token_info()(string,string,uint64,uint64)",
        }))

    def get_yield_status(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_yield_status()(uint64,uint64,uint64)",
        }))

    def approve(
        self,
        args: tuple[bytes | str, int] | ApproveArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "approve(byte[],uint64)string",
            "args": method_args,
        }))

    def get_allowance(
        self,
        args: tuple[bytes | str, bytes | str] | GetAllowanceArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_allowance(byte[],byte[])uint64",
            "args": method_args,
        }))

    def transfer_from(
        self,
        args: tuple[bytes | str, bytes | str, int] | TransferFromArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "transfer_from(byte[],byte[],uint64)string",
            "args": method_args,
        }))

    def calculate_yield_value(
        self,
        args: tuple[int, int] | CalculateYieldValueArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "calculate_yield_value(uint64,uint64)uint64",
            "args": method_args,
        }))

    def update_owner(
        self,
        args: tuple[bytes | str] | UpdateOwnerArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "update_owner(byte[])string",
            "args": method_args,
        }))

    def clear_state(
        self,
        params: algokit_utils.AppClientBareCallParams | None = None,
        
    ) -> Transaction:
        return self.app_client.create_transaction.bare.clear_state(
            params,
            
        )


class YtTokenSend:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    def initialize(
        self,
        args: tuple[str, str, int] | InitializeArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[str]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "initialize(string,string,uint64)string",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[str], parsed_response)

    def mint(
        self,
        args: tuple[bytes | str, int] | MintArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[str]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "mint(byte[],uint64)string",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[str], parsed_response)

    def burn(
        self,
        args: tuple[int] | BurnArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[str]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "burn(uint64)string",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[str], parsed_response)

    def transfer(
        self,
        args: tuple[bytes | str, int] | TransferArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[str]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "transfer(byte[],uint64)string",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[str], parsed_response)

    def balance_of(
        self,
        args: tuple[bytes | str] | BalanceOfArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[int]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "balance_of(byte[])uint64",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[int], parsed_response)

    def get_total_supply(
        self,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[int]:
    
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_total_supply()uint64",
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[int], parsed_response)

    def get_maturity(
        self,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[int]:
    
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_maturity()uint64",
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[int], parsed_response)

    def is_mature(
        self,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[int]:
    
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "is_mature()uint64",
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[int], parsed_response)

    def is_accruing_yield(
        self,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[int]:
    
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "is_accruing_yield()uint64",
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[int], parsed_response)

    def get_token_info(
        self,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[tuple[str, str, int, int]]:
    
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_token_info()(string,string,uint64,uint64)",
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[tuple[str, str, int, int]], parsed_response)

    def get_yield_status(
        self,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[tuple[int, int, int]]:
    
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_yield_status()(uint64,uint64,uint64)",
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[tuple[int, int, int]], parsed_response)

    def approve(
        self,
        args: tuple[bytes | str, int] | ApproveArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[str]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "approve(byte[],uint64)string",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[str], parsed_response)

    def get_allowance(
        self,
        args: tuple[bytes | str, bytes | str] | GetAllowanceArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[int]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_allowance(byte[],byte[])uint64",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[int], parsed_response)

    def transfer_from(
        self,
        args: tuple[bytes | str, bytes | str, int] | TransferFromArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[str]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "transfer_from(byte[],byte[],uint64)string",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[str], parsed_response)

    def calculate_yield_value(
        self,
        args: tuple[int, int] | CalculateYieldValueArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[int]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "calculate_yield_value(uint64,uint64)uint64",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[int], parsed_response)

    def update_owner(
        self,
        args: tuple[bytes | str] | UpdateOwnerArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[str]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "update_owner(byte[])string",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[str], parsed_response)

    def clear_state(
        self,
        params: algokit_utils.AppClientBareCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[algokit_utils.ABIReturn]:
        return self.app_client.send.bare.clear_state(
            params,
            send_params=send_params,
        )


class GlobalStateValue(typing.TypedDict):
    """Shape of global_state state key values"""
    owner: bytes
    name: str
    symbol: str
    maturity: int
    total_supply: int
    decimals: int

class LocalStateValue(typing.TypedDict):
    """Shape of local_state state key values"""
    balance: int
    allowance: int

class YtTokenState:
    """Methods to access state for the current YTToken app"""

    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    @property
    def global_state(
        self
    ) -> "_GlobalState":
            """Methods to access global_state for the current app"""
            return _GlobalState(self.app_client)

    def local_state(
        self, address: str
    ) -> "_LocalState":
            """Methods to access local_state for the current app"""
            return _LocalState(self.app_client, address)

class _GlobalState:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client
        
        # Pre-generated mapping of value types to their struct classes
        self._struct_classes: dict[str, typing.Type[typing.Any]] = {}

    def get_all(self) -> GlobalStateValue:
        """Get all current keyed values from global_state state"""
        result = self.app_client.state.global_state.get_all()
        if not result:
            return typing.cast(GlobalStateValue, {})

        converted = {}
        for key, value in result.items():
            key_info = self.app_client.app_spec.state.keys.global_state.get(key)
            struct_class = self._struct_classes.get(key_info.value_type) if key_info else None
            converted[key] = (
                _init_dataclass(struct_class, value) if struct_class and isinstance(value, dict)
                else value
            )
        return typing.cast(GlobalStateValue, converted)

    @property
    def owner(self) -> bytes:
        """Get the current value of the owner key in global_state state"""
        value = self.app_client.state.global_state.get_value("owner")
        if isinstance(value, dict) and "AVMBytes" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMBytes"], value)  # type: ignore
        return typing.cast(bytes, value)

    @property
    def name(self) -> str:
        """Get the current value of the name key in global_state state"""
        value = self.app_client.state.global_state.get_value("name")
        if isinstance(value, dict) and "AVMString" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMString"], value)  # type: ignore
        return typing.cast(str, value)

    @property
    def symbol(self) -> str:
        """Get the current value of the symbol key in global_state state"""
        value = self.app_client.state.global_state.get_value("symbol")
        if isinstance(value, dict) and "AVMString" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMString"], value)  # type: ignore
        return typing.cast(str, value)

    @property
    def maturity(self) -> int:
        """Get the current value of the maturity key in global_state state"""
        value = self.app_client.state.global_state.get_value("maturity")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def total_supply(self) -> int:
        """Get the current value of the total_supply key in global_state state"""
        value = self.app_client.state.global_state.get_value("total_supply")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def decimals(self) -> int:
        """Get the current value of the decimals key in global_state state"""
        value = self.app_client.state.global_state.get_value("decimals")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

class _LocalState:
    def __init__(self, app_client: algokit_utils.AppClient, address: str):
        self.app_client = app_client
        self.address = address
        # Pre-generated mapping of value types to their struct classes
        self._struct_classes: dict[str, typing.Type[typing.Any]] = {}

    def get_all(self) -> LocalStateValue:
        """Get all current keyed values from local_state state"""
        result = self.app_client.state.local_state(self.address).get_all()
        if not result:
            return typing.cast(LocalStateValue, {})

        converted = {}
        for key, value in result.items():
            key_info = self.app_client.app_spec.state.keys.local_state.get(key)
            struct_class = self._struct_classes.get(key_info.value_type) if key_info else None
            converted[key] = (
                _init_dataclass(struct_class, value) if struct_class and isinstance(value, dict)
                else value
            )
        return typing.cast(LocalStateValue, converted)

    @property
    def balance(self) -> int:
        """Get the current value of the balance key in local_state state"""
        value = self.app_client.state.local_state(self.address).get_value("balance")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def allowance(self) -> int:
        """Get the current value of the allowance key in local_state state"""
        value = self.app_client.state.local_state(self.address).get_value("allowance")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

class YtTokenClient:
    """Client for interacting with YTToken smart contract"""

    @typing.overload
    def __init__(self, app_client: algokit_utils.AppClient) -> None: ...
    
    @typing.overload
    def __init__(
        self,
        *,
        algorand: _AlgoKitAlgorandClient,
        app_id: int,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> None: ...

    def __init__(
        self,
        app_client: algokit_utils.AppClient | None = None,
        *,
        algorand: _AlgoKitAlgorandClient | None = None,
        app_id: int | None = None,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> None:
        if app_client:
            self.app_client = app_client
        elif algorand and app_id:
            self.app_client = algokit_utils.AppClient(
                algokit_utils.AppClientParams(
                    algorand=algorand,
                    app_spec=APP_SPEC,
                    app_id=app_id,
                    app_name=app_name,
                    default_sender=default_sender,
                    default_signer=default_signer,
                    approval_source_map=approval_source_map,
                    clear_source_map=clear_source_map,
                )
            )
        else:
            raise ValueError("Either app_client or algorand and app_id must be provided")
    
        self.params = YtTokenParams(self.app_client)
        self.create_transaction = YtTokenCreateTransactionParams(self.app_client)
        self.send = YtTokenSend(self.app_client)
        self.state = YtTokenState(self.app_client)

    @staticmethod
    def from_creator_and_name(
        creator_address: str,
        app_name: str,
        algorand: _AlgoKitAlgorandClient,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
        ignore_cache: bool | None = None,
        app_lookup_cache: algokit_utils.ApplicationLookup | None = None,
    ) -> "YtTokenClient":
        return YtTokenClient(
            algokit_utils.AppClient.from_creator_and_name(
                creator_address=creator_address,
                app_name=app_name,
                app_spec=APP_SPEC,
                algorand=algorand,
                default_sender=default_sender,
                default_signer=default_signer,
                approval_source_map=approval_source_map,
                clear_source_map=clear_source_map,
                ignore_cache=ignore_cache,
                app_lookup_cache=app_lookup_cache,
            )
        )
    
    @staticmethod
    def from_network(
        algorand: _AlgoKitAlgorandClient,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> "YtTokenClient":
        return YtTokenClient(
            algokit_utils.AppClient.from_network(
                app_spec=APP_SPEC,
                algorand=algorand,
                app_name=app_name,
                default_sender=default_sender,
                default_signer=default_signer,
                approval_source_map=approval_source_map,
                clear_source_map=clear_source_map,
            )
        )

    @property
    def app_id(self) -> int:
        return self.app_client.app_id
    
    @property
    def app_address(self) -> str:
        return self.app_client.app_address
    
    @property
    def app_name(self) -> str:
        return self.app_client.app_name
    
    @property
    def app_spec(self) -> algokit_utils.Arc56Contract:
        return self.app_client.app_spec
    
    @property
    def algorand(self) -> _AlgoKitAlgorandClient:
        return self.app_client.algorand

    def clone(
        self,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> "YtTokenClient":
        return YtTokenClient(
            self.app_client.clone(
                app_name=app_name,
                default_sender=default_sender,
                default_signer=default_signer,
                approval_source_map=approval_source_map,
                clear_source_map=clear_source_map,
            )
        )

    def new_group(self) -> "YtTokenComposer":
        return YtTokenComposer(self)

    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["initialize(string,string,uint64)string"],
        return_value: algokit_utils.ABIReturn | None
    ) -> str | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["mint(byte[],uint64)string"],
        return_value: algokit_utils.ABIReturn | None
    ) -> str | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["burn(uint64)string"],
        return_value: algokit_utils.ABIReturn | None
    ) -> str | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["transfer(byte[],uint64)string"],
        return_value: algokit_utils.ABIReturn | None
    ) -> str | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["balance_of(byte[])uint64"],
        return_value: algokit_utils.ABIReturn | None
    ) -> int | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["get_total_supply()uint64"],
        return_value: algokit_utils.ABIReturn | None
    ) -> int | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["get_maturity()uint64"],
        return_value: algokit_utils.ABIReturn | None
    ) -> int | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["is_mature()uint64"],
        return_value: algokit_utils.ABIReturn | None
    ) -> int | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["is_accruing_yield()uint64"],
        return_value: algokit_utils.ABIReturn | None
    ) -> int | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["get_token_info()(string,string,uint64,uint64)"],
        return_value: algokit_utils.ABIReturn | None
    ) -> tuple[str, str, int, int] | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["get_yield_status()(uint64,uint64,uint64)"],
        return_value: algokit_utils.ABIReturn | None
    ) -> tuple[int, int, int] | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["approve(byte[],uint64)string"],
        return_value: algokit_utils.ABIReturn | None
    ) -> str | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["get_allowance(byte[],byte[])uint64"],
        return_value: algokit_utils.ABIReturn | None
    ) -> int | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["transfer_from(byte[],byte[],uint64)string"],
        return_value: algokit_utils.ABIReturn | None
    ) -> str | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["calculate_yield_value(uint64,uint64)uint64"],
        return_value: algokit_utils.ABIReturn | None
    ) -> int | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["update_owner(byte[])string"],
        return_value: algokit_utils.ABIReturn | None
    ) -> str | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: str,
        return_value: algokit_utils.ABIReturn | None
    ) -> algokit_utils.ABIValue | algokit_utils.ABIStruct | None: ...

    def decode_return_value(
        self,
        method: str,
        return_value: algokit_utils.ABIReturn | None
    ) -> algokit_utils.ABIValue | algokit_utils.ABIStruct | None | int | str | tuple[int, int, int] | tuple[str, str, int, int]:
        """Decode ABI return value for the given method."""
        if return_value is None:
            return None
    
        arc56_method = self.app_spec.get_arc56_method(method)
        decoded = return_value.get_arc56_value(arc56_method, self.app_spec.structs)
    
        # If method returns a struct, convert the dict to appropriate dataclass
        if (arc56_method and
            arc56_method.returns and
            arc56_method.returns.struct and
            isinstance(decoded, dict)):
            struct_class = globals().get(arc56_method.returns.struct)
            if struct_class:
                return struct_class(**typing.cast(dict, decoded))
        return decoded


@dataclasses.dataclass(frozen=True)
class YtTokenBareCallCreateParams(algokit_utils.AppClientBareCallCreateParams):
    """Parameters for creating YtToken contract with bare calls"""
    on_complete: typing.Literal[OnComplete.NoOpOC] | None = None

    def to_algokit_utils_params(self) -> algokit_utils.AppClientBareCallCreateParams:
        return algokit_utils.AppClientBareCallCreateParams(**self.__dict__)

class YtTokenFactory(algokit_utils.TypedAppFactoryProtocol[YtTokenBareCallCreateParams, None, None]):
    """Factory for deploying and managing YtTokenClient smart contracts"""

    def __init__(
        self,
        algorand: _AlgoKitAlgorandClient,
        *,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        version: str | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None,
    ):
        self.app_factory = algokit_utils.AppFactory(
            params=algokit_utils.AppFactoryParams(
                algorand=algorand,
                app_spec=APP_SPEC,
                app_name=app_name,
                default_sender=default_sender,
                default_signer=default_signer,
                version=version,
                compilation_params=compilation_params,
            )
        )
        self.params = YtTokenFactoryParams(self.app_factory)
        self.create_transaction = YtTokenFactoryCreateTransaction(self.app_factory)
        self.send = YtTokenFactorySend(self.app_factory)

    @property
    def app_name(self) -> str:
        return self.app_factory.app_name
    
    @property
    def app_spec(self) -> algokit_utils.Arc56Contract:
        return self.app_factory.app_spec
    
    @property
    def algorand(self) -> _AlgoKitAlgorandClient:
        return self.app_factory.algorand

    def deploy(
        self,
        *,
        on_update: algokit_utils.OnUpdate | None = None,
        on_schema_break: algokit_utils.OnSchemaBreak | None = None,
        create_params: YtTokenBareCallCreateParams | None = None,
        update_params: None = None,
        delete_params: None = None,
        existing_deployments: algokit_utils.ApplicationLookup | None = None,
        ignore_cache: bool = False,
        app_name: str | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None,
        send_params: algokit_utils.SendParams | None = None,
    ) -> tuple[YtTokenClient, algokit_utils.AppFactoryDeployResult]:
        """Deploy the application"""
        deploy_response = self.app_factory.deploy(
            on_update=on_update,
            on_schema_break=on_schema_break,
            create_params=create_params.to_algokit_utils_params() if create_params else None,
            update_params=update_params,
            delete_params=delete_params,
            existing_deployments=existing_deployments,
            ignore_cache=ignore_cache,
            app_name=app_name,
            compilation_params=compilation_params,
            send_params=send_params,
        )

        return YtTokenClient(deploy_response[0]), deploy_response[1]

    def get_app_client_by_creator_and_name(
        self,
        creator_address: str,
        app_name: str,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        ignore_cache: bool | None = None,
        app_lookup_cache: algokit_utils.ApplicationLookup | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> YtTokenClient:
        """Get an app client by creator address and name"""
        return YtTokenClient(
            self.app_factory.get_app_client_by_creator_and_name(
                creator_address,
                app_name,
                default_sender,
                default_signer,
                ignore_cache,
                app_lookup_cache,
                approval_source_map,
                clear_source_map,
            )
        )

    def get_app_client_by_id(
        self,
        app_id: int,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> YtTokenClient:
        """Get an app client by app ID"""
        return YtTokenClient(
            self.app_factory.get_app_client_by_id(
                app_id,
                app_name,
                default_sender,
                default_signer,
                approval_source_map,
                clear_source_map,
            )
        )


class YtTokenFactoryParams:
    """Parameters for creating transactions for YtToken contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory
        self.create = YtTokenFactoryCreateParams(app_factory)
        self.update = YtTokenFactoryUpdateParams(app_factory)
        self.delete = YtTokenFactoryDeleteParams(app_factory)

class YtTokenFactoryCreateParams:
    """Parameters for 'create' operations of YtToken contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateParams:
        """Creates an instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.bare.create(
            algokit_utils.AppFactoryCreateParams(**dataclasses.asdict(params)),
            compilation_params=compilation_params)

    def initialize(
        self,
        args: tuple[str, str, int] | InitializeArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the initialize(string,string,uint64)string ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "initialize(string,string,uint64)string",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def mint(
        self,
        args: tuple[bytes | str, int] | MintArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the mint(byte[],uint64)string ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "mint(byte[],uint64)string",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def burn(
        self,
        args: tuple[int] | BurnArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the burn(uint64)string ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "burn(uint64)string",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def transfer(
        self,
        args: tuple[bytes | str, int] | TransferArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the transfer(byte[],uint64)string ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "transfer(byte[],uint64)string",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def balance_of(
        self,
        args: tuple[bytes | str] | BalanceOfArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the balance_of(byte[])uint64 ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "balance_of(byte[])uint64",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def get_total_supply(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the get_total_supply()uint64 ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "get_total_supply()uint64",
                "args": None,
                }
            ),
            compilation_params=compilation_params
        )

    def get_maturity(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the get_maturity()uint64 ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "get_maturity()uint64",
                "args": None,
                }
            ),
            compilation_params=compilation_params
        )

    def is_mature(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the is_mature()uint64 ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "is_mature()uint64",
                "args": None,
                }
            ),
            compilation_params=compilation_params
        )

    def is_accruing_yield(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the is_accruing_yield()uint64 ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "is_accruing_yield()uint64",
                "args": None,
                }
            ),
            compilation_params=compilation_params
        )

    def get_token_info(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the get_token_info()(string,string,uint64,uint64) ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "get_token_info()(string,string,uint64,uint64)",
                "args": None,
                }
            ),
            compilation_params=compilation_params
        )

    def get_yield_status(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the get_yield_status()(uint64,uint64,uint64) ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "get_yield_status()(uint64,uint64,uint64)",
                "args": None,
                }
            ),
            compilation_params=compilation_params
        )

    def approve(
        self,
        args: tuple[bytes | str, int] | ApproveArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the approve(byte[],uint64)string ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "approve(byte[],uint64)string",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def get_allowance(
        self,
        args: tuple[bytes | str, bytes | str] | GetAllowanceArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the get_allowance(byte[],byte[])uint64 ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "get_allowance(byte[],byte[])uint64",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def transfer_from(
        self,
        args: tuple[bytes | str, bytes | str, int] | TransferFromArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the transfer_from(byte[],byte[],uint64)string ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "transfer_from(byte[],byte[],uint64)string",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def calculate_yield_value(
        self,
        args: tuple[int, int] | CalculateYieldValueArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the calculate_yield_value(uint64,uint64)uint64 ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "calculate_yield_value(uint64,uint64)uint64",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def update_owner(
        self,
        args: tuple[bytes | str] | UpdateOwnerArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the update_owner(byte[])string ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "update_owner(byte[])string",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

class YtTokenFactoryUpdateParams:
    """Parameters for 'update' operations of YtToken contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        
    ) -> algokit_utils.AppUpdateParams:
        """Updates an instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.bare.deploy_update(
            algokit_utils.AppClientBareCallParams(**dataclasses.asdict(params)),
            )

class YtTokenFactoryDeleteParams:
    """Parameters for 'delete' operations of YtToken contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        
    ) -> algokit_utils.AppDeleteParams:
        """Deletes an instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.bare.deploy_delete(
            algokit_utils.AppClientBareCallParams(**dataclasses.asdict(params)),
            )


class YtTokenFactoryCreateTransaction:
    """Create transactions for YtToken contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory
        self.create = YtTokenFactoryCreateTransactionCreate(app_factory)


class YtTokenFactoryCreateTransactionCreate:
    """Create new instances of YtToken contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
    ) -> Transaction:
        """Creates a new instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.create_transaction.bare.create(
            algokit_utils.AppFactoryCreateParams(**dataclasses.asdict(params)),
        )


class YtTokenFactorySend:
    """Send calls to YtToken contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory
        self.create = YtTokenFactorySendCreate(app_factory)


class YtTokenFactorySendCreate:
    """Send create calls to YtToken contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        send_params: algokit_utils.SendParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None,
    ) -> tuple[YtTokenClient, algokit_utils.SendAppCreateTransactionResult]:
        """Creates a new instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        result = self.app_factory.send.bare.create(
            algokit_utils.AppFactoryCreateParams(**dataclasses.asdict(params)),
            send_params=send_params,
            compilation_params=compilation_params
        )
        return YtTokenClient(result[0]), result[1]


class YtTokenComposer:
    """Composer for creating transaction groups for YtToken contract calls"""

    def __init__(self, client: "YtTokenClient"):
        self.client = client
        self._composer = client.algorand.new_group()
        self._result_mappers: list[typing.Callable[[algokit_utils.ABIReturn | None], object] | None] = []

    def initialize(
        self,
        args: tuple[str, str, int] | InitializeArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "YtTokenComposer":
        self._composer.add_app_call_method_call(
            self.client.params.initialize(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "initialize(string,string,uint64)string", v
            )
        )
        return self

    def mint(
        self,
        args: tuple[bytes | str, int] | MintArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "YtTokenComposer":
        self._composer.add_app_call_method_call(
            self.client.params.mint(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "mint(byte[],uint64)string", v
            )
        )
        return self

    def burn(
        self,
        args: tuple[int] | BurnArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "YtTokenComposer":
        self._composer.add_app_call_method_call(
            self.client.params.burn(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "burn(uint64)string", v
            )
        )
        return self

    def transfer(
        self,
        args: tuple[bytes | str, int] | TransferArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "YtTokenComposer":
        self._composer.add_app_call_method_call(
            self.client.params.transfer(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "transfer(byte[],uint64)string", v
            )
        )
        return self

    def balance_of(
        self,
        args: tuple[bytes | str] | BalanceOfArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "YtTokenComposer":
        self._composer.add_app_call_method_call(
            self.client.params.balance_of(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "balance_of(byte[])uint64", v
            )
        )
        return self

    def get_total_supply(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "YtTokenComposer":
        self._composer.add_app_call_method_call(
            self.client.params.get_total_supply(
                
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "get_total_supply()uint64", v
            )
        )
        return self

    def get_maturity(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "YtTokenComposer":
        self._composer.add_app_call_method_call(
            self.client.params.get_maturity(
                
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "get_maturity()uint64", v
            )
        )
        return self

    def is_mature(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "YtTokenComposer":
        self._composer.add_app_call_method_call(
            self.client.params.is_mature(
                
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "is_mature()uint64", v
            )
        )
        return self

    def is_accruing_yield(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "YtTokenComposer":
        self._composer.add_app_call_method_call(
            self.client.params.is_accruing_yield(
                
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "is_accruing_yield()uint64", v
            )
        )
        return self

    def get_token_info(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "YtTokenComposer":
        self._composer.add_app_call_method_call(
            self.client.params.get_token_info(
                
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "get_token_info()(string,string,uint64,uint64)", v
            )
        )
        return self

    def get_yield_status(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "YtTokenComposer":
        self._composer.add_app_call_method_call(
            self.client.params.get_yield_status(
                
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "get_yield_status()(uint64,uint64,uint64)", v
            )
        )
        return self

    def approve(
        self,
        args: tuple[bytes | str, int] | ApproveArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "YtTokenComposer":
        self._composer.add_app_call_method_call(
            self.client.params.approve(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "approve(byte[],uint64)string", v
            )
        )
        return self

    def get_allowance(
        self,
        args: tuple[bytes | str, bytes | str] | GetAllowanceArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "YtTokenComposer":
        self._composer.add_app_call_method_call(
            self.client.params.get_allowance(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "get_allowance(byte[],byte[])uint64", v
            )
        )
        return self

    def transfer_from(
        self,
        args: tuple[bytes | str, bytes | str, int] | TransferFromArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "YtTokenComposer":
        self._composer.add_app_call_method_call(
            self.client.params.transfer_from(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "transfer_from(byte[],byte[],uint64)string", v
            )
        )
        return self

    def calculate_yield_value(
        self,
        args: tuple[int, int] | CalculateYieldValueArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "YtTokenComposer":
        self._composer.add_app_call_method_call(
            self.client.params.calculate_yield_value(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "calculate_yield_value(uint64,uint64)uint64", v
            )
        )
        return self

    def update_owner(
        self,
        args: tuple[bytes | str] | UpdateOwnerArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "YtTokenComposer":
        self._composer.add_app_call_method_call(
            self.client.params.update_owner(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "update_owner(byte[])string", v
            )
        )
        return self

    def clear_state(
        self,
        *,
        args: list[bytes] | None = None,
        params: algokit_utils.CommonAppCallParams | None = None,
    ) -> "YtTokenComposer":
        params=params or algokit_utils.CommonAppCallParams()
        self._composer.add_app_call(
            self.client.params.clear_state(
                algokit_utils.AppClientBareCallParams(
                    **{
                        **dataclasses.asdict(params),
                        "args": args
                    }
                )
            )
        )
        return self
    
    def add_transaction(
        self, txn: Transaction, signer: TransactionSigner | None = None
    ) -> "YtTokenComposer":
        self._composer.add_transaction(txn, signer)
        return self
    
    def composer(self) -> algokit_utils.TransactionComposer:
        return self._composer
    
    def simulate(
        self,
        allow_more_logs: bool | None = None,
        allow_empty_signatures: bool | None = None,
        allow_unnamed_resources: bool | None = None,
        extra_opcode_budget: int | None = None,
        exec_trace_config: SimulateTraceConfig | None = None,
        simulation_round: int | None = None,
        skip_signatures: bool | None = None,
    ) -> algokit_utils.SendAtomicTransactionComposerResults:
        return self._composer.simulate(
            allow_more_logs=allow_more_logs,
            allow_empty_signatures=allow_empty_signatures,
            allow_unnamed_resources=allow_unnamed_resources,
            extra_opcode_budget=extra_opcode_budget,
            exec_trace_config=exec_trace_config,
            simulation_round=simulation_round,
            skip_signatures=skip_signatures,
        )
    
    def send(
        self,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAtomicTransactionComposerResults:
        return self._composer.send(send_params)
